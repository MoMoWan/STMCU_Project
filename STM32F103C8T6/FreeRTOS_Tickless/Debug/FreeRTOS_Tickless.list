
FreeRTOS_Tickless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001258  20000070  08003ae0  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200012c8  08003ae0  000212c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b221  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b20  00000000  00000000  0003b2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000830a  00000000  00000000  0003edda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cf0  00000000  00000000  000470e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001058  00000000  00000000  00047dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e1f  00000000  00000000  00048e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004e62  00000000  00000000  0004fc4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054ab1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002dfc  00000000  00000000  00054b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  0005792c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000014d  00000000  00000000  000579c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080038a4 	.word	0x080038a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080038a4 	.word	0x080038a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <HAL_Init+0x20>)
{
 8000162:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000164:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000166:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000168:	f043 0310 	orr.w	r3, r3, #16
 800016c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016e:	f000 f81b 	bl	80001a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f002 f8b4 	bl	80022e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f002 f862 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800017c:	2000      	movs	r0, #0
 800017e:	bd08      	pop	{r3, pc}
 8000180:	40022000 	.word	0x40022000

08000184 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <HAL_IncTick+0x10>)
 8000186:	4b04      	ldr	r3, [pc, #16]	; (8000198 <HAL_IncTick+0x14>)
 8000188:	6811      	ldr	r1, [r2, #0]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	440b      	add	r3, r1
 800018e:	6013      	str	r3, [r2, #0]
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	200011f4 	.word	0x200011f4
 8000198:	20000000 	.word	0x20000000

0800019c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800019c:	4b01      	ldr	r3, [pc, #4]	; (80001a4 <HAL_GetTick+0x8>)
 800019e:	6818      	ldr	r0, [r3, #0]
}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	200011f4 	.word	0x200011f4

080001a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001aa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001b6:	041b      	lsls	r3, r3, #16
 80001b8:	0c1b      	lsrs	r3, r3, #16
 80001ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001c4:	60d3      	str	r3, [r2, #12]
 80001c6:	4770      	bx	lr
 80001c8:	e000ed00 	.word	0xe000ed00

080001cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001ce:	b530      	push	{r4, r5, lr}
 80001d0:	68dc      	ldr	r4, [r3, #12]
 80001d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001dc:	2b04      	cmp	r3, #4
 80001de:	bf28      	it	cs
 80001e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001e4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e8:	bf98      	it	ls
 80001ea:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001ec:	fa05 f303 	lsl.w	r3, r5, r3
 80001f0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001f4:	bf88      	it	hi
 80001f6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f8:	4019      	ands	r1, r3
 80001fa:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80001fc:	fa05 f404 	lsl.w	r4, r5, r4
 8000200:	3c01      	subs	r4, #1
 8000202:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000204:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000206:	ea42 0201 	orr.w	r2, r2, r1
 800020a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020e:	bfaf      	iteee	ge
 8000210:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	4b06      	ldrlt	r3, [pc, #24]	; (8000230 <HAL_NVIC_SetPriority+0x64>)
 8000216:	f000 000f 	andlt.w	r0, r0, #15
 800021a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021c:	bfa5      	ittet	ge
 800021e:	b2d2      	uxtbge	r2, r2
 8000220:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000226:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800022a:	bd30      	pop	{r4, r5, pc}
 800022c:	e000ed00 	.word	0xe000ed00
 8000230:	e000ed14 	.word	0xe000ed14

08000234 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000234:	2301      	movs	r3, #1
 8000236:	0942      	lsrs	r2, r0, #5
 8000238:	f000 001f 	and.w	r0, r0, #31
 800023c:	fa03 f000 	lsl.w	r0, r3, r0
 8000240:	4b01      	ldr	r3, [pc, #4]	; (8000248 <HAL_NVIC_EnableIRQ+0x14>)
 8000242:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000246:	4770      	bx	lr
 8000248:	e000e100 	.word	0xe000e100

0800024c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800024c:	3801      	subs	r0, #1
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000252:	d20a      	bcs.n	800026a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800025a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000260:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000262:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000264:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800026a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e010 	.word	0xe000e010
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800027a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	bf0c      	ite	eq
 8000280:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000284:	f022 0204 	bicne.w	r2, r2, #4
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	4770      	bx	lr
 800028c:	e000e010 	.word	0xe000e010

08000290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000294:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000296:	4616      	mov	r6, r2
 8000298:	4b65      	ldr	r3, [pc, #404]	; (8000430 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800029a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000440 <HAL_GPIO_Init+0x1b0>
 800029e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000444 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002a2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002a6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002a8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ac:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	d17f      	bne.n	80003b4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002b4:	684d      	ldr	r5, [r1, #4]
 80002b6:	2d12      	cmp	r5, #18
 80002b8:	f000 80af 	beq.w	800041a <HAL_GPIO_Init+0x18a>
 80002bc:	f200 8088 	bhi.w	80003d0 <HAL_GPIO_Init+0x140>
 80002c0:	2d02      	cmp	r5, #2
 80002c2:	f000 80a7 	beq.w	8000414 <HAL_GPIO_Init+0x184>
 80002c6:	d87c      	bhi.n	80003c2 <HAL_GPIO_Init+0x132>
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	f000 808e 	beq.w	80003ea <HAL_GPIO_Init+0x15a>
 80002ce:	2d01      	cmp	r5, #1
 80002d0:	f000 809e 	beq.w	8000410 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002d4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002d8:	2cff      	cmp	r4, #255	; 0xff
 80002da:	bf93      	iteet	ls
 80002dc:	4682      	movls	sl, r0
 80002de:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002e2:	3d08      	subhi	r5, #8
 80002e4:	f8d0 b000 	ldrls.w	fp, [r0]
 80002e8:	bf92      	itee	ls
 80002ea:	00b5      	lslls	r5, r6, #2
 80002ec:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002f0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f2:	fa09 f805 	lsl.w	r8, r9, r5
 80002f6:	ea2b 0808 	bic.w	r8, fp, r8
 80002fa:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002fe:	bf88      	it	hi
 8000300:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000304:	ea48 0505 	orr.w	r5, r8, r5
 8000308:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800030c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000310:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000314:	d04e      	beq.n	80003b4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000316:	4d47      	ldr	r5, [pc, #284]	; (8000434 <HAL_GPIO_Init+0x1a4>)
 8000318:	4f46      	ldr	r7, [pc, #280]	; (8000434 <HAL_GPIO_Init+0x1a4>)
 800031a:	69ad      	ldr	r5, [r5, #24]
 800031c:	f026 0803 	bic.w	r8, r6, #3
 8000320:	f045 0501 	orr.w	r5, r5, #1
 8000324:	61bd      	str	r5, [r7, #24]
 8000326:	69bd      	ldr	r5, [r7, #24]
 8000328:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800032c:	f005 0501 	and.w	r5, r5, #1
 8000330:	9501      	str	r5, [sp, #4]
 8000332:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000336:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800033c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000340:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000344:	fa09 f90b 	lsl.w	r9, r9, fp
 8000348:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800034c:	4d3a      	ldr	r5, [pc, #232]	; (8000438 <HAL_GPIO_Init+0x1a8>)
 800034e:	42a8      	cmp	r0, r5
 8000350:	d068      	beq.n	8000424 <HAL_GPIO_Init+0x194>
 8000352:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000356:	42a8      	cmp	r0, r5
 8000358:	d066      	beq.n	8000428 <HAL_GPIO_Init+0x198>
 800035a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800035e:	42a8      	cmp	r0, r5
 8000360:	d064      	beq.n	800042c <HAL_GPIO_Init+0x19c>
 8000362:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000366:	42a8      	cmp	r0, r5
 8000368:	bf0c      	ite	eq
 800036a:	2503      	moveq	r5, #3
 800036c:	2504      	movne	r5, #4
 800036e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000372:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000376:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800037a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800037c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000380:	bf14      	ite	ne
 8000382:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000384:	43a5      	biceq	r5, r4
 8000386:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000388:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800038a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800038e:	bf14      	ite	ne
 8000390:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000392:	43a5      	biceq	r5, r4
 8000394:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000396:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000398:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800039c:	bf14      	ite	ne
 800039e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003a0:	43a5      	biceq	r5, r4
 80003a2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003a4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003a6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003aa:	bf14      	ite	ne
 80003ac:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ae:	ea25 0404 	biceq.w	r4, r5, r4
 80003b2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003b4:	3601      	adds	r6, #1
 80003b6:	2e10      	cmp	r6, #16
 80003b8:	f47f af73 	bne.w	80002a2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003bc:	b003      	add	sp, #12
 80003be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003c2:	2d03      	cmp	r5, #3
 80003c4:	d022      	beq.n	800040c <HAL_GPIO_Init+0x17c>
 80003c6:	2d11      	cmp	r5, #17
 80003c8:	d184      	bne.n	80002d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ca:	68ca      	ldr	r2, [r1, #12]
 80003cc:	3204      	adds	r2, #4
          break;
 80003ce:	e781      	b.n	80002d4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003d0:	4f1a      	ldr	r7, [pc, #104]	; (800043c <HAL_GPIO_Init+0x1ac>)
 80003d2:	42bd      	cmp	r5, r7
 80003d4:	d009      	beq.n	80003ea <HAL_GPIO_Init+0x15a>
 80003d6:	d812      	bhi.n	80003fe <HAL_GPIO_Init+0x16e>
 80003d8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000448 <HAL_GPIO_Init+0x1b8>
 80003dc:	454d      	cmp	r5, r9
 80003de:	d004      	beq.n	80003ea <HAL_GPIO_Init+0x15a>
 80003e0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003e4:	454d      	cmp	r5, r9
 80003e6:	f47f af75 	bne.w	80002d4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80003ea:	688a      	ldr	r2, [r1, #8]
 80003ec:	b1c2      	cbz	r2, 8000420 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80003ee:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003f0:	bf0c      	ite	eq
 80003f2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003f6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003fa:	2208      	movs	r2, #8
 80003fc:	e76a      	b.n	80002d4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003fe:	4575      	cmp	r5, lr
 8000400:	d0f3      	beq.n	80003ea <HAL_GPIO_Init+0x15a>
 8000402:	4565      	cmp	r5, ip
 8000404:	d0f1      	beq.n	80003ea <HAL_GPIO_Init+0x15a>
 8000406:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800044c <HAL_GPIO_Init+0x1bc>
 800040a:	e7eb      	b.n	80003e4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800040c:	2200      	movs	r2, #0
 800040e:	e761      	b.n	80002d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000410:	68ca      	ldr	r2, [r1, #12]
          break;
 8000412:	e75f      	b.n	80002d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000414:	68ca      	ldr	r2, [r1, #12]
 8000416:	3208      	adds	r2, #8
          break;
 8000418:	e75c      	b.n	80002d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800041a:	68ca      	ldr	r2, [r1, #12]
 800041c:	320c      	adds	r2, #12
          break;
 800041e:	e759      	b.n	80002d4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000420:	2204      	movs	r2, #4
 8000422:	e757      	b.n	80002d4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000424:	2500      	movs	r5, #0
 8000426:	e7a2      	b.n	800036e <HAL_GPIO_Init+0xde>
 8000428:	2501      	movs	r5, #1
 800042a:	e7a0      	b.n	800036e <HAL_GPIO_Init+0xde>
 800042c:	2502      	movs	r5, #2
 800042e:	e79e      	b.n	800036e <HAL_GPIO_Init+0xde>
 8000430:	40010400 	.word	0x40010400
 8000434:	40021000 	.word	0x40021000
 8000438:	40010800 	.word	0x40010800
 800043c:	10210000 	.word	0x10210000
 8000440:	10310000 	.word	0x10310000
 8000444:	10320000 	.word	0x10320000
 8000448:	10110000 	.word	0x10110000
 800044c:	10220000 	.word	0x10220000

08000450 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000450:	b10a      	cbz	r2, 8000456 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000452:	6101      	str	r1, [r0, #16]
 8000454:	4770      	bx	lr
 8000456:	0409      	lsls	r1, r1, #16
 8000458:	e7fb      	b.n	8000452 <HAL_GPIO_WritePin+0x2>

0800045a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800045a:	68c3      	ldr	r3, [r0, #12]
 800045c:	4059      	eors	r1, r3
 800045e:	60c1      	str	r1, [r0, #12]
 8000460:	4770      	bx	lr
	...

08000464 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000464:	6803      	ldr	r3, [r0, #0]
{
 8000466:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800046a:	07db      	lsls	r3, r3, #31
{
 800046c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800046e:	d410      	bmi.n	8000492 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000470:	682b      	ldr	r3, [r5, #0]
 8000472:	079f      	lsls	r7, r3, #30
 8000474:	d45e      	bmi.n	8000534 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000476:	682b      	ldr	r3, [r5, #0]
 8000478:	0719      	lsls	r1, r3, #28
 800047a:	f100 8095 	bmi.w	80005a8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800047e:	682b      	ldr	r3, [r5, #0]
 8000480:	075a      	lsls	r2, r3, #29
 8000482:	f100 80bf 	bmi.w	8000604 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000486:	69ea      	ldr	r2, [r5, #28]
 8000488:	2a00      	cmp	r2, #0
 800048a:	f040 812d 	bne.w	80006e8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800048e:	2000      	movs	r0, #0
 8000490:	e014      	b.n	80004bc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000492:	4c90      	ldr	r4, [pc, #576]	; (80006d4 <HAL_RCC_OscConfig+0x270>)
 8000494:	6863      	ldr	r3, [r4, #4]
 8000496:	f003 030c 	and.w	r3, r3, #12
 800049a:	2b04      	cmp	r3, #4
 800049c:	d007      	beq.n	80004ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800049e:	6863      	ldr	r3, [r4, #4]
 80004a0:	f003 030c 	and.w	r3, r3, #12
 80004a4:	2b08      	cmp	r3, #8
 80004a6:	d10c      	bne.n	80004c2 <HAL_RCC_OscConfig+0x5e>
 80004a8:	6863      	ldr	r3, [r4, #4]
 80004aa:	03de      	lsls	r6, r3, #15
 80004ac:	d509      	bpl.n	80004c2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ae:	6823      	ldr	r3, [r4, #0]
 80004b0:	039c      	lsls	r4, r3, #14
 80004b2:	d5dd      	bpl.n	8000470 <HAL_RCC_OscConfig+0xc>
 80004b4:	686b      	ldr	r3, [r5, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1da      	bne.n	8000470 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004ba:	2001      	movs	r0, #1
}
 80004bc:	b002      	add	sp, #8
 80004be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004c2:	686b      	ldr	r3, [r5, #4]
 80004c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004c8:	d110      	bne.n	80004ec <HAL_RCC_OscConfig+0x88>
 80004ca:	6823      	ldr	r3, [r4, #0]
 80004cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004d2:	f7ff fe63 	bl	800019c <HAL_GetTick>
 80004d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004d8:	6823      	ldr	r3, [r4, #0]
 80004da:	0398      	lsls	r0, r3, #14
 80004dc:	d4c8      	bmi.n	8000470 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004de:	f7ff fe5d 	bl	800019c <HAL_GetTick>
 80004e2:	1b80      	subs	r0, r0, r6
 80004e4:	2864      	cmp	r0, #100	; 0x64
 80004e6:	d9f7      	bls.n	80004d8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004e8:	2003      	movs	r0, #3
 80004ea:	e7e7      	b.n	80004bc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004ec:	b99b      	cbnz	r3, 8000516 <HAL_RCC_OscConfig+0xb2>
 80004ee:	6823      	ldr	r3, [r4, #0]
 80004f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004f4:	6023      	str	r3, [r4, #0]
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004fe:	f7ff fe4d 	bl	800019c <HAL_GetTick>
 8000502:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	0399      	lsls	r1, r3, #14
 8000508:	d5b2      	bpl.n	8000470 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800050a:	f7ff fe47 	bl	800019c <HAL_GetTick>
 800050e:	1b80      	subs	r0, r0, r6
 8000510:	2864      	cmp	r0, #100	; 0x64
 8000512:	d9f7      	bls.n	8000504 <HAL_RCC_OscConfig+0xa0>
 8000514:	e7e8      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	d103      	bne.n	8000526 <HAL_RCC_OscConfig+0xc2>
 800051e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000522:	6023      	str	r3, [r4, #0]
 8000524:	e7d1      	b.n	80004ca <HAL_RCC_OscConfig+0x66>
 8000526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052a:	6023      	str	r3, [r4, #0]
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000532:	e7cd      	b.n	80004d0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000534:	4c67      	ldr	r4, [pc, #412]	; (80006d4 <HAL_RCC_OscConfig+0x270>)
 8000536:	6863      	ldr	r3, [r4, #4]
 8000538:	f013 0f0c 	tst.w	r3, #12
 800053c:	d007      	beq.n	800054e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800053e:	6863      	ldr	r3, [r4, #4]
 8000540:	f003 030c 	and.w	r3, r3, #12
 8000544:	2b08      	cmp	r3, #8
 8000546:	d110      	bne.n	800056a <HAL_RCC_OscConfig+0x106>
 8000548:	6863      	ldr	r3, [r4, #4]
 800054a:	03da      	lsls	r2, r3, #15
 800054c:	d40d      	bmi.n	800056a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	079b      	lsls	r3, r3, #30
 8000552:	d502      	bpl.n	800055a <HAL_RCC_OscConfig+0xf6>
 8000554:	692b      	ldr	r3, [r5, #16]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d1af      	bne.n	80004ba <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	696a      	ldr	r2, [r5, #20]
 800055e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000562:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000566:	6023      	str	r3, [r4, #0]
 8000568:	e785      	b.n	8000476 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800056a:	692a      	ldr	r2, [r5, #16]
 800056c:	4b5a      	ldr	r3, [pc, #360]	; (80006d8 <HAL_RCC_OscConfig+0x274>)
 800056e:	b16a      	cbz	r2, 800058c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000574:	f7ff fe12 	bl	800019c <HAL_GetTick>
 8000578:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	079f      	lsls	r7, r3, #30
 800057e:	d4ec      	bmi.n	800055a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000580:	f7ff fe0c 	bl	800019c <HAL_GetTick>
 8000584:	1b80      	subs	r0, r0, r6
 8000586:	2802      	cmp	r0, #2
 8000588:	d9f7      	bls.n	800057a <HAL_RCC_OscConfig+0x116>
 800058a:	e7ad      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800058c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800058e:	f7ff fe05 	bl	800019c <HAL_GetTick>
 8000592:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000594:	6823      	ldr	r3, [r4, #0]
 8000596:	0798      	lsls	r0, r3, #30
 8000598:	f57f af6d 	bpl.w	8000476 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800059c:	f7ff fdfe 	bl	800019c <HAL_GetTick>
 80005a0:	1b80      	subs	r0, r0, r6
 80005a2:	2802      	cmp	r0, #2
 80005a4:	d9f6      	bls.n	8000594 <HAL_RCC_OscConfig+0x130>
 80005a6:	e79f      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005a8:	69aa      	ldr	r2, [r5, #24]
 80005aa:	4c4a      	ldr	r4, [pc, #296]	; (80006d4 <HAL_RCC_OscConfig+0x270>)
 80005ac:	4b4b      	ldr	r3, [pc, #300]	; (80006dc <HAL_RCC_OscConfig+0x278>)
 80005ae:	b1da      	cbz	r2, 80005e8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005b4:	f7ff fdf2 	bl	800019c <HAL_GetTick>
 80005b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005bc:	079b      	lsls	r3, r3, #30
 80005be:	d50d      	bpl.n	80005dc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005c4:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <HAL_RCC_OscConfig+0x27c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005ce:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005d0:	9b01      	ldr	r3, [sp, #4]
 80005d2:	1e5a      	subs	r2, r3, #1
 80005d4:	9201      	str	r2, [sp, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f9      	bne.n	80005ce <HAL_RCC_OscConfig+0x16a>
 80005da:	e750      	b.n	800047e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005dc:	f7ff fdde 	bl	800019c <HAL_GetTick>
 80005e0:	1b80      	subs	r0, r0, r6
 80005e2:	2802      	cmp	r0, #2
 80005e4:	d9e9      	bls.n	80005ba <HAL_RCC_OscConfig+0x156>
 80005e6:	e77f      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005ea:	f7ff fdd7 	bl	800019c <HAL_GetTick>
 80005ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f2:	079f      	lsls	r7, r3, #30
 80005f4:	f57f af43 	bpl.w	800047e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005f8:	f7ff fdd0 	bl	800019c <HAL_GetTick>
 80005fc:	1b80      	subs	r0, r0, r6
 80005fe:	2802      	cmp	r0, #2
 8000600:	d9f6      	bls.n	80005f0 <HAL_RCC_OscConfig+0x18c>
 8000602:	e771      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000604:	4c33      	ldr	r4, [pc, #204]	; (80006d4 <HAL_RCC_OscConfig+0x270>)
 8000606:	69e3      	ldr	r3, [r4, #28]
 8000608:	00d8      	lsls	r0, r3, #3
 800060a:	d424      	bmi.n	8000656 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800060c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	69e3      	ldr	r3, [r4, #28]
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61e3      	str	r3, [r4, #28]
 8000616:	69e3      	ldr	r3, [r4, #28]
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000620:	4e30      	ldr	r6, [pc, #192]	; (80006e4 <HAL_RCC_OscConfig+0x280>)
 8000622:	6833      	ldr	r3, [r6, #0]
 8000624:	05d9      	lsls	r1, r3, #23
 8000626:	d518      	bpl.n	800065a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000628:	68eb      	ldr	r3, [r5, #12]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d126      	bne.n	800067c <HAL_RCC_OscConfig+0x218>
 800062e:	6a23      	ldr	r3, [r4, #32]
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000636:	f7ff fdb1 	bl	800019c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800063a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800063e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000640:	6a23      	ldr	r3, [r4, #32]
 8000642:	079b      	lsls	r3, r3, #30
 8000644:	d53f      	bpl.n	80006c6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000646:	2f00      	cmp	r7, #0
 8000648:	f43f af1d 	beq.w	8000486 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800064c:	69e3      	ldr	r3, [r4, #28]
 800064e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000652:	61e3      	str	r3, [r4, #28]
 8000654:	e717      	b.n	8000486 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000656:	2700      	movs	r7, #0
 8000658:	e7e2      	b.n	8000620 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800065a:	6833      	ldr	r3, [r6, #0]
 800065c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000660:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000662:	f7ff fd9b 	bl	800019c <HAL_GetTick>
 8000666:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000668:	6833      	ldr	r3, [r6, #0]
 800066a:	05da      	lsls	r2, r3, #23
 800066c:	d4dc      	bmi.n	8000628 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800066e:	f7ff fd95 	bl	800019c <HAL_GetTick>
 8000672:	eba0 0008 	sub.w	r0, r0, r8
 8000676:	2864      	cmp	r0, #100	; 0x64
 8000678:	d9f6      	bls.n	8000668 <HAL_RCC_OscConfig+0x204>
 800067a:	e735      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800067c:	b9ab      	cbnz	r3, 80006aa <HAL_RCC_OscConfig+0x246>
 800067e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000680:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000684:	f023 0301 	bic.w	r3, r3, #1
 8000688:	6223      	str	r3, [r4, #32]
 800068a:	6a23      	ldr	r3, [r4, #32]
 800068c:	f023 0304 	bic.w	r3, r3, #4
 8000690:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000692:	f7ff fd83 	bl	800019c <HAL_GetTick>
 8000696:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000698:	6a23      	ldr	r3, [r4, #32]
 800069a:	0798      	lsls	r0, r3, #30
 800069c:	d5d3      	bpl.n	8000646 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800069e:	f7ff fd7d 	bl	800019c <HAL_GetTick>
 80006a2:	1b80      	subs	r0, r0, r6
 80006a4:	4540      	cmp	r0, r8
 80006a6:	d9f7      	bls.n	8000698 <HAL_RCC_OscConfig+0x234>
 80006a8:	e71e      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006aa:	2b05      	cmp	r3, #5
 80006ac:	6a23      	ldr	r3, [r4, #32]
 80006ae:	d103      	bne.n	80006b8 <HAL_RCC_OscConfig+0x254>
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6223      	str	r3, [r4, #32]
 80006b6:	e7ba      	b.n	800062e <HAL_RCC_OscConfig+0x1ca>
 80006b8:	f023 0301 	bic.w	r3, r3, #1
 80006bc:	6223      	str	r3, [r4, #32]
 80006be:	6a23      	ldr	r3, [r4, #32]
 80006c0:	f023 0304 	bic.w	r3, r3, #4
 80006c4:	e7b6      	b.n	8000634 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c6:	f7ff fd69 	bl	800019c <HAL_GetTick>
 80006ca:	eba0 0008 	sub.w	r0, r0, r8
 80006ce:	42b0      	cmp	r0, r6
 80006d0:	d9b6      	bls.n	8000640 <HAL_RCC_OscConfig+0x1dc>
 80006d2:	e709      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
 80006d4:	40021000 	.word	0x40021000
 80006d8:	42420000 	.word	0x42420000
 80006dc:	42420480 	.word	0x42420480
 80006e0:	20000008 	.word	0x20000008
 80006e4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006e8:	4c22      	ldr	r4, [pc, #136]	; (8000774 <HAL_RCC_OscConfig+0x310>)
 80006ea:	6863      	ldr	r3, [r4, #4]
 80006ec:	f003 030c 	and.w	r3, r3, #12
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	f43f aee2 	beq.w	80004ba <HAL_RCC_OscConfig+0x56>
 80006f6:	2300      	movs	r3, #0
 80006f8:	4e1f      	ldr	r6, [pc, #124]	; (8000778 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006fa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80006fc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006fe:	d12b      	bne.n	8000758 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000700:	f7ff fd4c 	bl	800019c <HAL_GetTick>
 8000704:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	0199      	lsls	r1, r3, #6
 800070a:	d41f      	bmi.n	800074c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800070c:	6a2b      	ldr	r3, [r5, #32]
 800070e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000712:	d105      	bne.n	8000720 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000714:	6862      	ldr	r2, [r4, #4]
 8000716:	68a9      	ldr	r1, [r5, #8]
 8000718:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800071c:	430a      	orrs	r2, r1
 800071e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000720:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000722:	6862      	ldr	r2, [r4, #4]
 8000724:	430b      	orrs	r3, r1
 8000726:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800072a:	4313      	orrs	r3, r2
 800072c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800072e:	2301      	movs	r3, #1
 8000730:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000732:	f7ff fd33 	bl	800019c <HAL_GetTick>
 8000736:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	019a      	lsls	r2, r3, #6
 800073c:	f53f aea7 	bmi.w	800048e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000740:	f7ff fd2c 	bl	800019c <HAL_GetTick>
 8000744:	1b40      	subs	r0, r0, r5
 8000746:	2802      	cmp	r0, #2
 8000748:	d9f6      	bls.n	8000738 <HAL_RCC_OscConfig+0x2d4>
 800074a:	e6cd      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800074c:	f7ff fd26 	bl	800019c <HAL_GetTick>
 8000750:	1bc0      	subs	r0, r0, r7
 8000752:	2802      	cmp	r0, #2
 8000754:	d9d7      	bls.n	8000706 <HAL_RCC_OscConfig+0x2a2>
 8000756:	e6c7      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000758:	f7ff fd20 	bl	800019c <HAL_GetTick>
 800075c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800075e:	6823      	ldr	r3, [r4, #0]
 8000760:	019b      	lsls	r3, r3, #6
 8000762:	f57f ae94 	bpl.w	800048e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000766:	f7ff fd19 	bl	800019c <HAL_GetTick>
 800076a:	1b40      	subs	r0, r0, r5
 800076c:	2802      	cmp	r0, #2
 800076e:	d9f6      	bls.n	800075e <HAL_RCC_OscConfig+0x2fa>
 8000770:	e6ba      	b.n	80004e8 <HAL_RCC_OscConfig+0x84>
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	42420060 	.word	0x42420060

0800077c <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800077c:	2201      	movs	r2, #1
 800077e:	4b01      	ldr	r3, [pc, #4]	; (8000784 <HAL_RCC_EnableCSS+0x8>)
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	4770      	bx	lr
 8000784:	4242004c 	.word	0x4242004c

08000788 <HAL_RCC_GetSysClockFreq>:
{
 8000788:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800078c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800078e:	ac02      	add	r4, sp, #8
 8000790:	f103 0510 	add.w	r5, r3, #16
 8000794:	4622      	mov	r2, r4
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	6859      	ldr	r1, [r3, #4]
 800079a:	3308      	adds	r3, #8
 800079c:	c203      	stmia	r2!, {r0, r1}
 800079e:	42ab      	cmp	r3, r5
 80007a0:	4614      	mov	r4, r2
 80007a2:	d1f7      	bne.n	8000794 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007a4:	2301      	movs	r3, #1
 80007a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007aa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007ac:	4911      	ldr	r1, [pc, #68]	; (80007f4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ae:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007b2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007b4:	f003 020c 	and.w	r2, r3, #12
 80007b8:	2a08      	cmp	r2, #8
 80007ba:	d117      	bne.n	80007ec <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007bc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007c0:	a806      	add	r0, sp, #24
 80007c2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007c4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007ca:	d50c      	bpl.n	80007e6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007cc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007ce:	480a      	ldr	r0, [pc, #40]	; (80007f8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007d0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007d4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007d6:	aa06      	add	r2, sp, #24
 80007d8:	4413      	add	r3, r2
 80007da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007de:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007e2:	b007      	add	sp, #28
 80007e4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <HAL_RCC_GetSysClockFreq+0x74>)
 80007e8:	4350      	muls	r0, r2
 80007ea:	e7fa      	b.n	80007e2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80007ee:	e7f8      	b.n	80007e2 <HAL_RCC_GetSysClockFreq+0x5a>
 80007f0:	080038bc 	.word	0x080038bc
 80007f4:	40021000 	.word	0x40021000
 80007f8:	007a1200 	.word	0x007a1200
 80007fc:	003d0900 	.word	0x003d0900

08000800 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000800:	4a4d      	ldr	r2, [pc, #308]	; (8000938 <HAL_RCC_ClockConfig+0x138>)
{
 8000802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000806:	6813      	ldr	r3, [r2, #0]
{
 8000808:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	428b      	cmp	r3, r1
{
 8000810:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000812:	d328      	bcc.n	8000866 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000814:	682a      	ldr	r2, [r5, #0]
 8000816:	0791      	lsls	r1, r2, #30
 8000818:	d432      	bmi.n	8000880 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800081a:	07d2      	lsls	r2, r2, #31
 800081c:	d438      	bmi.n	8000890 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800081e:	4a46      	ldr	r2, [pc, #280]	; (8000938 <HAL_RCC_ClockConfig+0x138>)
 8000820:	6813      	ldr	r3, [r2, #0]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	429e      	cmp	r6, r3
 8000828:	d373      	bcc.n	8000912 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800082a:	682a      	ldr	r2, [r5, #0]
 800082c:	4c43      	ldr	r4, [pc, #268]	; (800093c <HAL_RCC_ClockConfig+0x13c>)
 800082e:	f012 0f04 	tst.w	r2, #4
 8000832:	d179      	bne.n	8000928 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000834:	0713      	lsls	r3, r2, #28
 8000836:	d506      	bpl.n	8000846 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000838:	6863      	ldr	r3, [r4, #4]
 800083a:	692a      	ldr	r2, [r5, #16]
 800083c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000840:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000844:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000846:	f7ff ff9f 	bl	8000788 <HAL_RCC_GetSysClockFreq>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	4a3c      	ldr	r2, [pc, #240]	; (8000940 <HAL_RCC_ClockConfig+0x140>)
 800084e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000852:	5cd3      	ldrb	r3, [r2, r3]
 8000854:	40d8      	lsrs	r0, r3
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <HAL_RCC_ClockConfig+0x144>)
 8000858:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800085a:	2000      	movs	r0, #0
 800085c:	f001 fd40 	bl	80022e0 <HAL_InitTick>
  return HAL_OK;
 8000860:	2000      	movs	r0, #0
}
 8000862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000866:	6813      	ldr	r3, [r2, #0]
 8000868:	f023 0307 	bic.w	r3, r3, #7
 800086c:	430b      	orrs	r3, r1
 800086e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000870:	6813      	ldr	r3, [r2, #0]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	4299      	cmp	r1, r3
 8000878:	d0cc      	beq.n	8000814 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800087a:	2001      	movs	r0, #1
 800087c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000880:	492e      	ldr	r1, [pc, #184]	; (800093c <HAL_RCC_ClockConfig+0x13c>)
 8000882:	68a8      	ldr	r0, [r5, #8]
 8000884:	684b      	ldr	r3, [r1, #4]
 8000886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800088a:	4303      	orrs	r3, r0
 800088c:	604b      	str	r3, [r1, #4]
 800088e:	e7c4      	b.n	800081a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000890:	686a      	ldr	r2, [r5, #4]
 8000892:	4c2a      	ldr	r4, [pc, #168]	; (800093c <HAL_RCC_ClockConfig+0x13c>)
 8000894:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000896:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000898:	d11c      	bne.n	80008d4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800089e:	d0ec      	beq.n	800087a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008a0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008a2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008a6:	f023 0303 	bic.w	r3, r3, #3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008ae:	f7ff fc75 	bl	800019c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008b2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008b4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d114      	bne.n	80008e4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008ba:	6863      	ldr	r3, [r4, #4]
 80008bc:	f003 030c 	and.w	r3, r3, #12
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d0ac      	beq.n	800081e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008c4:	f7ff fc6a 	bl	800019c <HAL_GetTick>
 80008c8:	1bc0      	subs	r0, r0, r7
 80008ca:	4540      	cmp	r0, r8
 80008cc:	d9f5      	bls.n	80008ba <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80008ce:	2003      	movs	r0, #3
 80008d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008d4:	2a02      	cmp	r2, #2
 80008d6:	d102      	bne.n	80008de <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008dc:	e7df      	b.n	800089e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008de:	f013 0f02 	tst.w	r3, #2
 80008e2:	e7dc      	b.n	800089e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d10f      	bne.n	8000908 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008e8:	6863      	ldr	r3, [r4, #4]
 80008ea:	f003 030c 	and.w	r3, r3, #12
 80008ee:	2b08      	cmp	r3, #8
 80008f0:	d095      	beq.n	800081e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f2:	f7ff fc53 	bl	800019c <HAL_GetTick>
 80008f6:	1bc0      	subs	r0, r0, r7
 80008f8:	4540      	cmp	r0, r8
 80008fa:	d9f5      	bls.n	80008e8 <HAL_RCC_ClockConfig+0xe8>
 80008fc:	e7e7      	b.n	80008ce <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fe:	f7ff fc4d 	bl	800019c <HAL_GetTick>
 8000902:	1bc0      	subs	r0, r0, r7
 8000904:	4540      	cmp	r0, r8
 8000906:	d8e2      	bhi.n	80008ce <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000908:	6863      	ldr	r3, [r4, #4]
 800090a:	f013 0f0c 	tst.w	r3, #12
 800090e:	d1f6      	bne.n	80008fe <HAL_RCC_ClockConfig+0xfe>
 8000910:	e785      	b.n	800081e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000912:	6813      	ldr	r3, [r2, #0]
 8000914:	f023 0307 	bic.w	r3, r3, #7
 8000918:	4333      	orrs	r3, r6
 800091a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	429e      	cmp	r6, r3
 8000924:	d1a9      	bne.n	800087a <HAL_RCC_ClockConfig+0x7a>
 8000926:	e780      	b.n	800082a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	68e9      	ldr	r1, [r5, #12]
 800092c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000930:	430b      	orrs	r3, r1
 8000932:	6063      	str	r3, [r4, #4]
 8000934:	e77e      	b.n	8000834 <HAL_RCC_ClockConfig+0x34>
 8000936:	bf00      	nop
 8000938:	40022000 	.word	0x40022000
 800093c:	40021000 	.word	0x40021000
 8000940:	0800399b 	.word	0x0800399b
 8000944:	20000008 	.word	0x20000008

08000948 <HAL_RCC_GetHCLKFreq>:
}
 8000948:	4b01      	ldr	r3, [pc, #4]	; (8000950 <HAL_RCC_GetHCLKFreq+0x8>)
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008

08000954 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000962:	6810      	ldr	r0, [r2, #0]
}    
 8000964:	40d8      	lsrs	r0, r3
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	080039ab 	.word	0x080039ab
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	4a03      	ldr	r2, [pc, #12]	; (8000990 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000982:	6810      	ldr	r0, [r2, #0]
} 
 8000984:	40d8      	lsrs	r0, r3
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000
 800098c:	080039ab 	.word	0x080039ab
 8000990:	20000008 	.word	0x20000008

08000994 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000994:	230f      	movs	r3, #15
 8000996:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_RCC_GetClockConfig+0x34>)
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	f002 0203 	and.w	r2, r2, #3
 80009a0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80009a8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80009b0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009ba:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_RCC_GetClockConfig+0x38>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	600b      	str	r3, [r1, #0]
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_RCC_NMI_IRQHandler>:
{
 80009d4:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_RCC_NMI_IRQHandler+0x18>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	061b      	lsls	r3, r3, #24
 80009dc:	d504      	bpl.n	80009e8 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 80009de:	f7ff fff7 	bl	80009d0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	bd08      	pop	{r3, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	4002100a 	.word	0x4002100a

080009f4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009f4:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 80009f6:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	f042 0201 	orr.w	r2, r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	4770      	bx	lr

08000a0a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000a0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000a0e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	f04f 0302 	mov.w	r3, #2
 8000a16:	d01c      	beq.n	8000a52 <HAL_TIM_ConfigClockSource+0x48>
 8000a18:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000a1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000a1e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000a24:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a26:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a2a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000a30:	680a      	ldr	r2, [r1, #0]
 8000a32:	2a40      	cmp	r2, #64	; 0x40
 8000a34:	d079      	beq.n	8000b2a <HAL_TIM_ConfigClockSource+0x120>
 8000a36:	d819      	bhi.n	8000a6c <HAL_TIM_ConfigClockSource+0x62>
 8000a38:	2a10      	cmp	r2, #16
 8000a3a:	f000 8093 	beq.w	8000b64 <HAL_TIM_ConfigClockSource+0x15a>
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_TIM_ConfigClockSource+0x4c>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	f000 8089 	beq.w	8000b58 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000a46:	2301      	movs	r3, #1
 8000a48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000a52:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000a56:	2a20      	cmp	r2, #32
 8000a58:	f000 808a 	beq.w	8000b70 <HAL_TIM_ConfigClockSource+0x166>
 8000a5c:	2a30      	cmp	r2, #48	; 0x30
 8000a5e:	d1f2      	bne.n	8000a46 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000a60:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000a62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000a66:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000a6a:	e036      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000a6c:	2a70      	cmp	r2, #112	; 0x70
 8000a6e:	d036      	beq.n	8000ade <HAL_TIM_ConfigClockSource+0xd4>
 8000a70:	d81b      	bhi.n	8000aaa <HAL_TIM_ConfigClockSource+0xa0>
 8000a72:	2a50      	cmp	r2, #80	; 0x50
 8000a74:	d042      	beq.n	8000afc <HAL_TIM_ConfigClockSource+0xf2>
 8000a76:	2a60      	cmp	r2, #96	; 0x60
 8000a78:	d1e5      	bne.n	8000a46 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a7a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a7c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a7e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000a82:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000a84:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a86:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000a88:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000a8a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000a8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000a92:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000a96:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000a9a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000a9c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000a9e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000aa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000aa4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000aa8:	e017      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000aaa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000aae:	d011      	beq.n	8000ad4 <HAL_TIM_ConfigClockSource+0xca>
 8000ab0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ab4:	d1c7      	bne.n	8000a46 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ab6:	688a      	ldr	r2, [r1, #8]
 8000ab8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000aba:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000abc:	68c9      	ldr	r1, [r1, #12]
 8000abe:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ac0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ac4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ac8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000aca:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ad2:	e002      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	e7b3      	b.n	8000a46 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ade:	688a      	ldr	r2, [r1, #8]
 8000ae0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000ae2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ae4:	68c9      	ldr	r1, [r1, #12]
 8000ae6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ae8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000aec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000af0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000af2:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000af4:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000af6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000afa:	e7ee      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000afc:	684c      	ldr	r4, [r1, #4]
 8000afe:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b00:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b02:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b04:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b08:	f025 0501 	bic.w	r5, r5, #1
 8000b0c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b0e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b10:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b16:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b1c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b1e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b24:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b28:	e7d7      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b2a:	684c      	ldr	r4, [r1, #4]
 8000b2c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b2e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b30:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b32:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b36:	f025 0501 	bic.w	r5, r5, #1
 8000b3a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b3c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b3e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b40:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b44:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b4a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b4c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b52:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000b56:	e7c0      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b58:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b5e:	f042 0207 	orr.w	r2, r2, #7
 8000b62:	e7ba      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b64:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b6a:	f042 0217 	orr.w	r2, r2, #23
 8000b6e:	e7b4      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b70:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b76:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000b7a:	e7ae      	b.n	8000ada <HAL_TIM_ConfigClockSource+0xd0>

08000b7c <HAL_TIM_OC_DelayElapsedCallback>:
 8000b7c:	4770      	bx	lr

08000b7e <HAL_TIM_IC_CaptureCallback>:
 8000b7e:	4770      	bx	lr

08000b80 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000b80:	4770      	bx	lr

08000b82 <HAL_TIM_TriggerCallback>:
 8000b82:	4770      	bx	lr

08000b84 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b84:	6803      	ldr	r3, [r0, #0]
{
 8000b86:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b88:	691a      	ldr	r2, [r3, #16]
{
 8000b8a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000b8c:	0791      	lsls	r1, r2, #30
 8000b8e:	d50e      	bpl.n	8000bae <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	0792      	lsls	r2, r2, #30
 8000b94:	d50b      	bpl.n	8000bae <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000b96:	f06f 0202 	mvn.w	r2, #2
 8000b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000b9c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000b9e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ba0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ba2:	079b      	lsls	r3, r3, #30
 8000ba4:	d077      	beq.n	8000c96 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000ba6:	f7ff ffea 	bl	8000b7e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000baa:	2300      	movs	r3, #0
 8000bac:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	691a      	ldr	r2, [r3, #16]
 8000bb2:	0750      	lsls	r0, r2, #29
 8000bb4:	d510      	bpl.n	8000bd8 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	0751      	lsls	r1, r2, #29
 8000bba:	d50d      	bpl.n	8000bd8 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000bbc:	f06f 0204 	mvn.w	r2, #4
 8000bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bc2:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bc4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000bc6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bc8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000bcc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000bce:	d068      	beq.n	8000ca2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bd0:	f7ff ffd5 	bl	8000b7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	0712      	lsls	r2, r2, #28
 8000bde:	d50f      	bpl.n	8000c00 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	0710      	lsls	r0, r2, #28
 8000be4:	d50c      	bpl.n	8000c00 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000be6:	f06f 0208 	mvn.w	r2, #8
 8000bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bec:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000bf0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bf2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000bf6:	d05a      	beq.n	8000cae <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000bf8:	f7ff ffc1 	bl	8000b7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	06d2      	lsls	r2, r2, #27
 8000c06:	d510      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	06d0      	lsls	r0, r2, #27
 8000c0c:	d50d      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000c0e:	f06f 0210 	mvn.w	r2, #16
 8000c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c14:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c16:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c18:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c1a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000c1e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c20:	d04b      	beq.n	8000cba <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c22:	f7ff ffac 	bl	8000b7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c26:	2300      	movs	r3, #0
 8000c28:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	07d1      	lsls	r1, r2, #31
 8000c30:	d508      	bpl.n	8000c44 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	07d2      	lsls	r2, r2, #31
 8000c36:	d505      	bpl.n	8000c44 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c38:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c3c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000c3e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c40:	f001 fae4 	bl	800220c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	0610      	lsls	r0, r2, #24
 8000c4a:	d508      	bpl.n	8000c5e <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	0611      	lsls	r1, r2, #24
 8000c50:	d505      	bpl.n	8000c5e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c52:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000c56:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000c58:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000c5a:	f000 f8aa 	bl	8000db2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	0652      	lsls	r2, r2, #25
 8000c64:	d508      	bpl.n	8000c78 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	0650      	lsls	r0, r2, #25
 8000c6a:	d505      	bpl.n	8000c78 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000c70:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000c72:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000c74:	f7ff ff85 	bl	8000b82 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	0691      	lsls	r1, r2, #26
 8000c7e:	d522      	bpl.n	8000cc6 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	0692      	lsls	r2, r2, #26
 8000c84:	d51f      	bpl.n	8000cc6 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c86:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000c8a:	4620      	mov	r0, r4
}
 8000c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000c90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000c92:	f000 b88d 	b.w	8000db0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000c96:	f7ff ff71 	bl	8000b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f7ff ff70 	bl	8000b80 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ca0:	e783      	b.n	8000baa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ca2:	f7ff ff6b 	bl	8000b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff ff6a 	bl	8000b80 <HAL_TIM_PWM_PulseFinishedCallback>
 8000cac:	e792      	b.n	8000bd4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cae:	f7ff ff65 	bl	8000b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f7ff ff64 	bl	8000b80 <HAL_TIM_PWM_PulseFinishedCallback>
 8000cb8:	e7a0      	b.n	8000bfc <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cba:	f7ff ff5f 	bl	8000b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f7ff ff5e 	bl	8000b80 <HAL_TIM_PWM_PulseFinishedCallback>
 8000cc4:	e7af      	b.n	8000c26 <HAL_TIM_IRQHandler+0xa2>
 8000cc6:	bd10      	pop	{r4, pc}

08000cc8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000cca:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d00a      	beq.n	8000ce6 <TIM_Base_SetConfig+0x1e>
 8000cd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cd4:	d007      	beq.n	8000ce6 <TIM_Base_SetConfig+0x1e>
 8000cd6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	d003      	beq.n	8000ce6 <TIM_Base_SetConfig+0x1e>
 8000cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d115      	bne.n	8000d12 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000ce6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000cec:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <TIM_Base_SetConfig+0x6c>)
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d00a      	beq.n	8000d0a <TIM_Base_SetConfig+0x42>
 8000cf4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000cf8:	d007      	beq.n	8000d0a <TIM_Base_SetConfig+0x42>
 8000cfa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	d003      	beq.n	8000d0a <TIM_Base_SetConfig+0x42>
 8000d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d103      	bne.n	8000d12 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d0a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d10:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d12:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d18:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000d1a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d1c:	688b      	ldr	r3, [r1, #8]
 8000d1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d20:	680b      	ldr	r3, [r1, #0]
 8000d22:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <TIM_Base_SetConfig+0x6c>)
 8000d26:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000d28:	bf04      	itt	eq
 8000d2a:	690b      	ldreq	r3, [r1, #16]
 8000d2c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	6143      	str	r3, [r0, #20]
 8000d32:	4770      	bx	lr
 8000d34:	40012c00 	.word	0x40012c00

08000d38 <HAL_TIM_Base_Init>:
{
 8000d38:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	b1a0      	cbz	r0, 8000d68 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d46:	b91b      	cbnz	r3, 8000d50 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d4c:	f001 fb76 	bl	800243c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d50:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d52:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000d54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d58:	1d21      	adds	r1, r4, #4
 8000d5a:	f7ff ffb5 	bl	8000cc8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000d5e:	2301      	movs	r3, #1
  return HAL_OK;
 8000d60:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000d62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
}
 8000d6a:	bd10      	pop	{r4, pc}

08000d6c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000d6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000d70:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	f04f 0302 	mov.w	r3, #2
 8000d78:	d018      	beq.n	8000dac <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000d7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d7e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d80:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d82:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d84:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000d86:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d8a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	4322      	orrs	r2, r4
 8000d90:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d98:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000da6:	2300      	movs	r3, #0
 8000da8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000dac:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000dae:	bd10      	pop	{r4, pc}

08000db0 <HAL_TIMEx_CommutationCallback>:
 8000db0:	4770      	bx	lr

08000db2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000db2:	4770      	bx	lr

08000db4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000db8:	6805      	ldr	r5, [r0, #0]
 8000dba:	68c2      	ldr	r2, [r0, #12]
 8000dbc:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dbe:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dc8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000dca:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000dd0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000dd4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000dd8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000dde:	696b      	ldr	r3, [r5, #20]
 8000de0:	6982      	ldr	r2, [r0, #24]
 8000de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000de6:	4313      	orrs	r3, r2
 8000de8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <UART_SetConfig+0x138>)
{
 8000dec:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000dee:	429d      	cmp	r5, r3
 8000df0:	f04f 0419 	mov.w	r4, #25
 8000df4:	d146      	bne.n	8000e84 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000df6:	f7ff fdbd 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000dfa:	fb04 f300 	mul.w	r3, r4, r0
 8000dfe:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e02:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e06:	00b6      	lsls	r6, r6, #2
 8000e08:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e0c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e10:	011e      	lsls	r6, r3, #4
 8000e12:	f7ff fdaf 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000e16:	4360      	muls	r0, r4
 8000e18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e22:	f7ff fda7 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000e26:	4360      	muls	r0, r4
 8000e28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e32:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e36:	fb08 7313 	mls	r3, r8, r3, r7
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	3332      	adds	r3, #50	; 0x32
 8000e3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e42:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000e46:	f7ff fd95 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
 8000e4a:	4360      	muls	r0, r4
 8000e4c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	fbb0 faf2 	udiv	sl, r0, r2
 8000e56:	f7ff fd8d 	bl	8000974 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e5a:	4360      	muls	r0, r4
 8000e5c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e66:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e6a:	fb08 a313 	mls	r3, r8, r3, sl
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	3332      	adds	r3, #50	; 0x32
 8000e72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	433b      	orrs	r3, r7
 8000e7c:	4433      	add	r3, r6
 8000e7e:	60ab      	str	r3, [r5, #8]
 8000e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e84:	f7ff fd66 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000e88:	fb04 f300 	mul.w	r3, r4, r0
 8000e8c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000e90:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e94:	00b6      	lsls	r6, r6, #2
 8000e96:	fbb3 f3f6 	udiv	r3, r3, r6
 8000e9a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e9e:	011e      	lsls	r6, r3, #4
 8000ea0:	f7ff fd58 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000ea4:	4360      	muls	r0, r4
 8000ea6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fbb0 f7f3 	udiv	r7, r0, r3
 8000eb0:	f7ff fd50 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000eb4:	4360      	muls	r0, r4
 8000eb6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ec0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ec4:	fb08 7313 	mls	r3, r8, r3, r7
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	3332      	adds	r3, #50	; 0x32
 8000ecc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ed0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000ed4:	f7ff fd3e 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000ed8:	4360      	muls	r0, r4
 8000eda:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	fbb0 faf2 	udiv	sl, r0, r2
 8000ee4:	f7ff fd36 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
 8000ee8:	e7b7      	b.n	8000e5a <UART_SetConfig+0xa6>
 8000eea:	bf00      	nop
 8000eec:	40013800 	.word	0x40013800

08000ef0 <HAL_UART_Init>:
{
 8000ef0:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	b340      	cbz	r0, 8000f48 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000ef6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000efa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000efe:	b91b      	cbnz	r3, 8000f08 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f00:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f04:	f001 fad8 	bl	80024b8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f08:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f10:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f12:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f18:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f1a:	f7ff ff4b 	bl	8000db4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f1e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f20:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f30:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f38:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000f3a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f3c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f3e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f42:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000f46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
}
 8000f4a:	bd10      	pop	{r4, pc}

08000f4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000f4c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000f4e:	f000 fcb3 	bl	80018b8 <vTaskStartScheduler>
  
  return osOK;
}
 8000f52:	2000      	movs	r0, #0
 8000f54:	bd08      	pop	{r3, pc}

08000f56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f56:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f58:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8000f5c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000f5e:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f60:	bf08      	it	eq
 8000f62:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f64:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8000f66:	bf18      	it	ne
 8000f68:	3403      	addne	r4, #3
{
 8000f6a:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f6c:	e890 0022 	ldmia.w	r0, {r1, r5}
 8000f70:	a803      	add	r0, sp, #12
 8000f72:	9001      	str	r0, [sp, #4]
 8000f74:	9400      	str	r4, [sp, #0]
 8000f76:	4628      	mov	r0, r5
 8000f78:	f000 fb94 	bl	80016a4 <xTaskCreate>
 8000f7c:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8000f7e:	bf14      	ite	ne
 8000f80:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8000f82:	9803      	ldreq	r0, [sp, #12]
}
 8000f84:	b005      	add	sp, #20
 8000f86:	bd30      	pop	{r4, r5, pc}

08000f88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000f88:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	bf08      	it	eq
 8000f8e:	2001      	moveq	r0, #1
 8000f90:	f000 fdfa 	bl	8001b88 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000f94:	2000      	movs	r0, #0
 8000f96:	bd08      	pop	{r3, pc}

08000f98 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000f98:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f9a:	f000 ff8b 	bl	8001eb4 <xTaskGetSchedulerState>
 8000f9e:	2801      	cmp	r0, #1
 8000fa0:	d003      	beq.n	8000faa <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8000fa6:	f000 b8ed 	b.w	8001184 <xPortSysTickHandler>
 8000faa:	bd08      	pop	{r3, pc}

08000fac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fac:	f100 0308 	add.w	r3, r0, #8
 8000fb0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000fb2:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fb6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fb8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fba:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000fbc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fbe:	6003      	str	r3, [r0, #0]
 8000fc0:	4770      	bx	lr

08000fc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	6103      	str	r3, [r0, #16]
 8000fc6:	4770      	bx	lr

08000fc8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000fc8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fca:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8000fcc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000fd4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000fd6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fd8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000fda:	3301      	adds	r3, #1
 8000fdc:	6003      	str	r3, [r0, #0]
 8000fde:	4770      	bx	lr

08000fe0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fe0:	680a      	ldr	r2, [r1, #0]
{
 8000fe2:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000fe4:	1c53      	adds	r3, r2, #1
 8000fe6:	d10a      	bne.n	8000ffe <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000fe8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000fee:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ff0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000ff2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000ff4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000ff6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	6003      	str	r3, [r0, #0]
 8000ffc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ffe:	f100 0308 	add.w	r3, r0, #8
 8001002:	685c      	ldr	r4, [r3, #4]
 8001004:	6825      	ldr	r5, [r4, #0]
 8001006:	42aa      	cmp	r2, r5
 8001008:	d3ef      	bcc.n	8000fea <vListInsert+0xa>
 800100a:	4623      	mov	r3, r4
 800100c:	e7f9      	b.n	8001002 <vListInsert+0x22>

0800100e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800100e:	6841      	ldr	r1, [r0, #4]
 8001010:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001012:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001014:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001016:	6882      	ldr	r2, [r0, #8]
 8001018:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800101a:	6859      	ldr	r1, [r3, #4]
 800101c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800101e:	bf08      	it	eq
 8001020:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001022:	2200      	movs	r2, #0
 8001024:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	3801      	subs	r0, #1
 800102a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800102c:	4770      	bx	lr
	...

08001030 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <prvTaskExitError+0x2c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	d008      	beq.n	800104a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103c:	f383 8811 	msr	BASEPRI, r3
 8001040:	f3bf 8f6f 	isb	sy
 8001044:	f3bf 8f4f 	dsb	sy
 8001048:	e7fe      	b.n	8001048 <prvTaskExitError+0x18>
 800104a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800104e:	f383 8811 	msr	BASEPRI, r3
 8001052:	f3bf 8f6f 	isb	sy
 8001056:	f3bf 8f4f 	dsb	sy
 800105a:	e7fe      	b.n	800105a <prvTaskExitError+0x2a>
 800105c:	20000004 	.word	0x20000004

08001060 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <prvPortStartFirstTask+0x1c>)
 8001062:	6800      	ldr	r0, [r0, #0]
 8001064:	6800      	ldr	r0, [r0, #0]
 8001066:	f380 8808 	msr	MSP, r0
 800106a:	b662      	cpsie	i
 800106c:	b661      	cpsie	f
 800106e:	f3bf 8f4f 	dsb	sy
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	df00      	svc	0
 8001078:	bf00      	nop
 800107a:	0000      	.short	0x0000
 800107c:	e000ed08 	.word	0xe000ed08

08001080 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001084:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800108a:	f021 0101 	bic.w	r1, r1, #1
 800108e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001092:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001096:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800109a:	3840      	subs	r0, #64	; 0x40
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	08001031 	.word	0x08001031
	...

080010b0 <SVC_Handler>:
	__asm volatile (
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <pxCurrentTCBConst2>)
 80010b2:	6819      	ldr	r1, [r3, #0]
 80010b4:	6808      	ldr	r0, [r1, #0]
 80010b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010ba:	f380 8809 	msr	PSP, r0
 80010be:	f3bf 8f6f 	isb	sy
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	f380 8811 	msr	BASEPRI, r0
 80010ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80010ce:	4770      	bx	lr

080010d0 <pxCurrentTCBConst2>:
 80010d0:	200010b8 	.word	0x200010b8

080010d4 <vPortEnterCritical>:
 80010d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <vPortEnterCritical+0x3c>)
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80010ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80010ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80010ee:	d10d      	bne.n	800110c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <vPortEnterCritical+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80010f8:	d008      	beq.n	800110c <vPortEnterCritical+0x38>
 80010fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fe:	f383 8811 	msr	BASEPRI, r3
 8001102:	f3bf 8f6f 	isb	sy
 8001106:	f3bf 8f4f 	dsb	sy
 800110a:	e7fe      	b.n	800110a <vPortEnterCritical+0x36>
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000004 	.word	0x20000004
 8001114:	e000ed04 	.word	0xe000ed04

08001118 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <vPortExitCritical+0x24>)
 800111a:	6813      	ldr	r3, [r2, #0]
 800111c:	b943      	cbnz	r3, 8001130 <vPortExitCritical+0x18>
 800111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001122:	f383 8811 	msr	BASEPRI, r3
 8001126:	f3bf 8f6f 	isb	sy
 800112a:	f3bf 8f4f 	dsb	sy
 800112e:	e7fe      	b.n	800112e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001130:	3b01      	subs	r3, #1
 8001132:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001134:	b90b      	cbnz	r3, 800113a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001136:	f383 8811 	msr	BASEPRI, r3
 800113a:	4770      	bx	lr
 800113c:	20000004 	.word	0x20000004

08001140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001140:	f3ef 8009 	mrs	r0, PSP
 8001144:	f3bf 8f6f 	isb	sy
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <pxCurrentTCBConst>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001150:	6010      	str	r0, [r2, #0]
 8001152:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001156:	f04f 0050 	mov.w	r0, #80	; 0x50
 800115a:	f380 8811 	msr	BASEPRI, r0
 800115e:	f000 fd83 	bl	8001c68 <vTaskSwitchContext>
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	f380 8811 	msr	BASEPRI, r0
 800116a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	6808      	ldr	r0, [r1, #0]
 8001172:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001176:	f380 8809 	msr	PSP, r0
 800117a:	f3bf 8f6f 	isb	sy
 800117e:	4770      	bx	lr

08001180 <pxCurrentTCBConst>:
 8001180:	200010b8 	.word	0x200010b8

08001184 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001184:	b508      	push	{r3, lr}
	__asm volatile
 8001186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001196:	f000 fbed 	bl	8001974 <xTaskIncrementTick>
 800119a:	b118      	cbz	r0, 80011a4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800119c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <xPortSysTickHandler+0x28>)
 80011a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80011a4:	2300      	movs	r3, #0
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	bd08      	pop	{r3, pc}
 80011ac:	e000ed04 	.word	0xe000ed04

080011b0 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if configUSE_TICKLESS_IDLE == 1

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80011b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <vPortSuppressTicksAndSleep+0x100>)

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80011b4:	4a3f      	ldr	r2, [pc, #252]	; (80012b4 <vPortSuppressTicksAndSleep+0x104>)
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80011b6:	681b      	ldr	r3, [r3, #0]
	{
 80011b8:	9001      	str	r0, [sp, #4]
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80011ba:	4298      	cmp	r0, r3
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80011bc:	bf88      	it	hi
 80011be:	9301      	strhi	r3, [sp, #4]
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80011c0:	6813      	ldr	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80011c2:	4d3d      	ldr	r5, [pc, #244]	; (80012b8 <vPortSuppressTicksAndSleep+0x108>)
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	6013      	str	r3, [r2, #0]
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <vPortSuppressTicksAndSleep+0x10c>)
 80011cc:	682a      	ldr	r2, [r5, #0]
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	9b01      	ldr	r3, [sp, #4]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80011d2:	4e3b      	ldr	r6, [pc, #236]	; (80012c0 <vPortSuppressTicksAndSleep+0x110>)
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80011d4:	3b01      	subs	r3, #1
 80011d6:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 80011da:	6833      	ldr	r3, [r6, #0]
 80011dc:	429c      	cmp	r4, r3
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80011de:	bf88      	it	hi
 80011e0:	1ae4      	subhi	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" );
 80011e2:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80011e4:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80011e8:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80011ec:	f000 fd86 	bl	8001cfc <eTaskConfirmSleepModeStatus>
 80011f0:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <vPortSuppressTicksAndSleep+0x104>)
 80011f2:	4932      	ldr	r1, [pc, #200]	; (80012bc <vPortSuppressTicksAndSleep+0x10c>)
 80011f4:	4a33      	ldr	r2, [pc, #204]	; (80012c4 <vPortSuppressTicksAndSleep+0x114>)
 80011f6:	b958      	cbnz	r0, 8001210 <vPortSuppressTicksAndSleep+0x60>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80011f8:	6809      	ldr	r1, [r1, #0]
 80011fa:	6011      	str	r1, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	f041 0101 	orr.w	r1, r1, #1
 8001202:	6019      	str	r1, [r3, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	3b01      	subs	r3, #1
 8001208:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" );
 800120a:	b662      	cpsie	i
				vTaskStepTick( ulCompleteTickPeriods );
				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
			}
			portEXIT_CRITICAL();
		}
	}
 800120c:	b004      	add	sp, #16
 800120e:	bd70      	pop	{r4, r5, r6, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8001210:	6014      	str	r4, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001212:	2200      	movs	r2, #0
 8001214:	600a      	str	r2, [r1, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8001216:	681a      	ldr	r2, [r3, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8001218:	a804      	add	r0, sp, #16
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8001220:	9b01      	ldr	r3, [sp, #4]
 8001222:	f840 3d04 	str.w	r3, [r0, #-4]!
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8001226:	f000 ff43 	bl	80020b0 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800122a:	9b03      	ldr	r3, [sp, #12]
 800122c:	b123      	cbz	r3, 8001238 <vPortSuppressTicksAndSleep+0x88>
				__asm volatile( "dsb" );
 800122e:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8001232:	bf30      	wfi
				__asm volatile( "isb" );
 8001234:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8001238:	a801      	add	r0, sp, #4
 800123a:	f000 ff3a 	bl	80020b2 <PostSleepProcessing>
			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 800123e:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <vPortSuppressTicksAndSleep+0x104>)
 8001240:	6813      	ldr	r3, [r2, #0]
			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 8001242:	f023 0101 	bic.w	r1, r3, #1
 8001246:	6011      	str	r1, [r2, #0]
			__asm volatile( "cpsie i" );
 8001248:	b662      	cpsie	i
			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800124a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800124e:	491b      	ldr	r1, [pc, #108]	; (80012bc <vPortSuppressTicksAndSleep+0x10c>)
 8001250:	d021      	beq.n	8001296 <vPortSuppressTicksAndSleep+0xe6>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8001252:	680b      	ldr	r3, [r1, #0]
 8001254:	682a      	ldr	r2, [r5, #0]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8001256:	6831      	ldr	r1, [r6, #0]
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8001258:	4413      	add	r3, r2
 800125a:	3b01      	subs	r3, #1
 800125c:	1b1b      	subs	r3, r3, r4
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800125e:	428b      	cmp	r3, r1
 8001260:	d301      	bcc.n	8001266 <vPortSuppressTicksAndSleep+0xb6>
 8001262:	429a      	cmp	r2, r3
 8001264:	d200      	bcs.n	8001268 <vPortSuppressTicksAndSleep+0xb8>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8001266:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <vPortSuppressTicksAndSleep+0x114>)
 800126a:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800126c:	9801      	ldr	r0, [sp, #4]
 800126e:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001270:	2200      	movs	r2, #0
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <vPortSuppressTicksAndSleep+0x10c>)
 8001274:	601a      	str	r2, [r3, #0]
			portENTER_CRITICAL();
 8001276:	f7ff ff2d 	bl	80010d4 <vPortEnterCritical>
				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <vPortSuppressTicksAndSleep+0x104>)
 800127c:	6813      	ldr	r3, [r2, #0]
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6013      	str	r3, [r2, #0]
				vTaskStepTick( ulCompleteTickPeriods );
 8001284:	f000 fb5e 	bl	8001944 <vTaskStepTick>
				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <vPortSuppressTicksAndSleep+0x114>)
 800128c:	3b01      	subs	r3, #1
 800128e:	6013      	str	r3, [r2, #0]
			portEXIT_CRITICAL();
 8001290:	f7ff ff42 	bl	8001118 <vPortExitCritical>
	}
 8001294:	e7ba      	b.n	800120c <vPortSuppressTicksAndSleep+0x5c>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8001296:	682b      	ldr	r3, [r5, #0]
 8001298:	9a01      	ldr	r2, [sp, #4]
 800129a:	6809      	ldr	r1, [r1, #0]
 800129c:	435a      	muls	r2, r3
 800129e:	1a52      	subs	r2, r2, r1
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80012a0:	fbb2 f0f3 	udiv	r0, r2, r3
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80012a4:	fb00 3303 	mla	r3, r0, r3, r3
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <vPortSuppressTicksAndSleep+0x114>)
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e7df      	b.n	8001270 <vPortSuppressTicksAndSleep+0xc0>
 80012b0:	2000009c 	.word	0x2000009c
 80012b4:	e000e010 	.word	0xe000e010
 80012b8:	20000098 	.word	0x20000098
 80012bc:	e000e018 	.word	0xe000e018
 80012c0:	20000094 	.word	0x20000094
 80012c4:	e000e014 	.word	0xe000e014

080012c8 <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <vPortSetupTimerInterrupt+0x38>)
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <vPortSetupTimerInterrupt+0x3c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	600b      	str	r3, [r1, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80012d8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80012dc:	fbb1 f1f3 	udiv	r1, r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <vPortSetupTimerInterrupt+0x40>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80012e2:	fbb2 f2f2 	udiv	r2, r2, r2
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80012e6:	6001      	str	r1, [r0, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80012e8:	212d      	movs	r1, #45	; 0x2d
 80012ea:	fbb1 f2f2 	udiv	r2, r1, r2
 80012ee:	4907      	ldr	r1, [pc, #28]	; (800130c <vPortSetupTimerInterrupt+0x44>)
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012f0:	3b01      	subs	r3, #1
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80012f2:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <vPortSetupTimerInterrupt+0x48>)
 80012f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80012f8:	2207      	movs	r2, #7
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <vPortSetupTimerInterrupt+0x4c>)
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	4770      	bx	lr
 8001300:	20000008 	.word	0x20000008
 8001304:	20000098 	.word	0x20000098
 8001308:	2000009c 	.word	0x2000009c
 800130c:	20000094 	.word	0x20000094
 8001310:	e000e014 	.word	0xe000e014
 8001314:	e000e010 	.word	0xe000e010

08001318 <xPortStartScheduler>:
{
 8001318:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800131c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001328:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001332:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001336:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800133a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800133c:	2207      	movs	r2, #7
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <xPortStartScheduler+0x88>)
 8001340:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001342:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001346:	1e54      	subs	r4, r2, #1
 8001348:	0600      	lsls	r0, r0, #24
 800134a:	d41c      	bmi.n	8001386 <xPortStartScheduler+0x6e>
 800134c:	b101      	cbz	r1, 8001350 <xPortStartScheduler+0x38>
 800134e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001354:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001358:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800135a:	9b01      	ldr	r3, [sp, #4]
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <xPortStartScheduler+0x80>)
 800135e:	b2db      	uxtb	r3, r3
 8001360:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <xPortStartScheduler+0x8c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800136a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001372:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001374:	f7ff ffa8 	bl	80012c8 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001378:	2200      	movs	r2, #0
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <xPortStartScheduler+0x90>)
 800137c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 800137e:	f7ff fe6f 	bl	8001060 <prvPortStartFirstTask>
	prvTaskExitError();
 8001382:	f7ff fe55 	bl	8001030 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001386:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800138a:	2101      	movs	r1, #1
 800138c:	0052      	lsls	r2, r2, #1
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f88d 2003 	strb.w	r2, [sp, #3]
 8001394:	4622      	mov	r2, r4
 8001396:	e7d4      	b.n	8001342 <xPortStartScheduler+0x2a>
 8001398:	e000e400 	.word	0xe000e400
 800139c:	2000008c 	.word	0x2000008c
 80013a0:	20000090 	.word	0x20000090
 80013a4:	e000ed20 	.word	0xe000ed20
 80013a8:	20000004 	.word	0x20000004

080013ac <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013ac:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <prvInsertBlockIntoFreeList+0x40>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4282      	cmp	r2, r0
 80013b4:	d318      	bcc.n	80013e8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013b6:	685c      	ldr	r4, [r3, #4]
 80013b8:	1919      	adds	r1, r3, r4
 80013ba:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013bc:	bf01      	itttt	eq
 80013be:	6841      	ldreq	r1, [r0, #4]
 80013c0:	4618      	moveq	r0, r3
 80013c2:	1909      	addeq	r1, r1, r4
 80013c4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013c6:	6844      	ldr	r4, [r0, #4]
 80013c8:	1901      	adds	r1, r0, r4
 80013ca:	428a      	cmp	r2, r1
 80013cc:	d107      	bne.n	80013de <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <prvInsertBlockIntoFreeList+0x44>)
 80013d0:	6809      	ldr	r1, [r1, #0]
 80013d2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013d4:	bf1f      	itttt	ne
 80013d6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013d8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013da:	1909      	addne	r1, r1, r4
 80013dc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013de:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013e0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80013e2:	bf18      	it	ne
 80013e4:	6018      	strne	r0, [r3, #0]
 80013e6:	bd10      	pop	{r4, pc}
 80013e8:	4613      	mov	r3, r2
 80013ea:	e7e1      	b.n	80013b0 <prvInsertBlockIntoFreeList+0x4>
 80013ec:	200010b0 	.word	0x200010b0
 80013f0:	200000a0 	.word	0x200000a0

080013f4 <pvPortMalloc>:
{
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80013fa:	f000 fa9b 	bl	8001934 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80013fe:	493e      	ldr	r1, [pc, #248]	; (80014f8 <pvPortMalloc+0x104>)
 8001400:	4d3e      	ldr	r5, [pc, #248]	; (80014fc <pvPortMalloc+0x108>)
 8001402:	680b      	ldr	r3, [r1, #0]
 8001404:	bb0b      	cbnz	r3, 800144a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001406:	4a3e      	ldr	r2, [pc, #248]	; (8001500 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001408:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800140a:	bf1d      	ittte	ne
 800140c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800140e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001412:	f502 5380 	addne.w	r3, r2, #4096	; 0x1000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001416:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800141a:	bf1c      	itt	ne
 800141c:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800141e:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001420:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001422:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001424:	4e37      	ldr	r6, [pc, #220]	; (8001504 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001426:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001428:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800142c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800142e:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001430:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001432:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001434:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001436:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001438:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800143a:	4b33      	ldr	r3, [pc, #204]	; (8001508 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800143c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800143e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <pvPortMalloc+0x118>)
 8001442:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001448:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800144a:	682f      	ldr	r7, [r5, #0]
 800144c:	4227      	tst	r7, r4
 800144e:	d116      	bne.n	800147e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001450:	2c00      	cmp	r4, #0
 8001452:	d040      	beq.n	80014d6 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8001454:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001458:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800145a:	bf1c      	itt	ne
 800145c:	f023 0307 	bicne.w	r3, r3, #7
 8001460:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001462:	b163      	cbz	r3, 800147e <pvPortMalloc+0x8a>
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <pvPortMalloc+0x118>)
 8001466:	6816      	ldr	r6, [r2, #0]
 8001468:	4690      	mov	r8, r2
 800146a:	42b3      	cmp	r3, r6
 800146c:	d807      	bhi.n	800147e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800146e:	4a25      	ldr	r2, [pc, #148]	; (8001504 <pvPortMalloc+0x110>)
 8001470:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001472:	6868      	ldr	r0, [r5, #4]
 8001474:	4283      	cmp	r3, r0
 8001476:	d804      	bhi.n	8001482 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001478:	6809      	ldr	r1, [r1, #0]
 800147a:	428d      	cmp	r5, r1
 800147c:	d107      	bne.n	800148e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800147e:	2400      	movs	r4, #0
 8001480:	e029      	b.n	80014d6 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001482:	682c      	ldr	r4, [r5, #0]
 8001484:	2c00      	cmp	r4, #0
 8001486:	d0f7      	beq.n	8001478 <pvPortMalloc+0x84>
 8001488:	462a      	mov	r2, r5
 800148a:	4625      	mov	r5, r4
 800148c:	e7f1      	b.n	8001472 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800148e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001490:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001492:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001494:	1ac2      	subs	r2, r0, r3
 8001496:	2a10      	cmp	r2, #16
 8001498:	d90f      	bls.n	80014ba <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800149a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800149c:	0741      	lsls	r1, r0, #29
 800149e:	d008      	beq.n	80014b2 <pvPortMalloc+0xbe>
	__asm volatile
 80014a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a4:	f383 8811 	msr	BASEPRI, r3
 80014a8:	f3bf 8f6f 	isb	sy
 80014ac:	f3bf 8f4f 	dsb	sy
 80014b0:	e7fe      	b.n	80014b0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80014b2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80014b4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80014b6:	f7ff ff79 	bl	80013ac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014ba:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014bc:	4912      	ldr	r1, [pc, #72]	; (8001508 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014be:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014c0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80014c2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014c4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014c6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014ca:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80014cc:	bf38      	it	cc
 80014ce:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014d0:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014d2:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80014d4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80014d6:	f000 fadf 	bl	8001a98 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80014da:	0763      	lsls	r3, r4, #29
 80014dc:	d008      	beq.n	80014f0 <pvPortMalloc+0xfc>
 80014de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e2:	f383 8811 	msr	BASEPRI, r3
 80014e6:	f3bf 8f6f 	isb	sy
 80014ea:	f3bf 8f4f 	dsb	sy
 80014ee:	e7fe      	b.n	80014ee <pvPortMalloc+0xfa>
}
 80014f0:	4620      	mov	r0, r4
 80014f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014f6:	bf00      	nop
 80014f8:	200000a0 	.word	0x200000a0
 80014fc:	200010a4 	.word	0x200010a4
 8001500:	200000a4 	.word	0x200000a4
 8001504:	200010b0 	.word	0x200010b0
 8001508:	200010ac 	.word	0x200010ac
 800150c:	200010a8 	.word	0x200010a8

08001510 <vPortFree>:
{
 8001510:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001512:	4604      	mov	r4, r0
 8001514:	b370      	cbz	r0, 8001574 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <vPortFree+0x68>)
 8001518:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	4213      	tst	r3, r2
 8001520:	d108      	bne.n	8001534 <vPortFree+0x24>
 8001522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001526:	f383 8811 	msr	BASEPRI, r3
 800152a:	f3bf 8f6f 	isb	sy
 800152e:	f3bf 8f4f 	dsb	sy
 8001532:	e7fe      	b.n	8001532 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001534:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001538:	b141      	cbz	r1, 800154c <vPortFree+0x3c>
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	e7fe      	b.n	800154a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800154c:	ea23 0302 	bic.w	r3, r3, r2
 8001550:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001554:	f000 f9ee 	bl	8001934 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <vPortFree+0x6c>)
 800155a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800155e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001560:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001564:	440b      	add	r3, r1
 8001566:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001568:	f7ff ff20 	bl	80013ac <prvInsertBlockIntoFreeList>
}
 800156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001570:	f000 ba92 	b.w	8001a98 <xTaskResumeAll>
 8001574:	bd10      	pop	{r4, pc}
 8001576:	bf00      	nop
 8001578:	200010a4 	.word	0x200010a4
 800157c:	200010a8 	.word	0x200010a8

08001580 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8001580:	b510      	push	{r4, lr}
 8001582:	4604      	mov	r4, r0
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8001584:	f001 f8c2 	bl	800270c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8001588:	4620      	mov	r0, r4
 800158a:	f7fe fde1 	bl	8000150 <strlen>
		{
			pcBuffer[ x ] = ' ';
 800158e:	2320      	movs	r3, #32
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8001590:	280e      	cmp	r0, #14
 8001592:	d903      	bls.n	800159c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 8001594:	2300      	movs	r3, #0
 8001596:	5423      	strb	r3, [r4, r0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 8001598:	4420      	add	r0, r4
 800159a:	bd10      	pop	{r4, pc}
			pcBuffer[ x ] = ' ';
 800159c:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800159e:	3001      	adds	r0, #1
 80015a0:	e7f6      	b.n	8001590 <prvWriteNameToBuffer+0x10>
	...

080015a4 <prvGetExpectedIdleTime>:
			if( uxTopReadyPriority > uxLeastSignificantBit )
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <prvGetExpectedIdleTime+0x28>)
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <prvGetExpectedIdleTime+0x2c>)
			if( uxTopReadyPriority > uxLeastSignificantBit )
 80015a8:	681b      	ldr	r3, [r3, #0]
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80015ae:	b958      	cbnz	r0, 80015c8 <prvGetExpectedIdleTime+0x24>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <prvGetExpectedIdleTime+0x30>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	2a01      	cmp	r2, #1
 80015b6:	d808      	bhi.n	80015ca <prvGetExpectedIdleTime+0x26>
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d806      	bhi.n	80015ca <prvGetExpectedIdleTime+0x26>
			xReturn = xNextTaskUnblockTime - xTickCount;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <prvGetExpectedIdleTime+0x34>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <prvGetExpectedIdleTime+0x38>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1ac0      	subs	r0, r0, r3
 80015c6:	4770      	bx	lr
			xReturn = 0;
 80015c8:	2000      	movs	r0, #0
	}
 80015ca:	4770      	bx	lr
 80015cc:	20001168 	.word	0x20001168
 80015d0:	200010b8 	.word	0x200010b8
 80015d4:	200010c4 	.word	0x200010c4
 80015d8:	20001198 	.word	0x20001198
 80015dc:	200011e0 	.word	0x200011e0

080015e0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <prvResetNextTaskUnblockTime+0x1c>)
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <prvResetNextTaskUnblockTime+0x20>)
 80015e8:	b919      	cbnz	r1, 80015f2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015f6:	68d2      	ldr	r2, [r2, #12]
 80015f8:	6852      	ldr	r2, [r2, #4]
 80015fa:	e7f8      	b.n	80015ee <prvResetNextTaskUnblockTime+0xe>
 80015fc:	200010bc 	.word	0x200010bc
 8001600:	20001198 	.word	0x20001198

08001604 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001608:	4e1b      	ldr	r6, [pc, #108]	; (8001678 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800160a:	681d      	ldr	r5, [r3, #0]
{
 800160c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800160e:	6830      	ldr	r0, [r6, #0]
{
 8001610:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001612:	3004      	adds	r0, #4
 8001614:	f7ff fcfb 	bl	800100e <uxListRemove>
 8001618:	4633      	mov	r3, r6
 800161a:	b940      	cbnz	r0, 800162e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800161c:	2001      	movs	r0, #1
 800161e:	6831      	ldr	r1, [r6, #0]
 8001620:	4e16      	ldr	r6, [pc, #88]	; (800167c <prvAddCurrentTaskToDelayedList+0x78>)
 8001622:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001624:	6832      	ldr	r2, [r6, #0]
 8001626:	4088      	lsls	r0, r1
 8001628:	ea22 0200 	bic.w	r2, r2, r0
 800162c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800162e:	1c62      	adds	r2, r4, #1
 8001630:	d107      	bne.n	8001642 <prvAddCurrentTaskToDelayedList+0x3e>
 8001632:	b137      	cbz	r7, 8001642 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	4812      	ldr	r0, [pc, #72]	; (8001680 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001638:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800163a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800163e:	f7ff bcc3 	b.w	8000fc8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001642:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001644:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001646:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001648:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800164a:	d907      	bls.n	800165c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <prvAddCurrentTaskToDelayedList+0x80>)
 800164e:	6810      	ldr	r0, [r2, #0]
 8001650:	6819      	ldr	r1, [r3, #0]
}
 8001652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001656:	3104      	adds	r1, #4
 8001658:	f7ff bcc2 	b.w	8000fe0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <prvAddCurrentTaskToDelayedList+0x84>)
 800165e:	6810      	ldr	r0, [r2, #0]
 8001660:	6819      	ldr	r1, [r3, #0]
 8001662:	3104      	adds	r1, #4
 8001664:	f7ff fcbc 	bl	8000fe0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <prvAddCurrentTaskToDelayedList+0x88>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800166e:	bf38      	it	cc
 8001670:	601c      	strcc	r4, [r3, #0]
 8001672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001674:	200011e0 	.word	0x200011e0
 8001678:	200010b8 	.word	0x200010b8
 800167c:	20001168 	.word	0x20001168
 8001680:	200011b8 	.word	0x200011b8
 8001684:	200010c0 	.word	0x200010c0
 8001688:	200010bc 	.word	0x200010bc
 800168c:	20001198 	.word	0x20001198

08001690 <eTaskGetState.part.5>:
 8001690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001694:	f383 8811 	msr	BASEPRI, r3
 8001698:	f3bf 8f6f 	isb	sy
 800169c:	f3bf 8f4f 	dsb	sy
 80016a0:	e7fe      	b.n	80016a0 <eTaskGetState.part.5+0x10>
	...

080016a4 <xTaskCreate>:
	{
 80016a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016a8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80016ac:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016ae:	4650      	mov	r0, sl
	{
 80016b0:	460d      	mov	r5, r1
 80016b2:	4699      	mov	r9, r3
 80016b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016b6:	f7ff fe9d 	bl	80013f4 <pvPortMalloc>
			if( pxStack != NULL )
 80016ba:	4607      	mov	r7, r0
 80016bc:	2800      	cmp	r0, #0
 80016be:	f000 8098 	beq.w	80017f2 <xTaskCreate+0x14e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80016c2:	2050      	movs	r0, #80	; 0x50
 80016c4:	f7ff fe96 	bl	80013f4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80016c8:	4604      	mov	r4, r0
 80016ca:	2800      	cmp	r0, #0
 80016cc:	f000 808e 	beq.w	80017ec <xTaskCreate+0x148>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016d0:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 80016d2:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80016d4:	21a5      	movs	r1, #165	; 0xa5
 80016d6:	4638      	mov	r0, r7
 80016d8:	f000 ff6f 	bl	80025ba <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80016dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016de:	f1aa 0a04 	sub.w	sl, sl, #4
 80016e2:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80016e4:	f02a 0a07 	bic.w	sl, sl, #7
 80016e8:	1e6b      	subs	r3, r5, #1
 80016ea:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80016ee:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016f0:	7859      	ldrb	r1, [r3, #1]
 80016f2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80016f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80016fa:	b109      	cbz	r1, 8001700 <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016fc:	42ab      	cmp	r3, r5
 80016fe:	d1f7      	bne.n	80016f0 <xTaskCreate+0x4c>
 8001700:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001702:	f04f 0b00 	mov.w	fp, #0
 8001706:	2d06      	cmp	r5, #6
 8001708:	bf28      	it	cs
 800170a:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800170c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800170e:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001710:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001712:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001716:	f7ff fc54 	bl	8000fc2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800171a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800171e:	f104 0018 	add.w	r0, r4, #24
 8001722:	f7ff fc4e 	bl	8000fc2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001726:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001728:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800172a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 800172c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001730:	464a      	mov	r2, r9
 8001732:	4641      	mov	r1, r8
 8001734:	4650      	mov	r0, sl
 8001736:	f7ff fca3 	bl	8001080 <pxPortInitialiseStack>
 800173a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800173c:	b106      	cbz	r6, 8001740 <xTaskCreate+0x9c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800173e:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001740:	f7ff fcc8 	bl	80010d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <xTaskCreate+0x16c>)
		if( pxCurrentTCB == NULL )
 8001746:	4e33      	ldr	r6, [pc, #204]	; (8001814 <xTaskCreate+0x170>)
		uxCurrentNumberOfTasks++;
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001840 <xTaskCreate+0x19c>
 800174e:	3201      	adds	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001752:	6835      	ldr	r5, [r6, #0]
 8001754:	2d00      	cmp	r5, #0
 8001756:	d14f      	bne.n	80017f8 <xTaskCreate+0x154>
			pxCurrentTCB = pxNewTCB;
 8001758:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d11d      	bne.n	800179c <xTaskCreate+0xf8>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001760:	eb08 0005 	add.w	r0, r8, r5
 8001764:	3514      	adds	r5, #20
 8001766:	f7ff fc21 	bl	8000fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800176a:	2d8c      	cmp	r5, #140	; 0x8c
 800176c:	d1f8      	bne.n	8001760 <xTaskCreate+0xbc>
	vListInitialise( &xDelayedTaskList1 );
 800176e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8001844 <xTaskCreate+0x1a0>
	vListInitialise( &xDelayedTaskList2 );
 8001772:	4d29      	ldr	r5, [pc, #164]	; (8001818 <xTaskCreate+0x174>)
	vListInitialise( &xDelayedTaskList1 );
 8001774:	4648      	mov	r0, r9
 8001776:	f7ff fc19 	bl	8000fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800177a:	4628      	mov	r0, r5
 800177c:	f7ff fc16 	bl	8000fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001780:	4826      	ldr	r0, [pc, #152]	; (800181c <xTaskCreate+0x178>)
 8001782:	f7ff fc13 	bl	8000fac <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001786:	4826      	ldr	r0, [pc, #152]	; (8001820 <xTaskCreate+0x17c>)
 8001788:	f7ff fc10 	bl	8000fac <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800178c:	4825      	ldr	r0, [pc, #148]	; (8001824 <xTaskCreate+0x180>)
 800178e:	f7ff fc0d 	bl	8000fac <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <xTaskCreate+0x184>)
 8001794:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <xTaskCreate+0x188>)
 800179a:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800179c:	2501      	movs	r5, #1
		uxTaskNumber++;
 800179e:	4a24      	ldr	r2, [pc, #144]	; (8001830 <xTaskCreate+0x18c>)
		prvAddTaskToReadyList( pxNewTCB );
 80017a0:	4924      	ldr	r1, [pc, #144]	; (8001834 <xTaskCreate+0x190>)
		uxTaskNumber++;
 80017a2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80017a4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80017a6:	3301      	adds	r3, #1
 80017a8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80017aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017ac:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80017ae:	fa05 f302 	lsl.w	r3, r5, r2
 80017b2:	4303      	orrs	r3, r0
 80017b4:	2014      	movs	r0, #20
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	fb00 8002 	mla	r0, r0, r2, r8
 80017bc:	4639      	mov	r1, r7
 80017be:	f7ff fc03 	bl	8000fc8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80017c2:	f7ff fca9 	bl	8001118 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <xTaskCreate+0x194>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b163      	cbz	r3, 80017e6 <xTaskCreate+0x142>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80017cc:	6833      	ldr	r3, [r6, #0]
 80017ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d207      	bcs.n	80017e6 <xTaskCreate+0x142>
			taskYIELD_IF_USING_PREEMPTION();
 80017d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <xTaskCreate+0x198>)
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	f3bf 8f4f 	dsb	sy
 80017e2:	f3bf 8f6f 	isb	sy
	}
 80017e6:	4628      	mov	r0, r5
 80017e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80017ec:	4638      	mov	r0, r7
 80017ee:	f7ff fe8f 	bl	8001510 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017f2:	f04f 35ff 	mov.w	r5, #4294967295
 80017f6:	e7f6      	b.n	80017e6 <xTaskCreate+0x142>
			if( xSchedulerRunning == pdFALSE )
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <xTaskCreate+0x194>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1cd      	bne.n	800179c <xTaskCreate+0xf8>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001800:	6833      	ldr	r3, [r6, #0]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001806:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001808:	bf98      	it	ls
 800180a:	6034      	strls	r4, [r6, #0]
 800180c:	e7c6      	b.n	800179c <xTaskCreate+0xf8>
 800180e:	bf00      	nop
 8001810:	20001154 	.word	0x20001154
 8001814:	200010b8 	.word	0x200010b8
 8001818:	20001180 	.word	0x20001180
 800181c:	200011a0 	.word	0x200011a0
 8001820:	200011cc 	.word	0x200011cc
 8001824:	200011b8 	.word	0x200011b8
 8001828:	200010bc 	.word	0x200010bc
 800182c:	200010c0 	.word	0x200010c0
 8001830:	20001164 	.word	0x20001164
 8001834:	20001168 	.word	0x20001168
 8001838:	200011b4 	.word	0x200011b4
 800183c:	e000ed04 	.word	0xe000ed04
 8001840:	200010c4 	.word	0x200010c4
 8001844:	2000116c 	.word	0x2000116c

08001848 <eTaskGetState>:
	{
 8001848:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
 800184a:	4605      	mov	r5, r0
 800184c:	b908      	cbnz	r0, 8001852 <eTaskGetState+0xa>
 800184e:	f7ff ff1f 	bl	8001690 <eTaskGetState.part.5>
		if( pxTCB == pxCurrentTCB )
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <eTaskGetState+0x5c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4298      	cmp	r0, r3
 8001858:	d01d      	beq.n	8001896 <eTaskGetState+0x4e>
			taskENTER_CRITICAL();
 800185a:	f7ff fc3b 	bl	80010d4 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800185e:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
 8001860:	f7ff fc5a 	bl	8001118 <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <eTaskGetState+0x60>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	429c      	cmp	r4, r3
 800186a:	d016      	beq.n	800189a <eTaskGetState+0x52>
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <eTaskGetState+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	429c      	cmp	r4, r3
 8001872:	d012      	beq.n	800189a <eTaskGetState+0x52>
				else if( pxStateList == &xSuspendedTaskList )
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <eTaskGetState+0x68>)
 8001876:	429c      	cmp	r4, r3
 8001878:	d105      	bne.n	8001886 <eTaskGetState+0x3e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800187a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
						eReturn = eSuspended;
 800187e:	bf14      	ite	ne
 8001880:	2002      	movne	r0, #2
 8001882:	2003      	moveq	r0, #3
 8001884:	bd38      	pop	{r3, r4, r5, pc}
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <eTaskGetState+0x6c>)
 8001888:	429c      	cmp	r4, r3
 800188a:	d008      	beq.n	800189e <eTaskGetState+0x56>
 800188c:	2c00      	cmp	r4, #0
				eReturn = eReady;
 800188e:	bf0c      	ite	eq
 8001890:	2004      	moveq	r0, #4
 8001892:	2001      	movne	r0, #1
 8001894:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
 8001896:	2000      	movs	r0, #0
 8001898:	bd38      	pop	{r3, r4, r5, pc}
						eReturn = eBlocked;
 800189a:	2002      	movs	r0, #2
 800189c:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
 800189e:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
 80018a2:	bf00      	nop
 80018a4:	200010b8 	.word	0x200010b8
 80018a8:	200010bc 	.word	0x200010bc
 80018ac:	200010c0 	.word	0x200010c0
 80018b0:	200011b8 	.word	0x200011b8
 80018b4:	200011cc 	.word	0x200011cc

080018b8 <vTaskStartScheduler>:
{
 80018b8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80018ba:	2400      	movs	r4, #0
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <vTaskStartScheduler+0x64>)
 80018be:	9400      	str	r4, [sp, #0]
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	4623      	mov	r3, r4
 80018c6:	4916      	ldr	r1, [pc, #88]	; (8001920 <vTaskStartScheduler+0x68>)
 80018c8:	4816      	ldr	r0, [pc, #88]	; (8001924 <vTaskStartScheduler+0x6c>)
 80018ca:	f7ff feeb 	bl	80016a4 <xTaskCreate>
	if( xReturn == pdPASS )
 80018ce:	2801      	cmp	r0, #1
 80018d0:	d116      	bne.n	8001900 <vTaskStartScheduler+0x48>
 80018d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80018e2:	f04f 32ff 	mov.w	r2, #4294967295
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <vTaskStartScheduler+0x70>)
 80018e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <vTaskStartScheduler+0x74>)
 80018ec:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <vTaskStartScheduler+0x78>)
 80018f0:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80018f2:	f000 fbd1 	bl	8002098 <configureTimerForRunTimeStats>
}
 80018f6:	b002      	add	sp, #8
 80018f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80018fc:	f7ff bd0c 	b.w	8001318 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001900:	3001      	adds	r0, #1
 8001902:	d108      	bne.n	8001916 <vTaskStartScheduler+0x5e>
 8001904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001908:	f383 8811 	msr	BASEPRI, r3
 800190c:	f3bf 8f6f 	isb	sy
 8001910:	f3bf 8f4f 	dsb	sy
 8001914:	e7fe      	b.n	8001914 <vTaskStartScheduler+0x5c>
}
 8001916:	b002      	add	sp, #8
 8001918:	bd10      	pop	{r4, pc}
 800191a:	bf00      	nop
 800191c:	20001194 	.word	0x20001194
 8001920:	0800391f 	.word	0x0800391f
 8001924:	08001bd1 	.word	0x08001bd1
 8001928:	20001198 	.word	0x20001198
 800192c:	200011b4 	.word	0x200011b4
 8001930:	200011e0 	.word	0x200011e0

08001934 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001934:	4a02      	ldr	r2, [pc, #8]	; (8001940 <vTaskSuspendAll+0xc>)
 8001936:	6813      	ldr	r3, [r2, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20001160 	.word	0x20001160

08001944 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <vTaskStepTick+0x28>)
 8001946:	490a      	ldr	r1, [pc, #40]	; (8001970 <vTaskStepTick+0x2c>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	6809      	ldr	r1, [r1, #0]
 800194c:	4402      	add	r2, r0
 800194e:	428a      	cmp	r2, r1
 8001950:	d908      	bls.n	8001964 <vTaskStepTick+0x20>
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	e7fe      	b.n	8001962 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4410      	add	r0, r2
 8001968:	6018      	str	r0, [r3, #0]
 800196a:	4770      	bx	lr
 800196c:	200011e0 	.word	0x200011e0
 8001970:	20001198 	.word	0x20001198

08001974 <xTaskIncrementTick>:
{
 8001974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001978:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <xTaskIncrementTick+0xf8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d153      	bne.n	8001a28 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <xTaskIncrementTick+0xfc>)
 8001982:	681c      	ldr	r4, [r3, #0]
 8001984:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001986:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001988:	b9bc      	cbnz	r4, 80019ba <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800198a:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <xTaskIncrementTick+0x100>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	b142      	cbz	r2, 80019a4 <xTaskIncrementTick+0x30>
 8001992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001996:	f383 8811 	msr	BASEPRI, r3
 800199a:	f3bf 8f6f 	isb	sy
 800199e:	f3bf 8f4f 	dsb	sy
 80019a2:	e7fe      	b.n	80019a2 <xTaskIncrementTick+0x2e>
 80019a4:	4a34      	ldr	r2, [pc, #208]	; (8001a78 <xTaskIncrementTick+0x104>)
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	6810      	ldr	r0, [r2, #0]
 80019aa:	6018      	str	r0, [r3, #0]
 80019ac:	6011      	str	r1, [r2, #0]
 80019ae:	4a33      	ldr	r2, [pc, #204]	; (8001a7c <xTaskIncrementTick+0x108>)
 80019b0:	6813      	ldr	r3, [r2, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	f7ff fe13 	bl	80015e0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80019ba:	4d31      	ldr	r5, [pc, #196]	; (8001a80 <xTaskIncrementTick+0x10c>)
 80019bc:	f04f 0b00 	mov.w	fp, #0
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	4f30      	ldr	r7, [pc, #192]	; (8001a84 <xTaskIncrementTick+0x110>)
 80019c4:	429c      	cmp	r4, r3
 80019c6:	d33e      	bcc.n	8001a46 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019c8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001a74 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80019cc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001a94 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019d0:	f8d8 2000 	ldr.w	r2, [r8]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	bb72      	cbnz	r2, 8001a36 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	602a      	str	r2, [r5, #0]
					break;
 80019de:	e032      	b.n	8001a46 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019e0:	f106 0a04 	add.w	sl, r6, #4
 80019e4:	4650      	mov	r0, sl
 80019e6:	f7ff fb12 	bl	800100e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019ea:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80019ec:	b119      	cbz	r1, 80019f6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019ee:	f106 0018 	add.w	r0, r6, #24
 80019f2:	f7ff fb0c 	bl	800100e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019f6:	2201      	movs	r2, #1
 80019f8:	f04f 0e14 	mov.w	lr, #20
 80019fc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80019fe:	f8d9 3000 	ldr.w	r3, [r9]
 8001a02:	fa02 f100 	lsl.w	r1, r2, r0
 8001a06:	4319      	orrs	r1, r3
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <xTaskIncrementTick+0x114>)
 8001a0a:	f8c9 1000 	str.w	r1, [r9]
 8001a0e:	fb0e 3000 	mla	r0, lr, r0, r3
 8001a12:	4651      	mov	r1, sl
 8001a14:	f7ff fad8 	bl	8000fc8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001a1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001a1e:	4291      	cmp	r1, r2
 8001a20:	bf28      	it	cs
 8001a22:	f04f 0b01 	movcs.w	fp, #1
 8001a26:	e7d3      	b.n	80019d0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8001a2a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e011      	b.n	8001a5a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a36:	f8d8 2000 	ldr.w	r2, [r8]
 8001a3a:	68d2      	ldr	r2, [r2, #12]
 8001a3c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a3e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001a40:	428c      	cmp	r4, r1
 8001a42:	d2cd      	bcs.n	80019e0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001a44:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <xTaskIncrementTick+0x114>)
 8001a4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a4c:	2214      	movs	r2, #20
 8001a4e:	434a      	muls	r2, r1
 8001a50:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001a52:	2a02      	cmp	r2, #2
 8001a54:	bf28      	it	cs
 8001a56:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001a5a:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <xTaskIncrementTick+0x11c>)
 8001a5c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001a5e:	2a00      	cmp	r2, #0
 8001a60:	bf18      	it	ne
 8001a62:	f04f 0b01 	movne.w	fp, #1
}
 8001a66:	4658      	mov	r0, fp
 8001a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a6c:	20001160 	.word	0x20001160
 8001a70:	200011e0 	.word	0x200011e0
 8001a74:	200010bc 	.word	0x200010bc
 8001a78:	200010c0 	.word	0x200010c0
 8001a7c:	2000119c 	.word	0x2000119c
 8001a80:	20001198 	.word	0x20001198
 8001a84:	200010b8 	.word	0x200010b8
 8001a88:	200010c4 	.word	0x200010c4
 8001a8c:	2000115c 	.word	0x2000115c
 8001a90:	200011e4 	.word	0x200011e4
 8001a94:	20001168 	.word	0x20001168

08001a98 <xTaskResumeAll>:
{
 8001a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001a9c:	4c31      	ldr	r4, [pc, #196]	; (8001b64 <xTaskResumeAll+0xcc>)
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	b943      	cbnz	r3, 8001ab4 <xTaskResumeAll+0x1c>
 8001aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	e7fe      	b.n	8001ab2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001ab4:	f7ff fb0e 	bl	80010d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001abe:	6824      	ldr	r4, [r4, #0]
 8001ac0:	b12c      	cbz	r4, 8001ace <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001ac2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001ac4:	f7ff fb28 	bl	8001118 <vPortExitCritical>
}
 8001ac8:	4620      	mov	r0, r4
 8001aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <xTaskResumeAll+0xd0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f5      	beq.n	8001ac2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ad6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001b80 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001ada:	4f24      	ldr	r7, [pc, #144]	; (8001b6c <xTaskResumeAll+0xd4>)
 8001adc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001b84 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ae0:	f8d9 3000 	ldr.w	r3, [r9]
 8001ae4:	b9e3      	cbnz	r3, 8001b20 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001ae6:	b10c      	cbz	r4, 8001aec <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001ae8:	f7ff fd7a 	bl	80015e0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001aec:	4d20      	ldr	r5, [pc, #128]	; (8001b70 <xTaskResumeAll+0xd8>)
 8001aee:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001af0:	b144      	cbz	r4, 8001b04 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001af2:	2701      	movs	r7, #1
 8001af4:	4e1f      	ldr	r6, [pc, #124]	; (8001b74 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8001af6:	f7ff ff3d 	bl	8001974 <xTaskIncrementTick>
 8001afa:	b100      	cbz	r0, 8001afe <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001afc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001afe:	3c01      	subs	r4, #1
 8001b00:	d1f9      	bne.n	8001af6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001b02:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <xTaskResumeAll+0xdc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0da      	beq.n	8001ac2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <xTaskResumeAll+0xe0>)
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001b1c:	2401      	movs	r4, #1
 8001b1e:	e7d1      	b.n	8001ac4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b20:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8001b24:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001b26:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b28:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b2a:	f104 0018 	add.w	r0, r4, #24
 8001b2e:	f7ff fa6e 	bl	800100e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b32:	4630      	mov	r0, r6
 8001b34:	f7ff fa6b 	bl	800100e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b38:	2014      	movs	r0, #20
 8001b3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	fa05 f302 	lsl.w	r3, r5, r2
 8001b42:	430b      	orrs	r3, r1
 8001b44:	fb00 8002 	mla	r0, r0, r2, r8
 8001b48:	4631      	mov	r1, r6
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	f7ff fa3c 	bl	8000fc8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <xTaskResumeAll+0xe4>)
 8001b52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001b5a:	bf24      	itt	cs
 8001b5c:	4b05      	ldrcs	r3, [pc, #20]	; (8001b74 <xTaskResumeAll+0xdc>)
 8001b5e:	601d      	strcs	r5, [r3, #0]
 8001b60:	e7be      	b.n	8001ae0 <xTaskResumeAll+0x48>
 8001b62:	bf00      	nop
 8001b64:	20001160 	.word	0x20001160
 8001b68:	20001154 	.word	0x20001154
 8001b6c:	20001168 	.word	0x20001168
 8001b70:	2000115c 	.word	0x2000115c
 8001b74:	200011e4 	.word	0x200011e4
 8001b78:	e000ed04 	.word	0xe000ed04
 8001b7c:	200010b8 	.word	0x200010b8
 8001b80:	200011a0 	.word	0x200011a0
 8001b84:	200010c4 	.word	0x200010c4

08001b88 <vTaskDelay>:
	{
 8001b88:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b8a:	b940      	cbnz	r0, 8001b9e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <vTaskDelay+0x40>)
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <vTaskDelay+0x44>)
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	b141      	cbz	r1, 8001bb6 <vTaskDelay+0x2e>
 8001ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba8:	f383 8811 	msr	BASEPRI, r3
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	e7fe      	b.n	8001bb4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001bb6:	f7ff febd 	bl	8001934 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001bba:	f7ff fd23 	bl	8001604 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001bbe:	f7ff ff6b 	bl	8001a98 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d0e2      	beq.n	8001b8c <vTaskDelay+0x4>
 8001bc6:	bd08      	pop	{r3, pc}
 8001bc8:	e000ed04 	.word	0xe000ed04
 8001bcc:	20001160 	.word	0x20001160

08001bd0 <prvIdleTask>:
{
 8001bd0:	b570      	push	{r4, r5, r6, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001bd2:	4e20      	ldr	r6, [pc, #128]	; (8001c54 <prvIdleTask+0x84>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bd4:	4c20      	ldr	r4, [pc, #128]	; (8001c58 <prvIdleTask+0x88>)
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	b9a3      	cbnz	r3, 8001c04 <prvIdleTask+0x34>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8001bda:	f7ff fce3 	bl	80015a4 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8001bde:	2801      	cmp	r0, #1
 8001be0:	d9f8      	bls.n	8001bd4 <prvIdleTask+0x4>
				vTaskSuspendAll();
 8001be2:	f7ff fea7 	bl	8001934 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <prvIdleTask+0x8c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <prvIdleTask+0x90>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d226      	bcs.n	8001c40 <prvIdleTask+0x70>
 8001bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf6:	f383 8811 	msr	BASEPRI, r3
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	e7fe      	b.n	8001c02 <prvIdleTask+0x32>
			vTaskSuspendAll();
 8001c04:	f7ff fe96 	bl	8001934 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001c08:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001c0a:	f7ff ff45 	bl	8001a98 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001c0e:	2d00      	cmp	r5, #0
 8001c10:	d0e1      	beq.n	8001bd6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001c12:	f7ff fa5f 	bl	80010d4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001c16:	68f3      	ldr	r3, [r6, #12]
 8001c18:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c1a:	1d28      	adds	r0, r5, #4
 8001c1c:	f7ff f9f7 	bl	800100e <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001c20:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <prvIdleTask+0x94>)
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001c2e:	f7ff fa73 	bl	8001118 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001c32:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001c34:	f7ff fc6c 	bl	8001510 <vPortFree>
			vPortFree( pxTCB );
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f7ff fc69 	bl	8001510 <vPortFree>
 8001c3e:	e7ca      	b.n	8001bd6 <prvIdleTask+0x6>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8001c40:	f7ff fcb0 	bl	80015a4 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8001c44:	2801      	cmp	r0, #1
 8001c46:	d901      	bls.n	8001c4c <prvIdleTask+0x7c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8001c48:	f7ff fab2 	bl	80011b0 <vPortSuppressTicksAndSleep>
				( void ) xTaskResumeAll();
 8001c4c:	f7ff ff24 	bl	8001a98 <xTaskResumeAll>
 8001c50:	e7c0      	b.n	8001bd4 <prvIdleTask+0x4>
 8001c52:	bf00      	nop
 8001c54:	200011cc 	.word	0x200011cc
 8001c58:	20001158 	.word	0x20001158
 8001c5c:	20001198 	.word	0x20001198
 8001c60:	200011e0 	.word	0x200011e0
 8001c64:	20001154 	.word	0x20001154

08001c68 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <vTaskSwitchContext+0x7c>)
{
 8001c6a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <vTaskSwitchContext+0x80>)
 8001c70:	b112      	cbz	r2, 8001c78 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001c72:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001c78:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001c7a:	f000 fa13 	bl	80020a4 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <vTaskSwitchContext+0x84>)
 8001c80:	6814      	ldr	r4, [r2, #0]
 8001c82:	42a0      	cmp	r0, r4
 8001c84:	d905      	bls.n	8001c92 <vTaskSwitchContext+0x2a>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <vTaskSwitchContext+0x88>)
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001c8c:	1b1b      	subs	r3, r3, r4
 8001c8e:	4403      	add	r3, r0
 8001c90:	64cb      	str	r3, [r1, #76]	; 0x4c
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <vTaskSwitchContext+0x8c>)
				ulTaskSwitchedInTime = ulTotalRunTime;
 8001c94:	6010      	str	r0, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c96:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	2214      	movs	r2, #20
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f1c3 031f 	rsb	r3, r3, #31
 8001ca4:	435a      	muls	r2, r3
 8001ca6:	4914      	ldr	r1, [pc, #80]	; (8001cf8 <vTaskSwitchContext+0x90>)
 8001ca8:	588c      	ldr	r4, [r1, r2]
 8001caa:	1888      	adds	r0, r1, r2
 8001cac:	b944      	cbnz	r4, 8001cc0 <vTaskSwitchContext+0x58>
	__asm volatile
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	e7fe      	b.n	8001cbe <vTaskSwitchContext+0x56>
 8001cc0:	6844      	ldr	r4, [r0, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	6864      	ldr	r4, [r4, #4]
 8001cc6:	440a      	add	r2, r1
 8001cc8:	4294      	cmp	r4, r2
 8001cca:	bf08      	it	eq
 8001ccc:	6862      	ldreq	r2, [r4, #4]
 8001cce:	6044      	str	r4, [r0, #4]
 8001cd0:	bf08      	it	eq
 8001cd2:	6042      	streq	r2, [r0, #4]
 8001cd4:	2214      	movs	r2, #20
 8001cd6:	fb02 1303 	mla	r3, r2, r3, r1
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <vTaskSwitchContext+0x88>)
 8001ce0:	e7c8      	b.n	8001c74 <vTaskSwitchContext+0xc>
 8001ce2:	bf00      	nop
 8001ce4:	20001160 	.word	0x20001160
 8001ce8:	200011e4 	.word	0x200011e4
 8001cec:	20001150 	.word	0x20001150
 8001cf0:	200010b8 	.word	0x200010b8
 8001cf4:	20001168 	.word	0x20001168
 8001cf8:	200010c4 	.word	0x200010c4

08001cfc <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <eTaskConfirmSleepModeStatus+0x24>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	b960      	cbnz	r0, 8001d1c <eTaskConfirmSleepModeStatus+0x20>
		else if( xYieldPending != pdFALSE )
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <eTaskConfirmSleepModeStatus+0x28>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b953      	cbnz	r3, 8001d1e <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <eTaskConfirmSleepModeStatus+0x2c>)
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <eTaskConfirmSleepModeStatus+0x30>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6810      	ldr	r0, [r2, #0]
 8001d10:	3b01      	subs	r3, #1
				eReturn = eNoTasksWaitingTimeout;
 8001d12:	4298      	cmp	r0, r3
 8001d14:	bf14      	ite	ne
 8001d16:	2001      	movne	r0, #1
 8001d18:	2002      	moveq	r0, #2
 8001d1a:	4770      	bx	lr
			eReturn = eAbortSleep;
 8001d1c:	2000      	movs	r0, #0
	}
 8001d1e:	4770      	bx	lr
 8001d20:	200011a0 	.word	0x200011a0
 8001d24:	200011e4 	.word	0x200011e4
 8001d28:	20001154 	.word	0x20001154
 8001d2c:	200011b8 	.word	0x200011b8

08001d30 <vTaskGetInfo>:
	{
 8001d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d34:	460c      	mov	r4, r1
 8001d36:	4617      	mov	r7, r2
 8001d38:	4698      	mov	r8, r3
		pxTCB = prvGetTCBFromHandle( xTask );
 8001d3a:	4606      	mov	r6, r0
 8001d3c:	bb58      	cbnz	r0, 8001d96 <vTaskGetInfo+0x66>
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <vTaskGetInfo+0x7c>)
 8001d40:	681d      	ldr	r5, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8001d42:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8001d46:	6063      	str	r3, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8001d48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8001d4a:	6025      	str	r5, [r4, #0]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8001d4c:	6123      	str	r3, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8001d4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001d50:	61e3      	str	r3, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8001d52:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001d54:	60a3      	str	r3, [r4, #8]
			if( pxTaskStatus->eCurrentState == eSuspended )
 8001d56:	7b23      	ldrb	r3, [r4, #12]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d107      	bne.n	8001d6c <vTaskGetInfo+0x3c>
				vTaskSuspendAll();
 8001d5c:	f7ff fdea 	bl	8001934 <vTaskSuspendAll>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d62:	b10b      	cbz	r3, 8001d68 <vTaskGetInfo+0x38>
						pxTaskStatus->eCurrentState = eBlocked;
 8001d64:	2302      	movs	r3, #2
 8001d66:	7323      	strb	r3, [r4, #12]
				xTaskResumeAll();
 8001d68:	f7ff fe96 	bl	8001a98 <xTaskResumeAll>
			pxTaskStatus->uxBasePriority = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6163      	str	r3, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8001d70:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
		if( eState != eInvalid )
 8001d72:	f1b8 0f05 	cmp.w	r8, #5
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8001d76:	61a3      	str	r3, [r4, #24]
		if( eState != eInvalid )
 8001d78:	d00f      	beq.n	8001d9a <vTaskGetInfo+0x6a>
			pxTaskStatus->eCurrentState = eState;
 8001d7a:	f884 800c 	strb.w	r8, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8001d7e:	b18f      	cbz	r7, 8001da4 <vTaskGetInfo+0x74>
 8001d80:	6b29      	ldr	r1, [r5, #48]	; 0x30
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8001d82:	460a      	mov	r2, r1
 8001d84:	1a53      	subs	r3, r2, r1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8001d86:	f812 0b01 	ldrb.w	r0, [r2], #1
 8001d8a:	28a5      	cmp	r0, #165	; 0xa5
 8001d8c:	d0fa      	beq.n	8001d84 <vTaskGetInfo+0x54>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8001d8e:	089b      	lsrs	r3, r3, #2
		return ( uint16_t ) ulCount;
 8001d90:	8423      	strh	r3, [r4, #32]
 8001d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d96:	4605      	mov	r5, r0
 8001d98:	e7d3      	b.n	8001d42 <vTaskGetInfo+0x12>
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
 8001d9a:	4630      	mov	r0, r6
 8001d9c:	f7ff fd54 	bl	8001848 <eTaskGetState>
 8001da0:	7320      	strb	r0, [r4, #12]
 8001da2:	e7ec      	b.n	8001d7e <vTaskGetInfo+0x4e>
			pxTaskStatus->usStackHighWaterMark = 0;
 8001da4:	8427      	strh	r7, [r4, #32]
 8001da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001daa:	bf00      	nop
 8001dac:	200010b8 	.word	0x200010b8

08001db0 <prvListTasksWithinSingleList>:
	{
 8001db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8001db4:	680d      	ldr	r5, [r1, #0]
	{
 8001db6:	4681      	mov	r9, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	4693      	mov	fp, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8001dbc:	b31d      	cbz	r5, 8001e06 <prvListTasksWithinSingleList+0x56>
	UBaseType_t uxTask = 0;
 8001dbe:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8001dc0:	f04f 0a24 	mov.w	sl, #36	; 0x24
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 8001dc4:	684b      	ldr	r3, [r1, #4]
 8001dc6:	f101 0708 	add.w	r7, r1, #8
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	42bb      	cmp	r3, r7
 8001dce:	604b      	str	r3, [r1, #4]
 8001dd0:	bf04      	itt	eq
 8001dd2:	68cb      	ldreq	r3, [r1, #12]
 8001dd4:	604b      	streq	r3, [r1, #4]
 8001dd6:	684b      	ldr	r3, [r1, #4]
 8001dd8:	f8d3 800c 	ldr.w	r8, [r3, #12]
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8001ddc:	6863      	ldr	r3, [r4, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8001dde:	fb0a 9105 	mla	r1, sl, r5, r9
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8001de2:	685b      	ldr	r3, [r3, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8001de4:	2201      	movs	r2, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8001de6:	429f      	cmp	r7, r3
 8001de8:	6063      	str	r3, [r4, #4]
 8001dea:	bf08      	it	eq
 8001dec:	68e3      	ldreq	r3, [r4, #12]
				uxTask++;
 8001dee:	f105 0501 	add.w	r5, r5, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 8001df2:	bf08      	it	eq
 8001df4:	6063      	streq	r3, [r4, #4]
 8001df6:	6863      	ldr	r3, [r4, #4]
 8001df8:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8001dfa:	465b      	mov	r3, fp
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f7ff ff97 	bl	8001d30 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 8001e02:	45b0      	cmp	r8, r6
 8001e04:	d1ea      	bne.n	8001ddc <prvListTasksWithinSingleList+0x2c>
	}
 8001e06:	4628      	mov	r0, r5
 8001e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e0c <uxTaskGetSystemState>:
	{
 8001e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e10:	4605      	mov	r5, r0
 8001e12:	4617      	mov	r7, r2
		vTaskSuspendAll();
 8001e14:	f7ff fd8e 	bl	8001934 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <uxTaskGetSystemState+0x90>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	d83a      	bhi.n	8001e96 <uxTaskGetSystemState+0x8a>
 8001e20:	f04f 0800 	mov.w	r8, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8001e24:	2624      	movs	r6, #36	; 0x24
 8001e26:	4644      	mov	r4, r8
 8001e28:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001eb0 <uxTaskGetSystemState+0xa4>
 8001e2c:	f108 0178 	add.w	r1, r8, #120	; 0x78
 8001e30:	fb06 5004 	mla	r0, r6, r4, r5
 8001e34:	2201      	movs	r2, #1
 8001e36:	4449      	add	r1, r9
 8001e38:	f7ff ffba 	bl	8001db0 <prvListTasksWithinSingleList>
 8001e3c:	f1a8 0814 	sub.w	r8, r8, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e40:	f118 0f8c 	cmn.w	r8, #140	; 0x8c
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8001e44:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e46:	d1f1      	bne.n	8001e2c <uxTaskGetSystemState+0x20>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <uxTaskGetSystemState+0x94>)
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	fb06 5004 	mla	r0, r6, r4, r5
 8001e52:	f7ff ffad 	bl	8001db0 <prvListTasksWithinSingleList>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <uxTaskGetSystemState+0x98>)
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8001e58:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	fb06 5004 	mla	r0, r6, r4, r5
 8001e62:	f7ff ffa5 	bl	8001db0 <prvListTasksWithinSingleList>
 8001e66:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8001e68:	2204      	movs	r2, #4
 8001e6a:	490f      	ldr	r1, [pc, #60]	; (8001ea8 <uxTaskGetSystemState+0x9c>)
 8001e6c:	fb06 5004 	mla	r0, r6, r4, r5
 8001e70:	f7ff ff9e 	bl	8001db0 <prvListTasksWithinSingleList>
 8001e74:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8001e76:	fb06 5004 	mla	r0, r6, r4, r5
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	490b      	ldr	r1, [pc, #44]	; (8001eac <uxTaskGetSystemState+0xa0>)
 8001e7e:	f7ff ff97 	bl	8001db0 <prvListTasksWithinSingleList>
 8001e82:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8001e84:	b117      	cbz	r7, 8001e8c <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001e86:	f000 f90d 	bl	80020a4 <getRunTimeCounterValue>
 8001e8a:	6038      	str	r0, [r7, #0]
		( void ) xTaskResumeAll();
 8001e8c:	f7ff fe04 	bl	8001a98 <xTaskResumeAll>
	}
 8001e90:	4620      	mov	r0, r4
 8001e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8001e96:	2400      	movs	r4, #0
 8001e98:	e7f8      	b.n	8001e8c <uxTaskGetSystemState+0x80>
 8001e9a:	bf00      	nop
 8001e9c:	20001154 	.word	0x20001154
 8001ea0:	200010bc 	.word	0x200010bc
 8001ea4:	200010c0 	.word	0x200010c0
 8001ea8:	200011cc 	.word	0x200011cc
 8001eac:	200011b8 	.word	0x200011b8
 8001eb0:	200010c4 	.word	0x200010c4

08001eb4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <xTaskGetSchedulerState+0x18>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b133      	cbz	r3, 8001ec8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <xTaskGetSchedulerState+0x1c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2002      	moveq	r0, #2
 8001ec4:	2000      	movne	r0, #0
 8001ec6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001ec8:	2001      	movs	r0, #1
	}
 8001eca:	4770      	bx	lr
 8001ecc:	200011b4 	.word	0x200011b4
 8001ed0:	20001160 	.word	0x20001160

08001ed4 <vTaskList>:
	{
 8001ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		*pcWriteBuffer = 0x00;
 8001ed8:	2700      	movs	r7, #0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8001eda:	2624      	movs	r6, #36	; 0x24
		uxArraySize = uxCurrentNumberOfTasks;
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <vTaskList+0xa4>)
	{
 8001ede:	b085      	sub	sp, #20
		uxArraySize = uxCurrentNumberOfTasks;
 8001ee0:	681a      	ldr	r2, [r3, #0]
		*pcWriteBuffer = 0x00;
 8001ee2:	7007      	strb	r7, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8001ee4:	9202      	str	r2, [sp, #8]
	{
 8001ee6:	4605      	mov	r5, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	4370      	muls	r0, r6
 8001eec:	f7ff fa82 	bl	80013f4 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	b178      	cbz	r0, 8001f14 <vTaskList+0x40>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8001ef4:	463a      	mov	r2, r7
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7ff ff88 	bl	8001e0c <uxTaskGetSystemState>
 8001efc:	9002      	str	r0, [sp, #8]
			for( x = 0; x < uxArraySize; x++ )
 8001efe:	9703      	str	r7, [sp, #12]
 8001f00:	4637      	mov	r7, r6
 8001f02:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001f80 <vTaskList+0xac>
 8001f06:	9a03      	ldr	r2, [sp, #12]
 8001f08:	9b02      	ldr	r3, [sp, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d305      	bcc.n	8001f1a <vTaskList+0x46>
			vPortFree( pxTaskStatusArray );
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff fafe 	bl	8001510 <vPortFree>
	}
 8001f14:	b005      	add	sp, #20
 8001f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8001f1a:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8001f1c:	4628      	mov	r0, r5
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8001f1e:	fb06 4303 	mla	r3, r6, r3, r4
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	bf98      	it	ls
 8001f2c:	f818 9003 	ldrbls.w	r9, [r8, r3]
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8001f30:	9b03      	ldr	r3, [sp, #12]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8001f32:	bf88      	it	hi
 8001f34:	f04f 0900 	movhi.w	r9, #0
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8001f38:	fb07 4303 	mla	r3, r7, r3, r4
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	f7ff fb1f 	bl	8001580 <prvWriteNameToBuffer>
 8001f42:	4605      	mov	r5, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8001f44:	9b03      	ldr	r3, [sp, #12]
 8001f46:	9a03      	ldr	r2, [sp, #12]
 8001f48:	9903      	ldr	r1, [sp, #12]
 8001f4a:	fb07 4202 	mla	r2, r7, r2, r4
 8001f4e:	fb07 4101 	mla	r1, r7, r1, r4
 8001f52:	6889      	ldr	r1, [r1, #8]
 8001f54:	fb07 4303 	mla	r3, r7, r3, r4
 8001f58:	9101      	str	r1, [sp, #4]
 8001f5a:	8c12      	ldrh	r2, [r2, #32]
 8001f5c:	4907      	ldr	r1, [pc, #28]	; (8001f7c <vTaskList+0xa8>)
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	464a      	mov	r2, r9
 8001f64:	f000 fbae 	bl	80026c4 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f7fe f8f1 	bl	8000150 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 8001f6e:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 8001f70:	4405      	add	r5, r0
			for( x = 0; x < uxArraySize; x++ )
 8001f72:	3301      	adds	r3, #1
 8001f74:	9303      	str	r3, [sp, #12]
 8001f76:	e7c6      	b.n	8001f06 <vTaskList+0x32>
 8001f78:	20001154 	.word	0x20001154
 8001f7c:	08003910 	.word	0x08003910
 8001f80:	080038f4 	.word	0x080038f4

08001f84 <vTaskGetRunTimeStats>:
	{
 8001f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		*pcWriteBuffer = 0x00;
 8001f88:	2700      	movs	r7, #0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8001f8a:	2424      	movs	r4, #36	; 0x24
		uxArraySize = uxCurrentNumberOfTasks;
 8001f8c:	4b26      	ldr	r3, [pc, #152]	; (8002028 <vTaskGetRunTimeStats+0xa4>)
	{
 8001f8e:	b085      	sub	sp, #20
		uxArraySize = uxCurrentNumberOfTasks;
 8001f90:	681a      	ldr	r2, [r3, #0]
		*pcWriteBuffer = 0x00;
 8001f92:	7007      	strb	r7, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8001f94:	9201      	str	r2, [sp, #4]
	{
 8001f96:	4605      	mov	r5, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	4360      	muls	r0, r4
 8001f9c:	f7ff fa2a 	bl	80013f4 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8001fa0:	4606      	mov	r6, r0
 8001fa2:	b168      	cbz	r0, 8001fc0 <vTaskGetRunTimeStats+0x3c>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8001fa4:	aa03      	add	r2, sp, #12
 8001fa6:	9901      	ldr	r1, [sp, #4]
 8001fa8:	f7ff ff30 	bl	8001e0c <uxTaskGetSystemState>
			ulTotalTime /= 100UL;
 8001fac:	2264      	movs	r2, #100	; 0x64
 8001fae:	9b03      	ldr	r3, [sp, #12]
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8001fb0:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 8001fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fb6:	9303      	str	r3, [sp, #12]
			if( ulTotalTime > 0 )
 8001fb8:	b92b      	cbnz	r3, 8001fc6 <vTaskGetRunTimeStats+0x42>
			vPortFree( pxTaskStatusArray );
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff faa8 	bl	8001510 <vPortFree>
	}
 8001fc0:	b005      	add	sp, #20
 8001fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8001fc6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800202c <vTaskGetRunTimeStats+0xa8>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8001fca:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8002030 <vTaskGetRunTimeStats+0xac>
				for( x = 0; x < uxArraySize; x++ )
 8001fce:	9702      	str	r7, [sp, #8]
 8001fd0:	9a02      	ldr	r2, [sp, #8]
 8001fd2:	9b01      	ldr	r3, [sp, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d2f0      	bcs.n	8001fba <vTaskGetRunTimeStats+0x36>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8001fd8:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8001fda:	4628      	mov	r0, r5
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8001fdc:	fb04 6303 	mla	r3, r4, r3, r6
 8001fe0:	699f      	ldr	r7, [r3, #24]
 8001fe2:	9b03      	ldr	r3, [sp, #12]
 8001fe4:	fbb7 f7f3 	udiv	r7, r7, r3
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8001fe8:	9b02      	ldr	r3, [sp, #8]
 8001fea:	fb04 6303 	mla	r3, r4, r3, r6
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	f7ff fac6 	bl	8001580 <prvWriteNameToBuffer>
 8001ff4:	4605      	mov	r5, r0
					if( ulStatsAsPercentage > 0UL )
 8001ff6:	b17f      	cbz	r7, 8002018 <vTaskGetRunTimeStats+0x94>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8001ff8:	9a02      	ldr	r2, [sp, #8]
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	fb04 6202 	mla	r2, r4, r2, r6
 8002000:	4649      	mov	r1, r9
 8002002:	6992      	ldr	r2, [r2, #24]
 8002004:	f000 fb5e 	bl	80026c4 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8002008:	4628      	mov	r0, r5
 800200a:	f7fe f8a1 	bl	8000150 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800200e:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 8002010:	4405      	add	r5, r0
				for( x = 0; x < uxArraySize; x++ )
 8002012:	3301      	adds	r3, #1
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	e7db      	b.n	8001fd0 <vTaskGetRunTimeStats+0x4c>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8002018:	9b02      	ldr	r3, [sp, #8]
 800201a:	4641      	mov	r1, r8
 800201c:	fb04 6303 	mla	r3, r4, r3, r6
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	f000 fb4f 	bl	80026c4 <siprintf>
 8002026:	e7ef      	b.n	8002008 <vTaskGetRunTimeStats+0x84>
 8002028:	20001154 	.word	0x20001154
 800202c:	08003904 	.word	0x08003904
 8002030:	080038f8 	.word	0x080038f8

08002034 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002034:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
 8002036:	4c05      	ldr	r4, [pc, #20]	; (800204c <StartDefaultTask+0x18>)
 8002038:	4620      	mov	r0, r4
 800203a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800203e:	f7fe fa0c 	bl	800045a <HAL_GPIO_TogglePin>
    osDelay(100);
 8002042:	2064      	movs	r0, #100	; 0x64
 8002044:	f7fe ffa0 	bl	8000f88 <osDelay>
 8002048:	e7f6      	b.n	8002038 <StartDefaultTask+0x4>
 800204a:	bf00      	nop
 800204c:	40011000 	.word	0x40011000

08002050 <StartSysInfoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSysInfoTask */
void StartSysInfoTask(void const * argument)
{
 8002050:	b500      	push	{lr}

  /* Infinite loop */
  for(;;)
  {
	vTaskList(run_Buf);
	printf("Task name   Status  Priority    Stack    Number \r\n");
 8002052:	4e0e      	ldr	r6, [pc, #56]	; (800208c <StartSysInfoTask+0x3c>)
	printf("%s \r\n",run_Buf);
 8002054:	4c0e      	ldr	r4, [pc, #56]	; (8002090 <StartSysInfoTask+0x40>)
    vTaskGetRunTimeStats(run_Buf);
	printf("Task name      Count      precentage \r\n");
 8002056:	4d0f      	ldr	r5, [pc, #60]	; (8002094 <StartSysInfoTask+0x44>)
{
 8002058:	b091      	sub	sp, #68	; 0x44
	vTaskList(run_Buf);
 800205a:	4668      	mov	r0, sp
 800205c:	f7ff ff3a 	bl	8001ed4 <vTaskList>
	printf("Task name   Status  Priority    Stack    Number \r\n");
 8002060:	4630      	mov	r0, r6
 8002062:	f000 fb27 	bl	80026b4 <puts>
	printf("%s \r\n",run_Buf);
 8002066:	4669      	mov	r1, sp
 8002068:	4620      	mov	r0, r4
 800206a:	f000 faaf 	bl	80025cc <iprintf>
    vTaskGetRunTimeStats(run_Buf);
 800206e:	4668      	mov	r0, sp
 8002070:	f7ff ff88 	bl	8001f84 <vTaskGetRunTimeStats>
	printf("Task name      Count      precentage \r\n");
 8002074:	4628      	mov	r0, r5
 8002076:	f000 fb1d 	bl	80026b4 <puts>
	printf("%s \r\n",run_Buf);
 800207a:	4669      	mov	r1, sp
 800207c:	4620      	mov	r0, r4
 800207e:	f000 faa5 	bl	80025cc <iprintf>
    osDelay(500);
 8002082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002086:	f7fe ff7f 	bl	8000f88 <osDelay>
 800208a:	e7e6      	b.n	800205a <StartSysInfoTask+0xa>
 800208c:	08003924 	.word	0x08003924
 8002090:	08003956 	.word	0x08003956
 8002094:	0800395c 	.word	0x0800395c

08002098 <configureTimerForRunTimeStats>:
 RunTimeCounter=0UL;
 8002098:	2200      	movs	r2, #0
 800209a:	4b01      	ldr	r3, [pc, #4]	; (80020a0 <configureTimerForRunTimeStats+0x8>)
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	4770      	bx	lr
 80020a0:	20001200 	.word	0x20001200

080020a4 <getRunTimeCounterValue>:
}
 80020a4:	4b01      	ldr	r3, [pc, #4]	; (80020ac <getRunTimeCounterValue+0x8>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20001200 	.word	0x20001200

080020b0 <PreSleepProcessing>:
 80020b0:	4770      	bx	lr

080020b2 <PostSleepProcessing>:
{
 80020b2:	4770      	bx	lr

080020b4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80020b4:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80020b6:	4c0e      	ldr	r4, [pc, #56]	; (80020f0 <MX_FREERTOS_Init+0x3c>)
void MX_FREERTOS_Init(void) {
 80020b8:	b08a      	sub	sp, #40	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80020ba:	466d      	mov	r5, sp
 80020bc:	4626      	mov	r6, r4
 80020be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80020c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c2:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020c4:	2100      	movs	r1, #0
 80020c6:	4668      	mov	r0, sp
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80020c8:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020ca:	f7fe ff44 	bl	8000f56 <osThreadCreate>
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <MX_FREERTOS_Init+0x40>)
  osThreadDef(SysInfoTask, StartSysInfoTask, osPriorityLow, 0, 128);
 80020d0:	ad05      	add	r5, sp, #20
 80020d2:	3414      	adds	r4, #20
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020d4:	6018      	str	r0, [r3, #0]
  osThreadDef(SysInfoTask, StartSysInfoTask, osPriorityLow, 0, 128);
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	6823      	ldr	r3, [r4, #0]
  SysInfoTaskHandle = osThreadCreate(osThread(SysInfoTask), NULL);
 80020dc:	2100      	movs	r1, #0
 80020de:	a805      	add	r0, sp, #20
  osThreadDef(SysInfoTask, StartSysInfoTask, osPriorityLow, 0, 128);
 80020e0:	602b      	str	r3, [r5, #0]
  SysInfoTaskHandle = osThreadCreate(osThread(SysInfoTask), NULL);
 80020e2:	f7fe ff38 	bl	8000f56 <osThreadCreate>
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <MX_FREERTOS_Init+0x44>)
 80020e8:	6018      	str	r0, [r3, #0]
}
 80020ea:	b00a      	add	sp, #40	; 0x28
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
 80020ee:	bf00      	nop
 80020f0:	080038cc 	.word	0x080038cc
 80020f4:	200011f8 	.word	0x200011f8
 80020f8:	200011fc 	.word	0x200011fc

080020fc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_GPIO_Init+0x68>)
{
 80020fe:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002100:	699a      	ldr	r2, [r3, #24]
{
 8002102:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002104:	f042 0210 	orr.w	r2, r2, #16
 8002108:	619a      	str	r2, [r3, #24]
 800210a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 800210c:	4c16      	ldr	r4, [pc, #88]	; (8002168 <MX_GPIO_Init+0x6c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210e:	f002 0210 	and.w	r2, r2, #16
 8002112:	9201      	str	r2, [sp, #4]
 8002114:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8002118:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	619a      	str	r2, [r3, #24]
 8002120:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8002122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002126:	f002 0220 	and.w	r2, r2, #32
 800212a:	9202      	str	r2, [sp, #8]
 800212c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	f042 0204 	orr.w	r2, r2, #4
 8002134:	619a      	str	r2, [r3, #24]
 8002136:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	9303      	str	r3, [sp, #12]
 8002140:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8002142:	f7fe f985 	bl	8000450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 8002146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2303      	movs	r3, #3
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 8002156:	a904      	add	r1, sp, #16
 8002158:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 800215c:	f7fe f898 	bl	8000290 <HAL_GPIO_Init>

}
 8002160:	b008      	add	sp, #32
 8002162:	bd10      	pop	{r4, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	40011000 	.word	0x40011000

0800216c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002170:	b530      	push	{r4, r5, lr}
 8002172:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002174:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002176:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002178:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800217e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002182:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002184:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002186:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002188:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800218a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800218c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800218e:	f7fe f969 	bl	8000464 <HAL_RCC_OscConfig>
 8002192:	b100      	cbz	r0, 8002196 <SystemClock_Config+0x2a>
 8002194:	e7fe      	b.n	8002194 <SystemClock_Config+0x28>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002196:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219a:	250f      	movs	r5, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800219c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021a0:	4621      	mov	r1, r4
 80021a2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a6:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021a8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021aa:	f7fe fb29 	bl	8000800 <HAL_RCC_ClockConfig>
 80021ae:	4604      	mov	r4, r0
 80021b0:	b100      	cbz	r0, 80021b4 <SystemClock_Config+0x48>
 80021b2:	e7fe      	b.n	80021b2 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Enables the Clock Security System 
    */
  HAL_RCC_EnableCSS();
 80021b4:	f7fe fae2 	bl	800077c <HAL_RCC_EnableCSS>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80021b8:	f7fe fbc6 	bl	8000948 <HAL_RCC_GetHCLKFreq>
 80021bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80021c4:	f7fe f842 	bl	800024c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80021c8:	2004      	movs	r0, #4
 80021ca:	f7fe f855 	bl	8000278 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80021ce:	4622      	mov	r2, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f04f 30ff 	mov.w	r0, #4294967295
 80021d6:	f7fd fff9 	bl	80001cc <HAL_NVIC_SetPriority>
}
 80021da:	b011      	add	sp, #68	; 0x44
 80021dc:	bd30      	pop	{r4, r5, pc}
	...

080021e0 <main>:
{
 80021e0:	b508      	push	{r3, lr}
  HAL_Init();
 80021e2:	f7fd ffbd 	bl	8000160 <HAL_Init>
  SystemClock_Config();
 80021e6:	f7ff ffc1 	bl	800216c <SystemClock_Config>
  MX_GPIO_Init();
 80021ea:	f7ff ff87 	bl	80020fc <MX_GPIO_Init>
  MX_TIM3_Init();
 80021ee:	f000 f8ef 	bl	80023d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80021f2:	f000 f941 	bl	8002478 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80021f6:	4804      	ldr	r0, [pc, #16]	; (8002208 <main+0x28>)
 80021f8:	f7fe fbfc 	bl	80009f4 <HAL_TIM_Base_Start_IT>
  MX_FREERTOS_Init();
 80021fc:	f7ff ff5a 	bl	80020b4 <MX_FREERTOS_Init>
  osKernelStart();
 8002200:	f7fe fea4 	bl	8000f4c <osKernelStart>
 8002204:	e7fe      	b.n	8002204 <main+0x24>
 8002206:	bf00      	nop
 8002208:	20001244 	.word	0x20001244

0800220c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800220c:	6802      	ldr	r2, [r0, #0]
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x24>)
{
 8002210:	b510      	push	{r4, lr}
  if (htim->Instance == TIM4) {
 8002212:	429a      	cmp	r2, r3
{
 8002214:	4604      	mov	r4, r0
  if (htim->Instance == TIM4) {
 8002216:	d101      	bne.n	800221c <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 8002218:	f7fd ffb4 	bl	8000184 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM3) {
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002220:	429a      	cmp	r2, r3
    RunTimeCounter++;
 8002222:	bf01      	itttt	eq
 8002224:	4a04      	ldreq	r2, [pc, #16]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002226:	6813      	ldreq	r3, [r2, #0]
 8002228:	3301      	addeq	r3, #1
 800222a:	6013      	streq	r3, [r2, #0]
 800222c:	bd10      	pop	{r4, pc}
 800222e:	bf00      	nop
 8002230:	40000800 	.word	0x40000800
 8002234:	40000400 	.word	0x40000400
 8002238:	20001200 	.word	0x20001200

0800223c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800223c:	e7fe      	b.n	800223c <_Error_Handler>
	...

08002240 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_MspInit+0x98>)
{
 8002242:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002244:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002246:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	619a      	str	r2, [r3, #24]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	f002 0201 	and.w	r2, r2, #1
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800225e:	61da      	str	r2, [r3, #28]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226a:	f7fd ff9d 	bl	80001a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	f06f 000b 	mvn.w	r0, #11
 8002274:	4611      	mov	r1, r2
 8002276:	f7fd ffa9 	bl	80001cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	f06f 000a 	mvn.w	r0, #10
 8002280:	4611      	mov	r1, r2
 8002282:	f7fd ffa3 	bl	80001cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	f06f 0009 	mvn.w	r0, #9
 800228c:	4611      	mov	r1, r2
 800228e:	f7fd ff9d 	bl	80001cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	f06f 0004 	mvn.w	r0, #4
 8002298:	4611      	mov	r1, r2
 800229a:	f7fd ff97 	bl	80001cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	f06f 0003 	mvn.w	r0, #3
 80022a4:	4611      	mov	r1, r2
 80022a6:	f7fd ff91 	bl	80001cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	210f      	movs	r1, #15
 80022ae:	f06f 0001 	mvn.w	r0, #1
 80022b2:	f7fd ff8b 	bl	80001cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	210f      	movs	r1, #15
 80022ba:	f04f 30ff 	mov.w	r0, #4294967295
 80022be:	f7fd ff85 	bl	80001cc <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022c2:	4a06      	ldr	r2, [pc, #24]	; (80022dc <HAL_MspInit+0x9c>)
 80022c4:	6853      	ldr	r3, [r2, #4]
 80022c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ce:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d0:	b003      	add	sp, #12
 80022d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000

080022e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80022e2:	4601      	mov	r1, r0
{
 80022e4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80022e6:	2200      	movs	r2, #0
 80022e8:	201e      	movs	r0, #30
 80022ea:	f7fd ff6f 	bl	80001cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80022ee:	201e      	movs	r0, #30
 80022f0:	f7fd ffa0 	bl	8000234 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022f6:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 80022f8:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022fa:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 80022fc:	f042 0204 	orr.w	r2, r2, #4
 8002300:	61da      	str	r2, [r3, #28]
 8002302:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002304:	4c11      	ldr	r4, [pc, #68]	; (800234c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800230e:	f7fe fb41 	bl	8000994 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002312:	f7fe fb1f 	bl	8000954 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002318:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 800231a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800231c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002320:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <HAL_InitTick+0x74>)
 8002324:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8002328:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800232a:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 800232c:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800232e:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8002330:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002332:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002334:	f7fe fd00 	bl	8000d38 <HAL_TIM_Base_Init>
 8002338:	b920      	cbnz	r0, 8002344 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800233a:	4620      	mov	r0, r4
 800233c:	f7fe fb5a 	bl	80009f4 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002340:	b008      	add	sp, #32
 8002342:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002344:	2001      	movs	r0, #1
 8002346:	e7fb      	b.n	8002340 <HAL_InitTick+0x60>
 8002348:	40021000 	.word	0x40021000
 800234c:	20001204 	.word	0x20001204
 8002350:	40000800 	.word	0x40000800
 8002354:	000f4240 	.word	0x000f4240

08002358 <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002358:	f7fe bb3c 	b.w	80009d4 <HAL_RCC_NMI_IRQHandler>

0800235c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800235c:	e7fe      	b.n	800235c <HardFault_Handler>

0800235e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800235e:	e7fe      	b.n	800235e <MemManage_Handler>

08002360 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002360:	e7fe      	b.n	8002360 <BusFault_Handler>

08002362 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002362:	e7fe      	b.n	8002362 <UsageFault_Handler>

08002364 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002364:	4770      	bx	lr

08002366 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002366:	f7fe be17 	b.w	8000f98 <osSystickHandler>
	...

0800236c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800236c:	4801      	ldr	r0, [pc, #4]	; (8002374 <TIM3_IRQHandler+0x8>)
 800236e:	f7fe bc09 	b.w	8000b84 <HAL_TIM_IRQHandler>
 8002372:	bf00      	nop
 8002374:	20001244 	.word	0x20001244

08002378 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002378:	4801      	ldr	r0, [pc, #4]	; (8002380 <TIM4_IRQHandler+0x8>)
 800237a:	f7fe bc03 	b.w	8000b84 <HAL_TIM_IRQHandler>
 800237e:	bf00      	nop
 8002380:	20001204 	.word	0x20001204

08002384 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <SystemInit+0x40>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <SystemInit+0x44>)
 8002392:	400a      	ands	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800239c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023a0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80023b0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <SystemInit+0x48>)
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	f8ff0000 	.word	0xf8ff0000
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 72-1;
 80023d2:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 80023d4:	4816      	ldr	r0, [pc, #88]	; (8002430 <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 72-1;
 80023d6:	4917      	ldr	r1, [pc, #92]	; (8002434 <MX_TIM3_Init+0x64>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100-1;
 80023d8:	2263      	movs	r2, #99	; 0x63
  htim3.Init.Prescaler = 72-1;
 80023da:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023de:	2300      	movs	r3, #0
  htim3.Init.Period = 100-1;
 80023e0:	60c2      	str	r2, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e2:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023e8:	f7fe fca6 	bl	8000d38 <HAL_TIM_Base_Init>
 80023ec:	b118      	cbz	r0, 80023f6 <MX_TIM3_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
 80023ee:	2149      	movs	r1, #73	; 0x49
 80023f0:	4811      	ldr	r0, [pc, #68]	; (8002438 <MX_TIM3_Init+0x68>)
 80023f2:	f7ff ff23 	bl	800223c <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fa:	a906      	add	r1, sp, #24
 80023fc:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <MX_TIM3_Init+0x60>)
 8002402:	f7fe fb02 	bl	8000a0a <HAL_TIM_ConfigClockSource>
 8002406:	b118      	cbz	r0, 8002410 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002408:	214f      	movs	r1, #79	; 0x4f
 800240a:	480b      	ldr	r0, [pc, #44]	; (8002438 <MX_TIM3_Init+0x68>)
 800240c:	f7ff ff16 	bl	800223c <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002410:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002412:	4669      	mov	r1, sp
 8002414:	4806      	ldr	r0, [pc, #24]	; (8002430 <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002416:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002418:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800241a:	f7fe fca7 	bl	8000d6c <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	b118      	cbz	r0, 8002428 <MX_TIM3_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002420:	2156      	movs	r1, #86	; 0x56
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_TIM3_Init+0x68>)
 8002424:	f7ff ff0a 	bl	800223c <_Error_Handler>
  }

}
 8002428:	b007      	add	sp, #28
 800242a:	f85d fb04 	ldr.w	pc, [sp], #4
 800242e:	bf00      	nop
 8002430:	20001244 	.word	0x20001244
 8002434:	40000400 	.word	0x40000400
 8002438:	080039b3 	.word	0x080039b3

0800243c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800243c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_TIM_Base_MspInit+0x38>)
 8002440:	6802      	ldr	r2, [r0, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d112      	bne.n	800246c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002446:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800244a:	69da      	ldr	r2, [r3, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800244c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800244e:	f042 0202 	orr.w	r2, r2, #2
 8002452:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002456:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002458:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002462:	f7fd feb3 	bl	80001cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002466:	201d      	movs	r0, #29
 8002468:	f7fd fee4 	bl	8000234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800246c:	b003      	add	sp, #12
 800246e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002472:	bf00      	nop
 8002474:	40000400 	.word	0x40000400

08002478 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002478:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800247a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002482:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002484:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002488:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800248a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800248e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002490:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002494:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002496:	f7fe fd2b 	bl	8000ef0 <HAL_UART_Init>
 800249a:	b128      	cbz	r0, 80024a8 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800249c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80024a0:	214c      	movs	r1, #76	; 0x4c
 80024a2:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_USART1_UART_Init+0x3c>)
 80024a4:	f7ff beca 	b.w	800223c <_Error_Handler>
 80024a8:	bd08      	pop	{r3, pc}
 80024aa:	bf00      	nop
 80024ac:	20001284 	.word	0x20001284
 80024b0:	40013800 	.word	0x40013800
 80024b4:	080039c0 	.word	0x080039c0

080024b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 80024ba:	6802      	ldr	r2, [r0, #0]
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_UART_MspInit+0x50>)
 80024be:	429a      	cmp	r2, r3
 80024c0:	d11f      	bne.n	8002502 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80024c6:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	480e      	ldr	r0, [pc, #56]	; (800250c <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f7fd fed1 	bl	8000290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	a902      	add	r1, sp, #8
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f7fd fec7 	bl	8000290 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002502:	b007      	add	sp, #28
 8002504:	f85d fb04 	ldr.w	pc, [sp], #4
 8002508:	40013800 	.word	0x40013800
 800250c:	40010800 	.word	0x40010800

08002510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002510:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002512:	e003      	b.n	800251c <LoopCopyDataInit>

08002514 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002516:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002518:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800251a:	3104      	adds	r1, #4

0800251c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800251c:	480a      	ldr	r0, [pc, #40]	; (8002548 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002520:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002522:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002524:	d3f6      	bcc.n	8002514 <CopyDataInit>
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002528:	e002      	b.n	8002530 <LoopFillZerobss>

0800252a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800252c:	f842 3b04 	str.w	r3, [r2], #4

08002530 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002532:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002534:	d3f9      	bcc.n	800252a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002536:	f7ff ff25 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800253a:	f000 f80f 	bl	800255c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800253e:	f7ff fe4f 	bl	80021e0 <main>
  bx lr
 8002542:	4770      	bx	lr
  ldr r3, =_sidata
 8002544:	08003a70 	.word	0x08003a70
  ldr r0, =_sdata
 8002548:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800254c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002550:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002554:	200012c8 	.word	0x200012c8

08002558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC1_2_IRQHandler>
	...

0800255c <__libc_init_array>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	2500      	movs	r5, #0
 8002560:	4e0c      	ldr	r6, [pc, #48]	; (8002594 <__libc_init_array+0x38>)
 8002562:	4c0d      	ldr	r4, [pc, #52]	; (8002598 <__libc_init_array+0x3c>)
 8002564:	1ba4      	subs	r4, r4, r6
 8002566:	10a4      	asrs	r4, r4, #2
 8002568:	42a5      	cmp	r5, r4
 800256a:	d109      	bne.n	8002580 <__libc_init_array+0x24>
 800256c:	f001 f99a 	bl	80038a4 <_init>
 8002570:	2500      	movs	r5, #0
 8002572:	4e0a      	ldr	r6, [pc, #40]	; (800259c <__libc_init_array+0x40>)
 8002574:	4c0a      	ldr	r4, [pc, #40]	; (80025a0 <__libc_init_array+0x44>)
 8002576:	1ba4      	subs	r4, r4, r6
 8002578:	10a4      	asrs	r4, r4, #2
 800257a:	42a5      	cmp	r5, r4
 800257c:	d105      	bne.n	800258a <__libc_init_array+0x2e>
 800257e:	bd70      	pop	{r4, r5, r6, pc}
 8002580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002584:	4798      	blx	r3
 8002586:	3501      	adds	r5, #1
 8002588:	e7ee      	b.n	8002568 <__libc_init_array+0xc>
 800258a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800258e:	4798      	blx	r3
 8002590:	3501      	adds	r5, #1
 8002592:	e7f2      	b.n	800257a <__libc_init_array+0x1e>
 8002594:	08003a68 	.word	0x08003a68
 8002598:	08003a68 	.word	0x08003a68
 800259c:	08003a68 	.word	0x08003a68
 80025a0:	08003a6c 	.word	0x08003a6c

080025a4 <memcpy>:
 80025a4:	b510      	push	{r4, lr}
 80025a6:	1e43      	subs	r3, r0, #1
 80025a8:	440a      	add	r2, r1
 80025aa:	4291      	cmp	r1, r2
 80025ac:	d100      	bne.n	80025b0 <memcpy+0xc>
 80025ae:	bd10      	pop	{r4, pc}
 80025b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025b8:	e7f7      	b.n	80025aa <memcpy+0x6>

080025ba <memset>:
 80025ba:	4603      	mov	r3, r0
 80025bc:	4402      	add	r2, r0
 80025be:	4293      	cmp	r3, r2
 80025c0:	d100      	bne.n	80025c4 <memset+0xa>
 80025c2:	4770      	bx	lr
 80025c4:	f803 1b01 	strb.w	r1, [r3], #1
 80025c8:	e7f9      	b.n	80025be <memset+0x4>
	...

080025cc <iprintf>:
 80025cc:	b40f      	push	{r0, r1, r2, r3}
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <iprintf+0x2c>)
 80025d0:	b513      	push	{r0, r1, r4, lr}
 80025d2:	681c      	ldr	r4, [r3, #0]
 80025d4:	b124      	cbz	r4, 80025e0 <iprintf+0x14>
 80025d6:	69a3      	ldr	r3, [r4, #24]
 80025d8:	b913      	cbnz	r3, 80025e0 <iprintf+0x14>
 80025da:	4620      	mov	r0, r4
 80025dc:	f000 fa50 	bl	8002a80 <__sinit>
 80025e0:	ab05      	add	r3, sp, #20
 80025e2:	9a04      	ldr	r2, [sp, #16]
 80025e4:	68a1      	ldr	r1, [r4, #8]
 80025e6:	4620      	mov	r0, r4
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	f000 fd59 	bl	80030a0 <_vfiprintf_r>
 80025ee:	b002      	add	sp, #8
 80025f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f4:	b004      	add	sp, #16
 80025f6:	4770      	bx	lr
 80025f8:	2000000c 	.word	0x2000000c

080025fc <_puts_r>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	460e      	mov	r6, r1
 8002600:	4605      	mov	r5, r0
 8002602:	b118      	cbz	r0, 800260c <_puts_r+0x10>
 8002604:	6983      	ldr	r3, [r0, #24]
 8002606:	b90b      	cbnz	r3, 800260c <_puts_r+0x10>
 8002608:	f000 fa3a 	bl	8002a80 <__sinit>
 800260c:	69ab      	ldr	r3, [r5, #24]
 800260e:	68ac      	ldr	r4, [r5, #8]
 8002610:	b913      	cbnz	r3, 8002618 <_puts_r+0x1c>
 8002612:	4628      	mov	r0, r5
 8002614:	f000 fa34 	bl	8002a80 <__sinit>
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <_puts_r+0xac>)
 800261a:	429c      	cmp	r4, r3
 800261c:	d117      	bne.n	800264e <_puts_r+0x52>
 800261e:	686c      	ldr	r4, [r5, #4]
 8002620:	89a3      	ldrh	r3, [r4, #12]
 8002622:	071b      	lsls	r3, r3, #28
 8002624:	d51d      	bpl.n	8002662 <_puts_r+0x66>
 8002626:	6923      	ldr	r3, [r4, #16]
 8002628:	b1db      	cbz	r3, 8002662 <_puts_r+0x66>
 800262a:	3e01      	subs	r6, #1
 800262c:	68a3      	ldr	r3, [r4, #8]
 800262e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002632:	3b01      	subs	r3, #1
 8002634:	60a3      	str	r3, [r4, #8]
 8002636:	b9e9      	cbnz	r1, 8002674 <_puts_r+0x78>
 8002638:	2b00      	cmp	r3, #0
 800263a:	da2e      	bge.n	800269a <_puts_r+0x9e>
 800263c:	4622      	mov	r2, r4
 800263e:	210a      	movs	r1, #10
 8002640:	4628      	mov	r0, r5
 8002642:	f000 f86b 	bl	800271c <__swbuf_r>
 8002646:	3001      	adds	r0, #1
 8002648:	d011      	beq.n	800266e <_puts_r+0x72>
 800264a:	200a      	movs	r0, #10
 800264c:	bd70      	pop	{r4, r5, r6, pc}
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <_puts_r+0xb0>)
 8002650:	429c      	cmp	r4, r3
 8002652:	d101      	bne.n	8002658 <_puts_r+0x5c>
 8002654:	68ac      	ldr	r4, [r5, #8]
 8002656:	e7e3      	b.n	8002620 <_puts_r+0x24>
 8002658:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <_puts_r+0xb4>)
 800265a:	429c      	cmp	r4, r3
 800265c:	bf08      	it	eq
 800265e:	68ec      	ldreq	r4, [r5, #12]
 8002660:	e7de      	b.n	8002620 <_puts_r+0x24>
 8002662:	4621      	mov	r1, r4
 8002664:	4628      	mov	r0, r5
 8002666:	f000 f8ab 	bl	80027c0 <__swsetup_r>
 800266a:	2800      	cmp	r0, #0
 800266c:	d0dd      	beq.n	800262a <_puts_r+0x2e>
 800266e:	f04f 30ff 	mov.w	r0, #4294967295
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	2b00      	cmp	r3, #0
 8002676:	da04      	bge.n	8002682 <_puts_r+0x86>
 8002678:	69a2      	ldr	r2, [r4, #24]
 800267a:	4293      	cmp	r3, r2
 800267c:	db06      	blt.n	800268c <_puts_r+0x90>
 800267e:	290a      	cmp	r1, #10
 8002680:	d004      	beq.n	800268c <_puts_r+0x90>
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	6022      	str	r2, [r4, #0]
 8002688:	7019      	strb	r1, [r3, #0]
 800268a:	e7cf      	b.n	800262c <_puts_r+0x30>
 800268c:	4622      	mov	r2, r4
 800268e:	4628      	mov	r0, r5
 8002690:	f000 f844 	bl	800271c <__swbuf_r>
 8002694:	3001      	adds	r0, #1
 8002696:	d1c9      	bne.n	800262c <_puts_r+0x30>
 8002698:	e7e9      	b.n	800266e <_puts_r+0x72>
 800269a:	200a      	movs	r0, #10
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	6022      	str	r2, [r4, #0]
 80026a2:	7018      	strb	r0, [r3, #0]
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
 80026a6:	bf00      	nop
 80026a8:	080039f0 	.word	0x080039f0
 80026ac:	08003a10 	.word	0x08003a10
 80026b0:	080039d0 	.word	0x080039d0

080026b4 <puts>:
 80026b4:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <puts+0xc>)
 80026b6:	4601      	mov	r1, r0
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	f7ff bf9f 	b.w	80025fc <_puts_r>
 80026be:	bf00      	nop
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <siprintf>:
 80026c4:	b40e      	push	{r1, r2, r3}
 80026c6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80026ca:	b500      	push	{lr}
 80026cc:	b09c      	sub	sp, #112	; 0x70
 80026ce:	f8ad 1014 	strh.w	r1, [sp, #20]
 80026d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026d6:	9104      	str	r1, [sp, #16]
 80026d8:	9107      	str	r1, [sp, #28]
 80026da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026de:	ab1d      	add	r3, sp, #116	; 0x74
 80026e0:	9002      	str	r0, [sp, #8]
 80026e2:	9006      	str	r0, [sp, #24]
 80026e4:	4808      	ldr	r0, [pc, #32]	; (8002708 <siprintf+0x44>)
 80026e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80026ea:	f8ad 1016 	strh.w	r1, [sp, #22]
 80026ee:	6800      	ldr	r0, [r0, #0]
 80026f0:	a902      	add	r1, sp, #8
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	f000 fbb8 	bl	8002e68 <_svfiprintf_r>
 80026f8:	2200      	movs	r2, #0
 80026fa:	9b02      	ldr	r3, [sp, #8]
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	b01c      	add	sp, #112	; 0x70
 8002700:	f85d eb04 	ldr.w	lr, [sp], #4
 8002704:	b003      	add	sp, #12
 8002706:	4770      	bx	lr
 8002708:	2000000c 	.word	0x2000000c

0800270c <strcpy>:
 800270c:	4603      	mov	r3, r0
 800270e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002712:	f803 2b01 	strb.w	r2, [r3], #1
 8002716:	2a00      	cmp	r2, #0
 8002718:	d1f9      	bne.n	800270e <strcpy+0x2>
 800271a:	4770      	bx	lr

0800271c <__swbuf_r>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	460e      	mov	r6, r1
 8002720:	4614      	mov	r4, r2
 8002722:	4605      	mov	r5, r0
 8002724:	b118      	cbz	r0, 800272e <__swbuf_r+0x12>
 8002726:	6983      	ldr	r3, [r0, #24]
 8002728:	b90b      	cbnz	r3, 800272e <__swbuf_r+0x12>
 800272a:	f000 f9a9 	bl	8002a80 <__sinit>
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <__swbuf_r+0x98>)
 8002730:	429c      	cmp	r4, r3
 8002732:	d12a      	bne.n	800278a <__swbuf_r+0x6e>
 8002734:	686c      	ldr	r4, [r5, #4]
 8002736:	69a3      	ldr	r3, [r4, #24]
 8002738:	60a3      	str	r3, [r4, #8]
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	071a      	lsls	r2, r3, #28
 800273e:	d52e      	bpl.n	800279e <__swbuf_r+0x82>
 8002740:	6923      	ldr	r3, [r4, #16]
 8002742:	b363      	cbz	r3, 800279e <__swbuf_r+0x82>
 8002744:	6923      	ldr	r3, [r4, #16]
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	b2f6      	uxtb	r6, r6
 800274a:	1ac0      	subs	r0, r0, r3
 800274c:	6963      	ldr	r3, [r4, #20]
 800274e:	4637      	mov	r7, r6
 8002750:	4298      	cmp	r0, r3
 8002752:	db04      	blt.n	800275e <__swbuf_r+0x42>
 8002754:	4621      	mov	r1, r4
 8002756:	4628      	mov	r0, r5
 8002758:	f000 f928 	bl	80029ac <_fflush_r>
 800275c:	bb28      	cbnz	r0, 80027aa <__swbuf_r+0x8e>
 800275e:	68a3      	ldr	r3, [r4, #8]
 8002760:	3001      	adds	r0, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	60a3      	str	r3, [r4, #8]
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	6022      	str	r2, [r4, #0]
 800276c:	701e      	strb	r6, [r3, #0]
 800276e:	6963      	ldr	r3, [r4, #20]
 8002770:	4298      	cmp	r0, r3
 8002772:	d004      	beq.n	800277e <__swbuf_r+0x62>
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	07db      	lsls	r3, r3, #31
 8002778:	d519      	bpl.n	80027ae <__swbuf_r+0x92>
 800277a:	2e0a      	cmp	r6, #10
 800277c:	d117      	bne.n	80027ae <__swbuf_r+0x92>
 800277e:	4621      	mov	r1, r4
 8002780:	4628      	mov	r0, r5
 8002782:	f000 f913 	bl	80029ac <_fflush_r>
 8002786:	b190      	cbz	r0, 80027ae <__swbuf_r+0x92>
 8002788:	e00f      	b.n	80027aa <__swbuf_r+0x8e>
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <__swbuf_r+0x9c>)
 800278c:	429c      	cmp	r4, r3
 800278e:	d101      	bne.n	8002794 <__swbuf_r+0x78>
 8002790:	68ac      	ldr	r4, [r5, #8]
 8002792:	e7d0      	b.n	8002736 <__swbuf_r+0x1a>
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <__swbuf_r+0xa0>)
 8002796:	429c      	cmp	r4, r3
 8002798:	bf08      	it	eq
 800279a:	68ec      	ldreq	r4, [r5, #12]
 800279c:	e7cb      	b.n	8002736 <__swbuf_r+0x1a>
 800279e:	4621      	mov	r1, r4
 80027a0:	4628      	mov	r0, r5
 80027a2:	f000 f80d 	bl	80027c0 <__swsetup_r>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d0cc      	beq.n	8002744 <__swbuf_r+0x28>
 80027aa:	f04f 37ff 	mov.w	r7, #4294967295
 80027ae:	4638      	mov	r0, r7
 80027b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	080039f0 	.word	0x080039f0
 80027b8:	08003a10 	.word	0x08003a10
 80027bc:	080039d0 	.word	0x080039d0

080027c0 <__swsetup_r>:
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <__swsetup_r+0xcc>)
 80027c2:	b570      	push	{r4, r5, r6, lr}
 80027c4:	681d      	ldr	r5, [r3, #0]
 80027c6:	4606      	mov	r6, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	b125      	cbz	r5, 80027d6 <__swsetup_r+0x16>
 80027cc:	69ab      	ldr	r3, [r5, #24]
 80027ce:	b913      	cbnz	r3, 80027d6 <__swsetup_r+0x16>
 80027d0:	4628      	mov	r0, r5
 80027d2:	f000 f955 	bl	8002a80 <__sinit>
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <__swsetup_r+0xd0>)
 80027d8:	429c      	cmp	r4, r3
 80027da:	d10f      	bne.n	80027fc <__swsetup_r+0x3c>
 80027dc:	686c      	ldr	r4, [r5, #4]
 80027de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	0715      	lsls	r5, r2, #28
 80027e6:	d42c      	bmi.n	8002842 <__swsetup_r+0x82>
 80027e8:	06d0      	lsls	r0, r2, #27
 80027ea:	d411      	bmi.n	8002810 <__swsetup_r+0x50>
 80027ec:	2209      	movs	r2, #9
 80027ee:	6032      	str	r2, [r6, #0]
 80027f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f4:	81a3      	strh	r3, [r4, #12]
 80027f6:	f04f 30ff 	mov.w	r0, #4294967295
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <__swsetup_r+0xd4>)
 80027fe:	429c      	cmp	r4, r3
 8002800:	d101      	bne.n	8002806 <__swsetup_r+0x46>
 8002802:	68ac      	ldr	r4, [r5, #8]
 8002804:	e7eb      	b.n	80027de <__swsetup_r+0x1e>
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <__swsetup_r+0xd8>)
 8002808:	429c      	cmp	r4, r3
 800280a:	bf08      	it	eq
 800280c:	68ec      	ldreq	r4, [r5, #12]
 800280e:	e7e6      	b.n	80027de <__swsetup_r+0x1e>
 8002810:	0751      	lsls	r1, r2, #29
 8002812:	d512      	bpl.n	800283a <__swsetup_r+0x7a>
 8002814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002816:	b141      	cbz	r1, 800282a <__swsetup_r+0x6a>
 8002818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800281c:	4299      	cmp	r1, r3
 800281e:	d002      	beq.n	8002826 <__swsetup_r+0x66>
 8002820:	4630      	mov	r0, r6
 8002822:	f000 fa1b 	bl	8002c5c <_free_r>
 8002826:	2300      	movs	r3, #0
 8002828:	6363      	str	r3, [r4, #52]	; 0x34
 800282a:	89a3      	ldrh	r3, [r4, #12]
 800282c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002830:	81a3      	strh	r3, [r4, #12]
 8002832:	2300      	movs	r3, #0
 8002834:	6063      	str	r3, [r4, #4]
 8002836:	6923      	ldr	r3, [r4, #16]
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	f043 0308 	orr.w	r3, r3, #8
 8002840:	81a3      	strh	r3, [r4, #12]
 8002842:	6923      	ldr	r3, [r4, #16]
 8002844:	b94b      	cbnz	r3, 800285a <__swsetup_r+0x9a>
 8002846:	89a3      	ldrh	r3, [r4, #12]
 8002848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800284c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002850:	d003      	beq.n	800285a <__swsetup_r+0x9a>
 8002852:	4621      	mov	r1, r4
 8002854:	4630      	mov	r0, r6
 8002856:	f000 f9c1 	bl	8002bdc <__smakebuf_r>
 800285a:	89a2      	ldrh	r2, [r4, #12]
 800285c:	f012 0301 	ands.w	r3, r2, #1
 8002860:	d00c      	beq.n	800287c <__swsetup_r+0xbc>
 8002862:	2300      	movs	r3, #0
 8002864:	60a3      	str	r3, [r4, #8]
 8002866:	6963      	ldr	r3, [r4, #20]
 8002868:	425b      	negs	r3, r3
 800286a:	61a3      	str	r3, [r4, #24]
 800286c:	6923      	ldr	r3, [r4, #16]
 800286e:	b953      	cbnz	r3, 8002886 <__swsetup_r+0xc6>
 8002870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002874:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002878:	d1ba      	bne.n	80027f0 <__swsetup_r+0x30>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	0792      	lsls	r2, r2, #30
 800287e:	bf58      	it	pl
 8002880:	6963      	ldrpl	r3, [r4, #20]
 8002882:	60a3      	str	r3, [r4, #8]
 8002884:	e7f2      	b.n	800286c <__swsetup_r+0xac>
 8002886:	2000      	movs	r0, #0
 8002888:	e7f7      	b.n	800287a <__swsetup_r+0xba>
 800288a:	bf00      	nop
 800288c:	2000000c 	.word	0x2000000c
 8002890:	080039f0 	.word	0x080039f0
 8002894:	08003a10 	.word	0x08003a10
 8002898:	080039d0 	.word	0x080039d0

0800289c <__sflush_r>:
 800289c:	898a      	ldrh	r2, [r1, #12]
 800289e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a2:	4605      	mov	r5, r0
 80028a4:	0710      	lsls	r0, r2, #28
 80028a6:	460c      	mov	r4, r1
 80028a8:	d45a      	bmi.n	8002960 <__sflush_r+0xc4>
 80028aa:	684b      	ldr	r3, [r1, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	dc05      	bgt.n	80028bc <__sflush_r+0x20>
 80028b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	dc02      	bgt.n	80028bc <__sflush_r+0x20>
 80028b6:	2000      	movs	r0, #0
 80028b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028be:	2e00      	cmp	r6, #0
 80028c0:	d0f9      	beq.n	80028b6 <__sflush_r+0x1a>
 80028c2:	2300      	movs	r3, #0
 80028c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028c8:	682f      	ldr	r7, [r5, #0]
 80028ca:	602b      	str	r3, [r5, #0]
 80028cc:	d033      	beq.n	8002936 <__sflush_r+0x9a>
 80028ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	075a      	lsls	r2, r3, #29
 80028d4:	d505      	bpl.n	80028e2 <__sflush_r+0x46>
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	1ac0      	subs	r0, r0, r3
 80028da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028dc:	b10b      	cbz	r3, 80028e2 <__sflush_r+0x46>
 80028de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028e0:	1ac0      	subs	r0, r0, r3
 80028e2:	2300      	movs	r3, #0
 80028e4:	4602      	mov	r2, r0
 80028e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028e8:	6a21      	ldr	r1, [r4, #32]
 80028ea:	4628      	mov	r0, r5
 80028ec:	47b0      	blx	r6
 80028ee:	1c43      	adds	r3, r0, #1
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	d106      	bne.n	8002902 <__sflush_r+0x66>
 80028f4:	6829      	ldr	r1, [r5, #0]
 80028f6:	291d      	cmp	r1, #29
 80028f8:	d84b      	bhi.n	8002992 <__sflush_r+0xf6>
 80028fa:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <__sflush_r+0x10c>)
 80028fc:	40ca      	lsrs	r2, r1
 80028fe:	07d6      	lsls	r6, r2, #31
 8002900:	d547      	bpl.n	8002992 <__sflush_r+0xf6>
 8002902:	2200      	movs	r2, #0
 8002904:	6062      	str	r2, [r4, #4]
 8002906:	6922      	ldr	r2, [r4, #16]
 8002908:	04d9      	lsls	r1, r3, #19
 800290a:	6022      	str	r2, [r4, #0]
 800290c:	d504      	bpl.n	8002918 <__sflush_r+0x7c>
 800290e:	1c42      	adds	r2, r0, #1
 8002910:	d101      	bne.n	8002916 <__sflush_r+0x7a>
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	b903      	cbnz	r3, 8002918 <__sflush_r+0x7c>
 8002916:	6560      	str	r0, [r4, #84]	; 0x54
 8002918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800291a:	602f      	str	r7, [r5, #0]
 800291c:	2900      	cmp	r1, #0
 800291e:	d0ca      	beq.n	80028b6 <__sflush_r+0x1a>
 8002920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002924:	4299      	cmp	r1, r3
 8002926:	d002      	beq.n	800292e <__sflush_r+0x92>
 8002928:	4628      	mov	r0, r5
 800292a:	f000 f997 	bl	8002c5c <_free_r>
 800292e:	2000      	movs	r0, #0
 8002930:	6360      	str	r0, [r4, #52]	; 0x34
 8002932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002936:	6a21      	ldr	r1, [r4, #32]
 8002938:	2301      	movs	r3, #1
 800293a:	4628      	mov	r0, r5
 800293c:	47b0      	blx	r6
 800293e:	1c41      	adds	r1, r0, #1
 8002940:	d1c6      	bne.n	80028d0 <__sflush_r+0x34>
 8002942:	682b      	ldr	r3, [r5, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0c3      	beq.n	80028d0 <__sflush_r+0x34>
 8002948:	2b1d      	cmp	r3, #29
 800294a:	d001      	beq.n	8002950 <__sflush_r+0xb4>
 800294c:	2b16      	cmp	r3, #22
 800294e:	d101      	bne.n	8002954 <__sflush_r+0xb8>
 8002950:	602f      	str	r7, [r5, #0]
 8002952:	e7b0      	b.n	80028b6 <__sflush_r+0x1a>
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295a:	81a3      	strh	r3, [r4, #12]
 800295c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002960:	690f      	ldr	r7, [r1, #16]
 8002962:	2f00      	cmp	r7, #0
 8002964:	d0a7      	beq.n	80028b6 <__sflush_r+0x1a>
 8002966:	0793      	lsls	r3, r2, #30
 8002968:	bf18      	it	ne
 800296a:	2300      	movne	r3, #0
 800296c:	680e      	ldr	r6, [r1, #0]
 800296e:	bf08      	it	eq
 8002970:	694b      	ldreq	r3, [r1, #20]
 8002972:	eba6 0807 	sub.w	r8, r6, r7
 8002976:	600f      	str	r7, [r1, #0]
 8002978:	608b      	str	r3, [r1, #8]
 800297a:	f1b8 0f00 	cmp.w	r8, #0
 800297e:	dd9a      	ble.n	80028b6 <__sflush_r+0x1a>
 8002980:	4643      	mov	r3, r8
 8002982:	463a      	mov	r2, r7
 8002984:	6a21      	ldr	r1, [r4, #32]
 8002986:	4628      	mov	r0, r5
 8002988:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800298a:	47b0      	blx	r6
 800298c:	2800      	cmp	r0, #0
 800298e:	dc07      	bgt.n	80029a0 <__sflush_r+0x104>
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002996:	81a3      	strh	r3, [r4, #12]
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029a0:	4407      	add	r7, r0
 80029a2:	eba8 0800 	sub.w	r8, r8, r0
 80029a6:	e7e8      	b.n	800297a <__sflush_r+0xde>
 80029a8:	20400001 	.word	0x20400001

080029ac <_fflush_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	690b      	ldr	r3, [r1, #16]
 80029b0:	4605      	mov	r5, r0
 80029b2:	460c      	mov	r4, r1
 80029b4:	b1db      	cbz	r3, 80029ee <_fflush_r+0x42>
 80029b6:	b118      	cbz	r0, 80029c0 <_fflush_r+0x14>
 80029b8:	6983      	ldr	r3, [r0, #24]
 80029ba:	b90b      	cbnz	r3, 80029c0 <_fflush_r+0x14>
 80029bc:	f000 f860 	bl	8002a80 <__sinit>
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <_fflush_r+0x48>)
 80029c2:	429c      	cmp	r4, r3
 80029c4:	d109      	bne.n	80029da <_fflush_r+0x2e>
 80029c6:	686c      	ldr	r4, [r5, #4]
 80029c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029cc:	b17b      	cbz	r3, 80029ee <_fflush_r+0x42>
 80029ce:	4621      	mov	r1, r4
 80029d0:	4628      	mov	r0, r5
 80029d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029d6:	f7ff bf61 	b.w	800289c <__sflush_r>
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <_fflush_r+0x4c>)
 80029dc:	429c      	cmp	r4, r3
 80029de:	d101      	bne.n	80029e4 <_fflush_r+0x38>
 80029e0:	68ac      	ldr	r4, [r5, #8]
 80029e2:	e7f1      	b.n	80029c8 <_fflush_r+0x1c>
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <_fflush_r+0x50>)
 80029e6:	429c      	cmp	r4, r3
 80029e8:	bf08      	it	eq
 80029ea:	68ec      	ldreq	r4, [r5, #12]
 80029ec:	e7ec      	b.n	80029c8 <_fflush_r+0x1c>
 80029ee:	2000      	movs	r0, #0
 80029f0:	bd38      	pop	{r3, r4, r5, pc}
 80029f2:	bf00      	nop
 80029f4:	080039f0 	.word	0x080039f0
 80029f8:	08003a10 	.word	0x08003a10
 80029fc:	080039d0 	.word	0x080039d0

08002a00 <_cleanup_r>:
 8002a00:	4901      	ldr	r1, [pc, #4]	; (8002a08 <_cleanup_r+0x8>)
 8002a02:	f000 b8a9 	b.w	8002b58 <_fwalk_reent>
 8002a06:	bf00      	nop
 8002a08:	080029ad 	.word	0x080029ad

08002a0c <std.isra.0>:
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	b510      	push	{r4, lr}
 8002a10:	4604      	mov	r4, r0
 8002a12:	6003      	str	r3, [r0, #0]
 8002a14:	6043      	str	r3, [r0, #4]
 8002a16:	6083      	str	r3, [r0, #8]
 8002a18:	8181      	strh	r1, [r0, #12]
 8002a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a1c:	81c2      	strh	r2, [r0, #14]
 8002a1e:	6103      	str	r3, [r0, #16]
 8002a20:	6143      	str	r3, [r0, #20]
 8002a22:	6183      	str	r3, [r0, #24]
 8002a24:	4619      	mov	r1, r3
 8002a26:	2208      	movs	r2, #8
 8002a28:	305c      	adds	r0, #92	; 0x5c
 8002a2a:	f7ff fdc6 	bl	80025ba <memset>
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <std.isra.0+0x38>)
 8002a30:	6224      	str	r4, [r4, #32]
 8002a32:	6263      	str	r3, [r4, #36]	; 0x24
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <std.isra.0+0x3c>)
 8002a36:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <std.isra.0+0x40>)
 8002a3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <std.isra.0+0x44>)
 8002a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8002a40:	bd10      	pop	{r4, pc}
 8002a42:	bf00      	nop
 8002a44:	0800361d 	.word	0x0800361d
 8002a48:	0800363f 	.word	0x0800363f
 8002a4c:	08003677 	.word	0x08003677
 8002a50:	0800369b 	.word	0x0800369b

08002a54 <__sfmoreglue>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	2568      	movs	r5, #104	; 0x68
 8002a58:	1e4a      	subs	r2, r1, #1
 8002a5a:	4355      	muls	r5, r2
 8002a5c:	460e      	mov	r6, r1
 8002a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a62:	f000 f947 	bl	8002cf4 <_malloc_r>
 8002a66:	4604      	mov	r4, r0
 8002a68:	b140      	cbz	r0, 8002a7c <__sfmoreglue+0x28>
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002a70:	300c      	adds	r0, #12
 8002a72:	60a0      	str	r0, [r4, #8]
 8002a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a78:	f7ff fd9f 	bl	80025ba <memset>
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}

08002a80 <__sinit>:
 8002a80:	6983      	ldr	r3, [r0, #24]
 8002a82:	b510      	push	{r4, lr}
 8002a84:	4604      	mov	r4, r0
 8002a86:	bb33      	cbnz	r3, 8002ad6 <__sinit+0x56>
 8002a88:	6483      	str	r3, [r0, #72]	; 0x48
 8002a8a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002a8c:	6503      	str	r3, [r0, #80]	; 0x50
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <__sinit+0x58>)
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <__sinit+0x5c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6282      	str	r2, [r0, #40]	; 0x28
 8002a96:	4298      	cmp	r0, r3
 8002a98:	bf04      	itt	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	6183      	streq	r3, [r0, #24]
 8002a9e:	f000 f81f 	bl	8002ae0 <__sfp>
 8002aa2:	6060      	str	r0, [r4, #4]
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f000 f81b 	bl	8002ae0 <__sfp>
 8002aaa:	60a0      	str	r0, [r4, #8]
 8002aac:	4620      	mov	r0, r4
 8002aae:	f000 f817 	bl	8002ae0 <__sfp>
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60e0      	str	r0, [r4, #12]
 8002ab6:	2104      	movs	r1, #4
 8002ab8:	6860      	ldr	r0, [r4, #4]
 8002aba:	f7ff ffa7 	bl	8002a0c <std.isra.0>
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2109      	movs	r1, #9
 8002ac2:	68a0      	ldr	r0, [r4, #8]
 8002ac4:	f7ff ffa2 	bl	8002a0c <std.isra.0>
 8002ac8:	2202      	movs	r2, #2
 8002aca:	2112      	movs	r1, #18
 8002acc:	68e0      	ldr	r0, [r4, #12]
 8002ace:	f7ff ff9d 	bl	8002a0c <std.isra.0>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	61a3      	str	r3, [r4, #24]
 8002ad6:	bd10      	pop	{r4, pc}
 8002ad8:	08003a30 	.word	0x08003a30
 8002adc:	08002a01 	.word	0x08002a01

08002ae0 <__sfp>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <__sfp+0x74>)
 8002ae4:	4607      	mov	r7, r0
 8002ae6:	681e      	ldr	r6, [r3, #0]
 8002ae8:	69b3      	ldr	r3, [r6, #24]
 8002aea:	b913      	cbnz	r3, 8002af2 <__sfp+0x12>
 8002aec:	4630      	mov	r0, r6
 8002aee:	f7ff ffc7 	bl	8002a80 <__sinit>
 8002af2:	3648      	adds	r6, #72	; 0x48
 8002af4:	68b4      	ldr	r4, [r6, #8]
 8002af6:	6873      	ldr	r3, [r6, #4]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	d503      	bpl.n	8002b04 <__sfp+0x24>
 8002afc:	6833      	ldr	r3, [r6, #0]
 8002afe:	b133      	cbz	r3, 8002b0e <__sfp+0x2e>
 8002b00:	6836      	ldr	r6, [r6, #0]
 8002b02:	e7f7      	b.n	8002af4 <__sfp+0x14>
 8002b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b08:	b16d      	cbz	r5, 8002b26 <__sfp+0x46>
 8002b0a:	3468      	adds	r4, #104	; 0x68
 8002b0c:	e7f4      	b.n	8002af8 <__sfp+0x18>
 8002b0e:	2104      	movs	r1, #4
 8002b10:	4638      	mov	r0, r7
 8002b12:	f7ff ff9f 	bl	8002a54 <__sfmoreglue>
 8002b16:	6030      	str	r0, [r6, #0]
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d1f1      	bne.n	8002b00 <__sfp+0x20>
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	4604      	mov	r4, r0
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	4620      	mov	r0, r4
 8002b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2a:	81e3      	strh	r3, [r4, #14]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	6665      	str	r5, [r4, #100]	; 0x64
 8002b30:	81a3      	strh	r3, [r4, #12]
 8002b32:	6025      	str	r5, [r4, #0]
 8002b34:	60a5      	str	r5, [r4, #8]
 8002b36:	6065      	str	r5, [r4, #4]
 8002b38:	6125      	str	r5, [r4, #16]
 8002b3a:	6165      	str	r5, [r4, #20]
 8002b3c:	61a5      	str	r5, [r4, #24]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4629      	mov	r1, r5
 8002b42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b46:	f7ff fd38 	bl	80025ba <memset>
 8002b4a:	6365      	str	r5, [r4, #52]	; 0x34
 8002b4c:	63a5      	str	r5, [r4, #56]	; 0x38
 8002b4e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002b50:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002b52:	e7e6      	b.n	8002b22 <__sfp+0x42>
 8002b54:	08003a30 	.word	0x08003a30

08002b58 <_fwalk_reent>:
 8002b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b5c:	4680      	mov	r8, r0
 8002b5e:	4689      	mov	r9, r1
 8002b60:	2600      	movs	r6, #0
 8002b62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b66:	b914      	cbnz	r4, 8002b6e <_fwalk_reent+0x16>
 8002b68:	4630      	mov	r0, r6
 8002b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b6e:	68a5      	ldr	r5, [r4, #8]
 8002b70:	6867      	ldr	r7, [r4, #4]
 8002b72:	3f01      	subs	r7, #1
 8002b74:	d501      	bpl.n	8002b7a <_fwalk_reent+0x22>
 8002b76:	6824      	ldr	r4, [r4, #0]
 8002b78:	e7f5      	b.n	8002b66 <_fwalk_reent+0xe>
 8002b7a:	89ab      	ldrh	r3, [r5, #12]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d907      	bls.n	8002b90 <_fwalk_reent+0x38>
 8002b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b84:	3301      	adds	r3, #1
 8002b86:	d003      	beq.n	8002b90 <_fwalk_reent+0x38>
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	47c8      	blx	r9
 8002b8e:	4306      	orrs	r6, r0
 8002b90:	3568      	adds	r5, #104	; 0x68
 8002b92:	e7ee      	b.n	8002b72 <_fwalk_reent+0x1a>

08002b94 <__swhatbuf_r>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	460e      	mov	r6, r1
 8002b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9c:	b090      	sub	sp, #64	; 0x40
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	4614      	mov	r4, r2
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	da07      	bge.n	8002bb6 <__swhatbuf_r+0x22>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	602b      	str	r3, [r5, #0]
 8002baa:	89b3      	ldrh	r3, [r6, #12]
 8002bac:	061a      	lsls	r2, r3, #24
 8002bae:	d410      	bmi.n	8002bd2 <__swhatbuf_r+0x3e>
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	e00e      	b.n	8002bd4 <__swhatbuf_r+0x40>
 8002bb6:	aa01      	add	r2, sp, #4
 8002bb8:	f000 fd96 	bl	80036e8 <_fstat_r>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	dbf2      	blt.n	8002ba6 <__swhatbuf_r+0x12>
 8002bc0:	9a02      	ldr	r2, [sp, #8]
 8002bc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bca:	425a      	negs	r2, r3
 8002bcc:	415a      	adcs	r2, r3
 8002bce:	602a      	str	r2, [r5, #0]
 8002bd0:	e7ee      	b.n	8002bb0 <__swhatbuf_r+0x1c>
 8002bd2:	2340      	movs	r3, #64	; 0x40
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	b010      	add	sp, #64	; 0x40
 8002bda:	bd70      	pop	{r4, r5, r6, pc}

08002bdc <__smakebuf_r>:
 8002bdc:	898b      	ldrh	r3, [r1, #12]
 8002bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002be0:	079d      	lsls	r5, r3, #30
 8002be2:	4606      	mov	r6, r0
 8002be4:	460c      	mov	r4, r1
 8002be6:	d507      	bpl.n	8002bf8 <__smakebuf_r+0x1c>
 8002be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	6123      	str	r3, [r4, #16]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	6163      	str	r3, [r4, #20]
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	ab01      	add	r3, sp, #4
 8002bfa:	466a      	mov	r2, sp
 8002bfc:	f7ff ffca 	bl	8002b94 <__swhatbuf_r>
 8002c00:	9900      	ldr	r1, [sp, #0]
 8002c02:	4605      	mov	r5, r0
 8002c04:	4630      	mov	r0, r6
 8002c06:	f000 f875 	bl	8002cf4 <_malloc_r>
 8002c0a:	b948      	cbnz	r0, 8002c20 <__smakebuf_r+0x44>
 8002c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c10:	059a      	lsls	r2, r3, #22
 8002c12:	d4ef      	bmi.n	8002bf4 <__smakebuf_r+0x18>
 8002c14:	f023 0303 	bic.w	r3, r3, #3
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	e7e3      	b.n	8002be8 <__smakebuf_r+0xc>
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <__smakebuf_r+0x7c>)
 8002c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	6020      	str	r0, [r4, #0]
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	81a3      	strh	r3, [r4, #12]
 8002c2e:	9b00      	ldr	r3, [sp, #0]
 8002c30:	6120      	str	r0, [r4, #16]
 8002c32:	6163      	str	r3, [r4, #20]
 8002c34:	9b01      	ldr	r3, [sp, #4]
 8002c36:	b15b      	cbz	r3, 8002c50 <__smakebuf_r+0x74>
 8002c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	f000 fd65 	bl	800370c <_isatty_r>
 8002c42:	b128      	cbz	r0, 8002c50 <__smakebuf_r+0x74>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	81a3      	strh	r3, [r4, #12]
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	431d      	orrs	r5, r3
 8002c54:	81a5      	strh	r5, [r4, #12]
 8002c56:	e7cd      	b.n	8002bf4 <__smakebuf_r+0x18>
 8002c58:	08002a01 	.word	0x08002a01

08002c5c <_free_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4605      	mov	r5, r0
 8002c60:	2900      	cmp	r1, #0
 8002c62:	d043      	beq.n	8002cec <_free_r+0x90>
 8002c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c68:	1f0c      	subs	r4, r1, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bfb8      	it	lt
 8002c6e:	18e4      	addlt	r4, r4, r3
 8002c70:	f000 fd96 	bl	80037a0 <__malloc_lock>
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <_free_r+0x94>)
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	4610      	mov	r0, r2
 8002c7a:	b933      	cbnz	r3, 8002c8a <_free_r+0x2e>
 8002c7c:	6063      	str	r3, [r4, #4]
 8002c7e:	6014      	str	r4, [r2, #0]
 8002c80:	4628      	mov	r0, r5
 8002c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c86:	f000 bd8c 	b.w	80037a2 <__malloc_unlock>
 8002c8a:	42a3      	cmp	r3, r4
 8002c8c:	d90b      	bls.n	8002ca6 <_free_r+0x4a>
 8002c8e:	6821      	ldr	r1, [r4, #0]
 8002c90:	1862      	adds	r2, r4, r1
 8002c92:	4293      	cmp	r3, r2
 8002c94:	bf01      	itttt	eq
 8002c96:	681a      	ldreq	r2, [r3, #0]
 8002c98:	685b      	ldreq	r3, [r3, #4]
 8002c9a:	1852      	addeq	r2, r2, r1
 8002c9c:	6022      	streq	r2, [r4, #0]
 8002c9e:	6063      	str	r3, [r4, #4]
 8002ca0:	6004      	str	r4, [r0, #0]
 8002ca2:	e7ed      	b.n	8002c80 <_free_r+0x24>
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	b10a      	cbz	r2, 8002cae <_free_r+0x52>
 8002caa:	42a2      	cmp	r2, r4
 8002cac:	d9fa      	bls.n	8002ca4 <_free_r+0x48>
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	1858      	adds	r0, r3, r1
 8002cb2:	42a0      	cmp	r0, r4
 8002cb4:	d10b      	bne.n	8002cce <_free_r+0x72>
 8002cb6:	6820      	ldr	r0, [r4, #0]
 8002cb8:	4401      	add	r1, r0
 8002cba:	1858      	adds	r0, r3, r1
 8002cbc:	4282      	cmp	r2, r0
 8002cbe:	6019      	str	r1, [r3, #0]
 8002cc0:	d1de      	bne.n	8002c80 <_free_r+0x24>
 8002cc2:	6810      	ldr	r0, [r2, #0]
 8002cc4:	6852      	ldr	r2, [r2, #4]
 8002cc6:	4401      	add	r1, r0
 8002cc8:	6019      	str	r1, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	e7d8      	b.n	8002c80 <_free_r+0x24>
 8002cce:	d902      	bls.n	8002cd6 <_free_r+0x7a>
 8002cd0:	230c      	movs	r3, #12
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	e7d4      	b.n	8002c80 <_free_r+0x24>
 8002cd6:	6820      	ldr	r0, [r4, #0]
 8002cd8:	1821      	adds	r1, r4, r0
 8002cda:	428a      	cmp	r2, r1
 8002cdc:	bf01      	itttt	eq
 8002cde:	6811      	ldreq	r1, [r2, #0]
 8002ce0:	6852      	ldreq	r2, [r2, #4]
 8002ce2:	1809      	addeq	r1, r1, r0
 8002ce4:	6021      	streq	r1, [r4, #0]
 8002ce6:	6062      	str	r2, [r4, #4]
 8002ce8:	605c      	str	r4, [r3, #4]
 8002cea:	e7c9      	b.n	8002c80 <_free_r+0x24>
 8002cec:	bd38      	pop	{r3, r4, r5, pc}
 8002cee:	bf00      	nop
 8002cf0:	200011e8 	.word	0x200011e8

08002cf4 <_malloc_r>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	1ccd      	adds	r5, r1, #3
 8002cf8:	f025 0503 	bic.w	r5, r5, #3
 8002cfc:	3508      	adds	r5, #8
 8002cfe:	2d0c      	cmp	r5, #12
 8002d00:	bf38      	it	cc
 8002d02:	250c      	movcc	r5, #12
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	4606      	mov	r6, r0
 8002d08:	db01      	blt.n	8002d0e <_malloc_r+0x1a>
 8002d0a:	42a9      	cmp	r1, r5
 8002d0c:	d903      	bls.n	8002d16 <_malloc_r+0x22>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	6033      	str	r3, [r6, #0]
 8002d12:	2000      	movs	r0, #0
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	f000 fd43 	bl	80037a0 <__malloc_lock>
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <_malloc_r+0xb4>)
 8002d1c:	6814      	ldr	r4, [r2, #0]
 8002d1e:	4621      	mov	r1, r4
 8002d20:	b991      	cbnz	r1, 8002d48 <_malloc_r+0x54>
 8002d22:	4c22      	ldr	r4, [pc, #136]	; (8002dac <_malloc_r+0xb8>)
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	b91b      	cbnz	r3, 8002d30 <_malloc_r+0x3c>
 8002d28:	4630      	mov	r0, r6
 8002d2a:	f000 fc67 	bl	80035fc <_sbrk_r>
 8002d2e:	6020      	str	r0, [r4, #0]
 8002d30:	4629      	mov	r1, r5
 8002d32:	4630      	mov	r0, r6
 8002d34:	f000 fc62 	bl	80035fc <_sbrk_r>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d126      	bne.n	8002d8a <_malloc_r+0x96>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	4630      	mov	r0, r6
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	f000 fd2e 	bl	80037a2 <__malloc_unlock>
 8002d46:	e7e4      	b.n	8002d12 <_malloc_r+0x1e>
 8002d48:	680b      	ldr	r3, [r1, #0]
 8002d4a:	1b5b      	subs	r3, r3, r5
 8002d4c:	d41a      	bmi.n	8002d84 <_malloc_r+0x90>
 8002d4e:	2b0b      	cmp	r3, #11
 8002d50:	d90f      	bls.n	8002d72 <_malloc_r+0x7e>
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	18cc      	adds	r4, r1, r3
 8002d56:	50cd      	str	r5, [r1, r3]
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f000 fd22 	bl	80037a2 <__malloc_unlock>
 8002d5e:	f104 000b 	add.w	r0, r4, #11
 8002d62:	1d23      	adds	r3, r4, #4
 8002d64:	f020 0007 	bic.w	r0, r0, #7
 8002d68:	1ac3      	subs	r3, r0, r3
 8002d6a:	d01b      	beq.n	8002da4 <_malloc_r+0xb0>
 8002d6c:	425a      	negs	r2, r3
 8002d6e:	50e2      	str	r2, [r4, r3]
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
 8002d72:	428c      	cmp	r4, r1
 8002d74:	bf0b      	itete	eq
 8002d76:	6863      	ldreq	r3, [r4, #4]
 8002d78:	684b      	ldrne	r3, [r1, #4]
 8002d7a:	6013      	streq	r3, [r2, #0]
 8002d7c:	6063      	strne	r3, [r4, #4]
 8002d7e:	bf18      	it	ne
 8002d80:	460c      	movne	r4, r1
 8002d82:	e7e9      	b.n	8002d58 <_malloc_r+0x64>
 8002d84:	460c      	mov	r4, r1
 8002d86:	6849      	ldr	r1, [r1, #4]
 8002d88:	e7ca      	b.n	8002d20 <_malloc_r+0x2c>
 8002d8a:	1cc4      	adds	r4, r0, #3
 8002d8c:	f024 0403 	bic.w	r4, r4, #3
 8002d90:	42a0      	cmp	r0, r4
 8002d92:	d005      	beq.n	8002da0 <_malloc_r+0xac>
 8002d94:	1a21      	subs	r1, r4, r0
 8002d96:	4630      	mov	r0, r6
 8002d98:	f000 fc30 	bl	80035fc <_sbrk_r>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d0cd      	beq.n	8002d3c <_malloc_r+0x48>
 8002da0:	6025      	str	r5, [r4, #0]
 8002da2:	e7d9      	b.n	8002d58 <_malloc_r+0x64>
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
 8002da6:	bf00      	nop
 8002da8:	200011e8 	.word	0x200011e8
 8002dac:	200011ec 	.word	0x200011ec

08002db0 <__ssputs_r>:
 8002db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db4:	688e      	ldr	r6, [r1, #8]
 8002db6:	4682      	mov	sl, r0
 8002db8:	429e      	cmp	r6, r3
 8002dba:	460c      	mov	r4, r1
 8002dbc:	4691      	mov	r9, r2
 8002dbe:	4698      	mov	r8, r3
 8002dc0:	d835      	bhi.n	8002e2e <__ssputs_r+0x7e>
 8002dc2:	898a      	ldrh	r2, [r1, #12]
 8002dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dc8:	d031      	beq.n	8002e2e <__ssputs_r+0x7e>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	6825      	ldr	r5, [r4, #0]
 8002dce:	6909      	ldr	r1, [r1, #16]
 8002dd0:	1a6f      	subs	r7, r5, r1
 8002dd2:	6965      	ldr	r5, [r4, #20]
 8002dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ddc:	f108 0301 	add.w	r3, r8, #1
 8002de0:	443b      	add	r3, r7
 8002de2:	429d      	cmp	r5, r3
 8002de4:	bf38      	it	cc
 8002de6:	461d      	movcc	r5, r3
 8002de8:	0553      	lsls	r3, r2, #21
 8002dea:	d531      	bpl.n	8002e50 <__ssputs_r+0xa0>
 8002dec:	4629      	mov	r1, r5
 8002dee:	f7ff ff81 	bl	8002cf4 <_malloc_r>
 8002df2:	4606      	mov	r6, r0
 8002df4:	b950      	cbnz	r0, 8002e0c <__ssputs_r+0x5c>
 8002df6:	230c      	movs	r3, #12
 8002df8:	f8ca 3000 	str.w	r3, [sl]
 8002dfc:	89a3      	ldrh	r3, [r4, #12]
 8002dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e0c:	463a      	mov	r2, r7
 8002e0e:	6921      	ldr	r1, [r4, #16]
 8002e10:	f7ff fbc8 	bl	80025a4 <memcpy>
 8002e14:	89a3      	ldrh	r3, [r4, #12]
 8002e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1e:	81a3      	strh	r3, [r4, #12]
 8002e20:	6126      	str	r6, [r4, #16]
 8002e22:	443e      	add	r6, r7
 8002e24:	6026      	str	r6, [r4, #0]
 8002e26:	4646      	mov	r6, r8
 8002e28:	6165      	str	r5, [r4, #20]
 8002e2a:	1bed      	subs	r5, r5, r7
 8002e2c:	60a5      	str	r5, [r4, #8]
 8002e2e:	4546      	cmp	r6, r8
 8002e30:	bf28      	it	cs
 8002e32:	4646      	movcs	r6, r8
 8002e34:	4649      	mov	r1, r9
 8002e36:	4632      	mov	r2, r6
 8002e38:	6820      	ldr	r0, [r4, #0]
 8002e3a:	f000 fc97 	bl	800376c <memmove>
 8002e3e:	68a3      	ldr	r3, [r4, #8]
 8002e40:	2000      	movs	r0, #0
 8002e42:	1b9b      	subs	r3, r3, r6
 8002e44:	60a3      	str	r3, [r4, #8]
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	441e      	add	r6, r3
 8002e4a:	6026      	str	r6, [r4, #0]
 8002e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e50:	462a      	mov	r2, r5
 8002e52:	f000 fca7 	bl	80037a4 <_realloc_r>
 8002e56:	4606      	mov	r6, r0
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d1e1      	bne.n	8002e20 <__ssputs_r+0x70>
 8002e5c:	6921      	ldr	r1, [r4, #16]
 8002e5e:	4650      	mov	r0, sl
 8002e60:	f7ff fefc 	bl	8002c5c <_free_r>
 8002e64:	e7c7      	b.n	8002df6 <__ssputs_r+0x46>
	...

08002e68 <_svfiprintf_r>:
 8002e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6c:	b09d      	sub	sp, #116	; 0x74
 8002e6e:	9303      	str	r3, [sp, #12]
 8002e70:	898b      	ldrh	r3, [r1, #12]
 8002e72:	4680      	mov	r8, r0
 8002e74:	061c      	lsls	r4, r3, #24
 8002e76:	460d      	mov	r5, r1
 8002e78:	4616      	mov	r6, r2
 8002e7a:	d50f      	bpl.n	8002e9c <_svfiprintf_r+0x34>
 8002e7c:	690b      	ldr	r3, [r1, #16]
 8002e7e:	b96b      	cbnz	r3, 8002e9c <_svfiprintf_r+0x34>
 8002e80:	2140      	movs	r1, #64	; 0x40
 8002e82:	f7ff ff37 	bl	8002cf4 <_malloc_r>
 8002e86:	6028      	str	r0, [r5, #0]
 8002e88:	6128      	str	r0, [r5, #16]
 8002e8a:	b928      	cbnz	r0, 8002e98 <_svfiprintf_r+0x30>
 8002e8c:	230c      	movs	r3, #12
 8002e8e:	f8c8 3000 	str.w	r3, [r8]
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	e0c4      	b.n	8003022 <_svfiprintf_r+0x1ba>
 8002e98:	2340      	movs	r3, #64	; 0x40
 8002e9a:	616b      	str	r3, [r5, #20]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ea6:	2330      	movs	r3, #48	; 0x30
 8002ea8:	f04f 0b01 	mov.w	fp, #1
 8002eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eb0:	4637      	mov	r7, r6
 8002eb2:	463c      	mov	r4, r7
 8002eb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d13c      	bne.n	8002f36 <_svfiprintf_r+0xce>
 8002ebc:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ec0:	d00b      	beq.n	8002eda <_svfiprintf_r+0x72>
 8002ec2:	4653      	mov	r3, sl
 8002ec4:	4632      	mov	r2, r6
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	4640      	mov	r0, r8
 8002eca:	f7ff ff71 	bl	8002db0 <__ssputs_r>
 8002ece:	3001      	adds	r0, #1
 8002ed0:	f000 80a2 	beq.w	8003018 <_svfiprintf_r+0x1b0>
 8002ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ed6:	4453      	add	r3, sl
 8002ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eda:	783b      	ldrb	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 809b 	beq.w	8003018 <_svfiprintf_r+0x1b0>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	9304      	str	r3, [sp, #16]
 8002eea:	9307      	str	r3, [sp, #28]
 8002eec:	9205      	str	r2, [sp, #20]
 8002eee:	9306      	str	r3, [sp, #24]
 8002ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ef6:	2205      	movs	r2, #5
 8002ef8:	7821      	ldrb	r1, [r4, #0]
 8002efa:	4850      	ldr	r0, [pc, #320]	; (800303c <_svfiprintf_r+0x1d4>)
 8002efc:	f000 fc28 	bl	8003750 <memchr>
 8002f00:	1c67      	adds	r7, r4, #1
 8002f02:	9b04      	ldr	r3, [sp, #16]
 8002f04:	b9d8      	cbnz	r0, 8002f3e <_svfiprintf_r+0xd6>
 8002f06:	06d9      	lsls	r1, r3, #27
 8002f08:	bf44      	itt	mi
 8002f0a:	2220      	movmi	r2, #32
 8002f0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f10:	071a      	lsls	r2, r3, #28
 8002f12:	bf44      	itt	mi
 8002f14:	222b      	movmi	r2, #43	; 0x2b
 8002f16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f1a:	7822      	ldrb	r2, [r4, #0]
 8002f1c:	2a2a      	cmp	r2, #42	; 0x2a
 8002f1e:	d016      	beq.n	8002f4e <_svfiprintf_r+0xe6>
 8002f20:	2100      	movs	r1, #0
 8002f22:	200a      	movs	r0, #10
 8002f24:	9a07      	ldr	r2, [sp, #28]
 8002f26:	4627      	mov	r7, r4
 8002f28:	783b      	ldrb	r3, [r7, #0]
 8002f2a:	3401      	adds	r4, #1
 8002f2c:	3b30      	subs	r3, #48	; 0x30
 8002f2e:	2b09      	cmp	r3, #9
 8002f30:	d950      	bls.n	8002fd4 <_svfiprintf_r+0x16c>
 8002f32:	b1c9      	cbz	r1, 8002f68 <_svfiprintf_r+0x100>
 8002f34:	e011      	b.n	8002f5a <_svfiprintf_r+0xf2>
 8002f36:	2b25      	cmp	r3, #37	; 0x25
 8002f38:	d0c0      	beq.n	8002ebc <_svfiprintf_r+0x54>
 8002f3a:	4627      	mov	r7, r4
 8002f3c:	e7b9      	b.n	8002eb2 <_svfiprintf_r+0x4a>
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	; (800303c <_svfiprintf_r+0x1d4>)
 8002f40:	463c      	mov	r4, r7
 8002f42:	1a80      	subs	r0, r0, r2
 8002f44:	fa0b f000 	lsl.w	r0, fp, r0
 8002f48:	4318      	orrs	r0, r3
 8002f4a:	9004      	str	r0, [sp, #16]
 8002f4c:	e7d3      	b.n	8002ef6 <_svfiprintf_r+0x8e>
 8002f4e:	9a03      	ldr	r2, [sp, #12]
 8002f50:	1d11      	adds	r1, r2, #4
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	9103      	str	r1, [sp, #12]
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	db01      	blt.n	8002f5e <_svfiprintf_r+0xf6>
 8002f5a:	9207      	str	r2, [sp, #28]
 8002f5c:	e004      	b.n	8002f68 <_svfiprintf_r+0x100>
 8002f5e:	4252      	negs	r2, r2
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	9207      	str	r2, [sp, #28]
 8002f66:	9304      	str	r3, [sp, #16]
 8002f68:	783b      	ldrb	r3, [r7, #0]
 8002f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f6c:	d10d      	bne.n	8002f8a <_svfiprintf_r+0x122>
 8002f6e:	787b      	ldrb	r3, [r7, #1]
 8002f70:	1c79      	adds	r1, r7, #1
 8002f72:	2b2a      	cmp	r3, #42	; 0x2a
 8002f74:	d132      	bne.n	8002fdc <_svfiprintf_r+0x174>
 8002f76:	9b03      	ldr	r3, [sp, #12]
 8002f78:	3702      	adds	r7, #2
 8002f7a:	1d1a      	adds	r2, r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	9203      	str	r2, [sp, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bfb8      	it	lt
 8002f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f88:	9305      	str	r3, [sp, #20]
 8002f8a:	4c2d      	ldr	r4, [pc, #180]	; (8003040 <_svfiprintf_r+0x1d8>)
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	7839      	ldrb	r1, [r7, #0]
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 fbdd 	bl	8003750 <memchr>
 8002f96:	b138      	cbz	r0, 8002fa8 <_svfiprintf_r+0x140>
 8002f98:	2340      	movs	r3, #64	; 0x40
 8002f9a:	1b00      	subs	r0, r0, r4
 8002f9c:	fa03 f000 	lsl.w	r0, r3, r0
 8002fa0:	9b04      	ldr	r3, [sp, #16]
 8002fa2:	3701      	adds	r7, #1
 8002fa4:	4303      	orrs	r3, r0
 8002fa6:	9304      	str	r3, [sp, #16]
 8002fa8:	7839      	ldrb	r1, [r7, #0]
 8002faa:	2206      	movs	r2, #6
 8002fac:	4825      	ldr	r0, [pc, #148]	; (8003044 <_svfiprintf_r+0x1dc>)
 8002fae:	1c7e      	adds	r6, r7, #1
 8002fb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fb4:	f000 fbcc 	bl	8003750 <memchr>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d035      	beq.n	8003028 <_svfiprintf_r+0x1c0>
 8002fbc:	4b22      	ldr	r3, [pc, #136]	; (8003048 <_svfiprintf_r+0x1e0>)
 8002fbe:	b9fb      	cbnz	r3, 8003000 <_svfiprintf_r+0x198>
 8002fc0:	9b03      	ldr	r3, [sp, #12]
 8002fc2:	3307      	adds	r3, #7
 8002fc4:	f023 0307 	bic.w	r3, r3, #7
 8002fc8:	3308      	adds	r3, #8
 8002fca:	9303      	str	r3, [sp, #12]
 8002fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fce:	444b      	add	r3, r9
 8002fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002fd2:	e76d      	b.n	8002eb0 <_svfiprintf_r+0x48>
 8002fd4:	fb00 3202 	mla	r2, r0, r2, r3
 8002fd8:	2101      	movs	r1, #1
 8002fda:	e7a4      	b.n	8002f26 <_svfiprintf_r+0xbe>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	240a      	movs	r4, #10
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	9305      	str	r3, [sp, #20]
 8002fe4:	460f      	mov	r7, r1
 8002fe6:	783a      	ldrb	r2, [r7, #0]
 8002fe8:	3101      	adds	r1, #1
 8002fea:	3a30      	subs	r2, #48	; 0x30
 8002fec:	2a09      	cmp	r2, #9
 8002fee:	d903      	bls.n	8002ff8 <_svfiprintf_r+0x190>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ca      	beq.n	8002f8a <_svfiprintf_r+0x122>
 8002ff4:	9005      	str	r0, [sp, #20]
 8002ff6:	e7c8      	b.n	8002f8a <_svfiprintf_r+0x122>
 8002ff8:	fb04 2000 	mla	r0, r4, r0, r2
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e7f1      	b.n	8002fe4 <_svfiprintf_r+0x17c>
 8003000:	ab03      	add	r3, sp, #12
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	462a      	mov	r2, r5
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <_svfiprintf_r+0x1e4>)
 8003008:	a904      	add	r1, sp, #16
 800300a:	4640      	mov	r0, r8
 800300c:	f3af 8000 	nop.w
 8003010:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003014:	4681      	mov	r9, r0
 8003016:	d1d9      	bne.n	8002fcc <_svfiprintf_r+0x164>
 8003018:	89ab      	ldrh	r3, [r5, #12]
 800301a:	065b      	lsls	r3, r3, #25
 800301c:	f53f af39 	bmi.w	8002e92 <_svfiprintf_r+0x2a>
 8003020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003022:	b01d      	add	sp, #116	; 0x74
 8003024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003028:	ab03      	add	r3, sp, #12
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	462a      	mov	r2, r5
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <_svfiprintf_r+0x1e4>)
 8003030:	a904      	add	r1, sp, #16
 8003032:	4640      	mov	r0, r8
 8003034:	f000 f9c2 	bl	80033bc <_printf_i>
 8003038:	e7ea      	b.n	8003010 <_svfiprintf_r+0x1a8>
 800303a:	bf00      	nop
 800303c:	08003a34 	.word	0x08003a34
 8003040:	08003a3a 	.word	0x08003a3a
 8003044:	08003a3e 	.word	0x08003a3e
 8003048:	00000000 	.word	0x00000000
 800304c:	08002db1 	.word	0x08002db1

08003050 <__sfputc_r>:
 8003050:	6893      	ldr	r3, [r2, #8]
 8003052:	b410      	push	{r4}
 8003054:	3b01      	subs	r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	6093      	str	r3, [r2, #8]
 800305a:	da08      	bge.n	800306e <__sfputc_r+0x1e>
 800305c:	6994      	ldr	r4, [r2, #24]
 800305e:	42a3      	cmp	r3, r4
 8003060:	db02      	blt.n	8003068 <__sfputc_r+0x18>
 8003062:	b2cb      	uxtb	r3, r1
 8003064:	2b0a      	cmp	r3, #10
 8003066:	d102      	bne.n	800306e <__sfputc_r+0x1e>
 8003068:	bc10      	pop	{r4}
 800306a:	f7ff bb57 	b.w	800271c <__swbuf_r>
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	1c58      	adds	r0, r3, #1
 8003072:	6010      	str	r0, [r2, #0]
 8003074:	7019      	strb	r1, [r3, #0]
 8003076:	b2c8      	uxtb	r0, r1
 8003078:	bc10      	pop	{r4}
 800307a:	4770      	bx	lr

0800307c <__sfputs_r>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	4606      	mov	r6, r0
 8003080:	460f      	mov	r7, r1
 8003082:	4614      	mov	r4, r2
 8003084:	18d5      	adds	r5, r2, r3
 8003086:	42ac      	cmp	r4, r5
 8003088:	d101      	bne.n	800308e <__sfputs_r+0x12>
 800308a:	2000      	movs	r0, #0
 800308c:	e007      	b.n	800309e <__sfputs_r+0x22>
 800308e:	463a      	mov	r2, r7
 8003090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003094:	4630      	mov	r0, r6
 8003096:	f7ff ffdb 	bl	8003050 <__sfputc_r>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	d1f3      	bne.n	8003086 <__sfputs_r+0xa>
 800309e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030a0 <_vfiprintf_r>:
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	b09d      	sub	sp, #116	; 0x74
 80030a6:	460c      	mov	r4, r1
 80030a8:	4617      	mov	r7, r2
 80030aa:	9303      	str	r3, [sp, #12]
 80030ac:	4606      	mov	r6, r0
 80030ae:	b118      	cbz	r0, 80030b8 <_vfiprintf_r+0x18>
 80030b0:	6983      	ldr	r3, [r0, #24]
 80030b2:	b90b      	cbnz	r3, 80030b8 <_vfiprintf_r+0x18>
 80030b4:	f7ff fce4 	bl	8002a80 <__sinit>
 80030b8:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <_vfiprintf_r+0x20c>)
 80030ba:	429c      	cmp	r4, r3
 80030bc:	d157      	bne.n	800316e <_vfiprintf_r+0xce>
 80030be:	6874      	ldr	r4, [r6, #4]
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	0718      	lsls	r0, r3, #28
 80030c4:	d55d      	bpl.n	8003182 <_vfiprintf_r+0xe2>
 80030c6:	6923      	ldr	r3, [r4, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d05a      	beq.n	8003182 <_vfiprintf_r+0xe2>
 80030cc:	2300      	movs	r3, #0
 80030ce:	9309      	str	r3, [sp, #36]	; 0x24
 80030d0:	2320      	movs	r3, #32
 80030d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030d6:	2330      	movs	r3, #48	; 0x30
 80030d8:	f04f 0b01 	mov.w	fp, #1
 80030dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030e0:	46b8      	mov	r8, r7
 80030e2:	4645      	mov	r5, r8
 80030e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d155      	bne.n	8003198 <_vfiprintf_r+0xf8>
 80030ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80030f0:	d00b      	beq.n	800310a <_vfiprintf_r+0x6a>
 80030f2:	4653      	mov	r3, sl
 80030f4:	463a      	mov	r2, r7
 80030f6:	4621      	mov	r1, r4
 80030f8:	4630      	mov	r0, r6
 80030fa:	f7ff ffbf 	bl	800307c <__sfputs_r>
 80030fe:	3001      	adds	r0, #1
 8003100:	f000 80c4 	beq.w	800328c <_vfiprintf_r+0x1ec>
 8003104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003106:	4453      	add	r3, sl
 8003108:	9309      	str	r3, [sp, #36]	; 0x24
 800310a:	f898 3000 	ldrb.w	r3, [r8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80bc 	beq.w	800328c <_vfiprintf_r+0x1ec>
 8003114:	2300      	movs	r3, #0
 8003116:	f04f 32ff 	mov.w	r2, #4294967295
 800311a:	9304      	str	r3, [sp, #16]
 800311c:	9307      	str	r3, [sp, #28]
 800311e:	9205      	str	r2, [sp, #20]
 8003120:	9306      	str	r3, [sp, #24]
 8003122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003126:	931a      	str	r3, [sp, #104]	; 0x68
 8003128:	2205      	movs	r2, #5
 800312a:	7829      	ldrb	r1, [r5, #0]
 800312c:	4860      	ldr	r0, [pc, #384]	; (80032b0 <_vfiprintf_r+0x210>)
 800312e:	f000 fb0f 	bl	8003750 <memchr>
 8003132:	f105 0801 	add.w	r8, r5, #1
 8003136:	9b04      	ldr	r3, [sp, #16]
 8003138:	2800      	cmp	r0, #0
 800313a:	d131      	bne.n	80031a0 <_vfiprintf_r+0x100>
 800313c:	06d9      	lsls	r1, r3, #27
 800313e:	bf44      	itt	mi
 8003140:	2220      	movmi	r2, #32
 8003142:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003146:	071a      	lsls	r2, r3, #28
 8003148:	bf44      	itt	mi
 800314a:	222b      	movmi	r2, #43	; 0x2b
 800314c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003150:	782a      	ldrb	r2, [r5, #0]
 8003152:	2a2a      	cmp	r2, #42	; 0x2a
 8003154:	d02c      	beq.n	80031b0 <_vfiprintf_r+0x110>
 8003156:	2100      	movs	r1, #0
 8003158:	200a      	movs	r0, #10
 800315a:	9a07      	ldr	r2, [sp, #28]
 800315c:	46a8      	mov	r8, r5
 800315e:	f898 3000 	ldrb.w	r3, [r8]
 8003162:	3501      	adds	r5, #1
 8003164:	3b30      	subs	r3, #48	; 0x30
 8003166:	2b09      	cmp	r3, #9
 8003168:	d96d      	bls.n	8003246 <_vfiprintf_r+0x1a6>
 800316a:	b371      	cbz	r1, 80031ca <_vfiprintf_r+0x12a>
 800316c:	e026      	b.n	80031bc <_vfiprintf_r+0x11c>
 800316e:	4b51      	ldr	r3, [pc, #324]	; (80032b4 <_vfiprintf_r+0x214>)
 8003170:	429c      	cmp	r4, r3
 8003172:	d101      	bne.n	8003178 <_vfiprintf_r+0xd8>
 8003174:	68b4      	ldr	r4, [r6, #8]
 8003176:	e7a3      	b.n	80030c0 <_vfiprintf_r+0x20>
 8003178:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <_vfiprintf_r+0x218>)
 800317a:	429c      	cmp	r4, r3
 800317c:	bf08      	it	eq
 800317e:	68f4      	ldreq	r4, [r6, #12]
 8003180:	e79e      	b.n	80030c0 <_vfiprintf_r+0x20>
 8003182:	4621      	mov	r1, r4
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff fb1b 	bl	80027c0 <__swsetup_r>
 800318a:	2800      	cmp	r0, #0
 800318c:	d09e      	beq.n	80030cc <_vfiprintf_r+0x2c>
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	b01d      	add	sp, #116	; 0x74
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003198:	2b25      	cmp	r3, #37	; 0x25
 800319a:	d0a7      	beq.n	80030ec <_vfiprintf_r+0x4c>
 800319c:	46a8      	mov	r8, r5
 800319e:	e7a0      	b.n	80030e2 <_vfiprintf_r+0x42>
 80031a0:	4a43      	ldr	r2, [pc, #268]	; (80032b0 <_vfiprintf_r+0x210>)
 80031a2:	4645      	mov	r5, r8
 80031a4:	1a80      	subs	r0, r0, r2
 80031a6:	fa0b f000 	lsl.w	r0, fp, r0
 80031aa:	4318      	orrs	r0, r3
 80031ac:	9004      	str	r0, [sp, #16]
 80031ae:	e7bb      	b.n	8003128 <_vfiprintf_r+0x88>
 80031b0:	9a03      	ldr	r2, [sp, #12]
 80031b2:	1d11      	adds	r1, r2, #4
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	9103      	str	r1, [sp, #12]
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	db01      	blt.n	80031c0 <_vfiprintf_r+0x120>
 80031bc:	9207      	str	r2, [sp, #28]
 80031be:	e004      	b.n	80031ca <_vfiprintf_r+0x12a>
 80031c0:	4252      	negs	r2, r2
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	9207      	str	r2, [sp, #28]
 80031c8:	9304      	str	r3, [sp, #16]
 80031ca:	f898 3000 	ldrb.w	r3, [r8]
 80031ce:	2b2e      	cmp	r3, #46	; 0x2e
 80031d0:	d110      	bne.n	80031f4 <_vfiprintf_r+0x154>
 80031d2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80031d6:	f108 0101 	add.w	r1, r8, #1
 80031da:	2b2a      	cmp	r3, #42	; 0x2a
 80031dc:	d137      	bne.n	800324e <_vfiprintf_r+0x1ae>
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	f108 0802 	add.w	r8, r8, #2
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	9203      	str	r2, [sp, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bfb8      	it	lt
 80031ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80031f2:	9305      	str	r3, [sp, #20]
 80031f4:	4d31      	ldr	r5, [pc, #196]	; (80032bc <_vfiprintf_r+0x21c>)
 80031f6:	2203      	movs	r2, #3
 80031f8:	f898 1000 	ldrb.w	r1, [r8]
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 faa7 	bl	8003750 <memchr>
 8003202:	b140      	cbz	r0, 8003216 <_vfiprintf_r+0x176>
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	1b40      	subs	r0, r0, r5
 8003208:	fa03 f000 	lsl.w	r0, r3, r0
 800320c:	9b04      	ldr	r3, [sp, #16]
 800320e:	f108 0801 	add.w	r8, r8, #1
 8003212:	4303      	orrs	r3, r0
 8003214:	9304      	str	r3, [sp, #16]
 8003216:	f898 1000 	ldrb.w	r1, [r8]
 800321a:	2206      	movs	r2, #6
 800321c:	4828      	ldr	r0, [pc, #160]	; (80032c0 <_vfiprintf_r+0x220>)
 800321e:	f108 0701 	add.w	r7, r8, #1
 8003222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003226:	f000 fa93 	bl	8003750 <memchr>
 800322a:	2800      	cmp	r0, #0
 800322c:	d034      	beq.n	8003298 <_vfiprintf_r+0x1f8>
 800322e:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <_vfiprintf_r+0x224>)
 8003230:	bb03      	cbnz	r3, 8003274 <_vfiprintf_r+0x1d4>
 8003232:	9b03      	ldr	r3, [sp, #12]
 8003234:	3307      	adds	r3, #7
 8003236:	f023 0307 	bic.w	r3, r3, #7
 800323a:	3308      	adds	r3, #8
 800323c:	9303      	str	r3, [sp, #12]
 800323e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003240:	444b      	add	r3, r9
 8003242:	9309      	str	r3, [sp, #36]	; 0x24
 8003244:	e74c      	b.n	80030e0 <_vfiprintf_r+0x40>
 8003246:	fb00 3202 	mla	r2, r0, r2, r3
 800324a:	2101      	movs	r1, #1
 800324c:	e786      	b.n	800315c <_vfiprintf_r+0xbc>
 800324e:	2300      	movs	r3, #0
 8003250:	250a      	movs	r5, #10
 8003252:	4618      	mov	r0, r3
 8003254:	9305      	str	r3, [sp, #20]
 8003256:	4688      	mov	r8, r1
 8003258:	f898 2000 	ldrb.w	r2, [r8]
 800325c:	3101      	adds	r1, #1
 800325e:	3a30      	subs	r2, #48	; 0x30
 8003260:	2a09      	cmp	r2, #9
 8003262:	d903      	bls.n	800326c <_vfiprintf_r+0x1cc>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0c5      	beq.n	80031f4 <_vfiprintf_r+0x154>
 8003268:	9005      	str	r0, [sp, #20]
 800326a:	e7c3      	b.n	80031f4 <_vfiprintf_r+0x154>
 800326c:	fb05 2000 	mla	r0, r5, r0, r2
 8003270:	2301      	movs	r3, #1
 8003272:	e7f0      	b.n	8003256 <_vfiprintf_r+0x1b6>
 8003274:	ab03      	add	r3, sp, #12
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	4622      	mov	r2, r4
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <_vfiprintf_r+0x228>)
 800327c:	a904      	add	r1, sp, #16
 800327e:	4630      	mov	r0, r6
 8003280:	f3af 8000 	nop.w
 8003284:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003288:	4681      	mov	r9, r0
 800328a:	d1d8      	bne.n	800323e <_vfiprintf_r+0x19e>
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	065b      	lsls	r3, r3, #25
 8003290:	f53f af7d 	bmi.w	800318e <_vfiprintf_r+0xee>
 8003294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003296:	e77c      	b.n	8003192 <_vfiprintf_r+0xf2>
 8003298:	ab03      	add	r3, sp, #12
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4622      	mov	r2, r4
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <_vfiprintf_r+0x228>)
 80032a0:	a904      	add	r1, sp, #16
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 f88a 	bl	80033bc <_printf_i>
 80032a8:	e7ec      	b.n	8003284 <_vfiprintf_r+0x1e4>
 80032aa:	bf00      	nop
 80032ac:	080039f0 	.word	0x080039f0
 80032b0:	08003a34 	.word	0x08003a34
 80032b4:	08003a10 	.word	0x08003a10
 80032b8:	080039d0 	.word	0x080039d0
 80032bc:	08003a3a 	.word	0x08003a3a
 80032c0:	08003a3e 	.word	0x08003a3e
 80032c4:	00000000 	.word	0x00000000
 80032c8:	0800307d 	.word	0x0800307d

080032cc <_printf_common>:
 80032cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d0:	4691      	mov	r9, r2
 80032d2:	461f      	mov	r7, r3
 80032d4:	688a      	ldr	r2, [r1, #8]
 80032d6:	690b      	ldr	r3, [r1, #16]
 80032d8:	4606      	mov	r6, r0
 80032da:	4293      	cmp	r3, r2
 80032dc:	bfb8      	it	lt
 80032de:	4613      	movlt	r3, r2
 80032e0:	f8c9 3000 	str.w	r3, [r9]
 80032e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032e8:	460c      	mov	r4, r1
 80032ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032ee:	b112      	cbz	r2, 80032f6 <_printf_common+0x2a>
 80032f0:	3301      	adds	r3, #1
 80032f2:	f8c9 3000 	str.w	r3, [r9]
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	0699      	lsls	r1, r3, #26
 80032fa:	bf42      	ittt	mi
 80032fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003300:	3302      	addmi	r3, #2
 8003302:	f8c9 3000 	strmi.w	r3, [r9]
 8003306:	6825      	ldr	r5, [r4, #0]
 8003308:	f015 0506 	ands.w	r5, r5, #6
 800330c:	d107      	bne.n	800331e <_printf_common+0x52>
 800330e:	f104 0a19 	add.w	sl, r4, #25
 8003312:	68e3      	ldr	r3, [r4, #12]
 8003314:	f8d9 2000 	ldr.w	r2, [r9]
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	429d      	cmp	r5, r3
 800331c:	db2a      	blt.n	8003374 <_printf_common+0xa8>
 800331e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	3300      	adds	r3, #0
 8003326:	bf18      	it	ne
 8003328:	2301      	movne	r3, #1
 800332a:	0692      	lsls	r2, r2, #26
 800332c:	d42f      	bmi.n	800338e <_printf_common+0xc2>
 800332e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003332:	4639      	mov	r1, r7
 8003334:	4630      	mov	r0, r6
 8003336:	47c0      	blx	r8
 8003338:	3001      	adds	r0, #1
 800333a:	d022      	beq.n	8003382 <_printf_common+0xb6>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	68e5      	ldr	r5, [r4, #12]
 8003340:	f003 0306 	and.w	r3, r3, #6
 8003344:	2b04      	cmp	r3, #4
 8003346:	bf18      	it	ne
 8003348:	2500      	movne	r5, #0
 800334a:	f8d9 2000 	ldr.w	r2, [r9]
 800334e:	f04f 0900 	mov.w	r9, #0
 8003352:	bf08      	it	eq
 8003354:	1aad      	subeq	r5, r5, r2
 8003356:	68a3      	ldr	r3, [r4, #8]
 8003358:	6922      	ldr	r2, [r4, #16]
 800335a:	bf08      	it	eq
 800335c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003360:	4293      	cmp	r3, r2
 8003362:	bfc4      	itt	gt
 8003364:	1a9b      	subgt	r3, r3, r2
 8003366:	18ed      	addgt	r5, r5, r3
 8003368:	341a      	adds	r4, #26
 800336a:	454d      	cmp	r5, r9
 800336c:	d11b      	bne.n	80033a6 <_printf_common+0xda>
 800336e:	2000      	movs	r0, #0
 8003370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003374:	2301      	movs	r3, #1
 8003376:	4652      	mov	r2, sl
 8003378:	4639      	mov	r1, r7
 800337a:	4630      	mov	r0, r6
 800337c:	47c0      	blx	r8
 800337e:	3001      	adds	r0, #1
 8003380:	d103      	bne.n	800338a <_printf_common+0xbe>
 8003382:	f04f 30ff 	mov.w	r0, #4294967295
 8003386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800338a:	3501      	adds	r5, #1
 800338c:	e7c1      	b.n	8003312 <_printf_common+0x46>
 800338e:	2030      	movs	r0, #48	; 0x30
 8003390:	18e1      	adds	r1, r4, r3
 8003392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800339c:	4422      	add	r2, r4
 800339e:	3302      	adds	r3, #2
 80033a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033a4:	e7c3      	b.n	800332e <_printf_common+0x62>
 80033a6:	2301      	movs	r3, #1
 80033a8:	4622      	mov	r2, r4
 80033aa:	4639      	mov	r1, r7
 80033ac:	4630      	mov	r0, r6
 80033ae:	47c0      	blx	r8
 80033b0:	3001      	adds	r0, #1
 80033b2:	d0e6      	beq.n	8003382 <_printf_common+0xb6>
 80033b4:	f109 0901 	add.w	r9, r9, #1
 80033b8:	e7d7      	b.n	800336a <_printf_common+0x9e>
	...

080033bc <_printf_i>:
 80033bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033c0:	4617      	mov	r7, r2
 80033c2:	7e0a      	ldrb	r2, [r1, #24]
 80033c4:	b085      	sub	sp, #20
 80033c6:	2a6e      	cmp	r2, #110	; 0x6e
 80033c8:	4698      	mov	r8, r3
 80033ca:	4606      	mov	r6, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033d4:	f000 80bc 	beq.w	8003550 <_printf_i+0x194>
 80033d8:	d81a      	bhi.n	8003410 <_printf_i+0x54>
 80033da:	2a63      	cmp	r2, #99	; 0x63
 80033dc:	d02e      	beq.n	800343c <_printf_i+0x80>
 80033de:	d80a      	bhi.n	80033f6 <_printf_i+0x3a>
 80033e0:	2a00      	cmp	r2, #0
 80033e2:	f000 80c8 	beq.w	8003576 <_printf_i+0x1ba>
 80033e6:	2a58      	cmp	r2, #88	; 0x58
 80033e8:	f000 808a 	beq.w	8003500 <_printf_i+0x144>
 80033ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80033f4:	e02a      	b.n	800344c <_printf_i+0x90>
 80033f6:	2a64      	cmp	r2, #100	; 0x64
 80033f8:	d001      	beq.n	80033fe <_printf_i+0x42>
 80033fa:	2a69      	cmp	r2, #105	; 0x69
 80033fc:	d1f6      	bne.n	80033ec <_printf_i+0x30>
 80033fe:	6821      	ldr	r1, [r4, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003406:	d023      	beq.n	8003450 <_printf_i+0x94>
 8003408:	1d11      	adds	r1, r2, #4
 800340a:	6019      	str	r1, [r3, #0]
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	e027      	b.n	8003460 <_printf_i+0xa4>
 8003410:	2a73      	cmp	r2, #115	; 0x73
 8003412:	f000 80b4 	beq.w	800357e <_printf_i+0x1c2>
 8003416:	d808      	bhi.n	800342a <_printf_i+0x6e>
 8003418:	2a6f      	cmp	r2, #111	; 0x6f
 800341a:	d02a      	beq.n	8003472 <_printf_i+0xb6>
 800341c:	2a70      	cmp	r2, #112	; 0x70
 800341e:	d1e5      	bne.n	80033ec <_printf_i+0x30>
 8003420:	680a      	ldr	r2, [r1, #0]
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	600a      	str	r2, [r1, #0]
 8003428:	e003      	b.n	8003432 <_printf_i+0x76>
 800342a:	2a75      	cmp	r2, #117	; 0x75
 800342c:	d021      	beq.n	8003472 <_printf_i+0xb6>
 800342e:	2a78      	cmp	r2, #120	; 0x78
 8003430:	d1dc      	bne.n	80033ec <_printf_i+0x30>
 8003432:	2278      	movs	r2, #120	; 0x78
 8003434:	496f      	ldr	r1, [pc, #444]	; (80035f4 <_printf_i+0x238>)
 8003436:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800343a:	e064      	b.n	8003506 <_printf_i+0x14a>
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003442:	1d11      	adds	r1, r2, #4
 8003444:	6019      	str	r1, [r3, #0]
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800344c:	2301      	movs	r3, #1
 800344e:	e0a3      	b.n	8003598 <_printf_i+0x1dc>
 8003450:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003454:	f102 0104 	add.w	r1, r2, #4
 8003458:	6019      	str	r1, [r3, #0]
 800345a:	d0d7      	beq.n	800340c <_printf_i+0x50>
 800345c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003460:	2b00      	cmp	r3, #0
 8003462:	da03      	bge.n	800346c <_printf_i+0xb0>
 8003464:	222d      	movs	r2, #45	; 0x2d
 8003466:	425b      	negs	r3, r3
 8003468:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800346c:	4962      	ldr	r1, [pc, #392]	; (80035f8 <_printf_i+0x23c>)
 800346e:	220a      	movs	r2, #10
 8003470:	e017      	b.n	80034a2 <_printf_i+0xe6>
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	6819      	ldr	r1, [r3, #0]
 8003476:	f010 0f80 	tst.w	r0, #128	; 0x80
 800347a:	d003      	beq.n	8003484 <_printf_i+0xc8>
 800347c:	1d08      	adds	r0, r1, #4
 800347e:	6018      	str	r0, [r3, #0]
 8003480:	680b      	ldr	r3, [r1, #0]
 8003482:	e006      	b.n	8003492 <_printf_i+0xd6>
 8003484:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003488:	f101 0004 	add.w	r0, r1, #4
 800348c:	6018      	str	r0, [r3, #0]
 800348e:	d0f7      	beq.n	8003480 <_printf_i+0xc4>
 8003490:	880b      	ldrh	r3, [r1, #0]
 8003492:	2a6f      	cmp	r2, #111	; 0x6f
 8003494:	bf14      	ite	ne
 8003496:	220a      	movne	r2, #10
 8003498:	2208      	moveq	r2, #8
 800349a:	4957      	ldr	r1, [pc, #348]	; (80035f8 <_printf_i+0x23c>)
 800349c:	2000      	movs	r0, #0
 800349e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80034a2:	6865      	ldr	r5, [r4, #4]
 80034a4:	2d00      	cmp	r5, #0
 80034a6:	60a5      	str	r5, [r4, #8]
 80034a8:	f2c0 809c 	blt.w	80035e4 <_printf_i+0x228>
 80034ac:	6820      	ldr	r0, [r4, #0]
 80034ae:	f020 0004 	bic.w	r0, r0, #4
 80034b2:	6020      	str	r0, [r4, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d13f      	bne.n	8003538 <_printf_i+0x17c>
 80034b8:	2d00      	cmp	r5, #0
 80034ba:	f040 8095 	bne.w	80035e8 <_printf_i+0x22c>
 80034be:	4675      	mov	r5, lr
 80034c0:	2a08      	cmp	r2, #8
 80034c2:	d10b      	bne.n	80034dc <_printf_i+0x120>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	07da      	lsls	r2, r3, #31
 80034c8:	d508      	bpl.n	80034dc <_printf_i+0x120>
 80034ca:	6923      	ldr	r3, [r4, #16]
 80034cc:	6862      	ldr	r2, [r4, #4]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	bfde      	ittt	le
 80034d2:	2330      	movle	r3, #48	; 0x30
 80034d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034dc:	ebae 0305 	sub.w	r3, lr, r5
 80034e0:	6123      	str	r3, [r4, #16]
 80034e2:	f8cd 8000 	str.w	r8, [sp]
 80034e6:	463b      	mov	r3, r7
 80034e8:	aa03      	add	r2, sp, #12
 80034ea:	4621      	mov	r1, r4
 80034ec:	4630      	mov	r0, r6
 80034ee:	f7ff feed 	bl	80032cc <_printf_common>
 80034f2:	3001      	adds	r0, #1
 80034f4:	d155      	bne.n	80035a2 <_printf_i+0x1e6>
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	b005      	add	sp, #20
 80034fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003500:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003504:	493c      	ldr	r1, [pc, #240]	; (80035f8 <_printf_i+0x23c>)
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800350e:	f100 0504 	add.w	r5, r0, #4
 8003512:	601d      	str	r5, [r3, #0]
 8003514:	d001      	beq.n	800351a <_printf_i+0x15e>
 8003516:	6803      	ldr	r3, [r0, #0]
 8003518:	e002      	b.n	8003520 <_printf_i+0x164>
 800351a:	0655      	lsls	r5, r2, #25
 800351c:	d5fb      	bpl.n	8003516 <_printf_i+0x15a>
 800351e:	8803      	ldrh	r3, [r0, #0]
 8003520:	07d0      	lsls	r0, r2, #31
 8003522:	bf44      	itt	mi
 8003524:	f042 0220 	orrmi.w	r2, r2, #32
 8003528:	6022      	strmi	r2, [r4, #0]
 800352a:	b91b      	cbnz	r3, 8003534 <_printf_i+0x178>
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	f022 0220 	bic.w	r2, r2, #32
 8003532:	6022      	str	r2, [r4, #0]
 8003534:	2210      	movs	r2, #16
 8003536:	e7b1      	b.n	800349c <_printf_i+0xe0>
 8003538:	4675      	mov	r5, lr
 800353a:	fbb3 f0f2 	udiv	r0, r3, r2
 800353e:	fb02 3310 	mls	r3, r2, r0, r3
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003548:	4603      	mov	r3, r0
 800354a:	2800      	cmp	r0, #0
 800354c:	d1f5      	bne.n	800353a <_printf_i+0x17e>
 800354e:	e7b7      	b.n	80034c0 <_printf_i+0x104>
 8003550:	6808      	ldr	r0, [r1, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003558:	6949      	ldr	r1, [r1, #20]
 800355a:	d004      	beq.n	8003566 <_printf_i+0x1aa>
 800355c:	1d10      	adds	r0, r2, #4
 800355e:	6018      	str	r0, [r3, #0]
 8003560:	6813      	ldr	r3, [r2, #0]
 8003562:	6019      	str	r1, [r3, #0]
 8003564:	e007      	b.n	8003576 <_printf_i+0x1ba>
 8003566:	f010 0f40 	tst.w	r0, #64	; 0x40
 800356a:	f102 0004 	add.w	r0, r2, #4
 800356e:	6018      	str	r0, [r3, #0]
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	d0f6      	beq.n	8003562 <_printf_i+0x1a6>
 8003574:	8019      	strh	r1, [r3, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	4675      	mov	r5, lr
 800357a:	6123      	str	r3, [r4, #16]
 800357c:	e7b1      	b.n	80034e2 <_printf_i+0x126>
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	1d11      	adds	r1, r2, #4
 8003582:	6019      	str	r1, [r3, #0]
 8003584:	6815      	ldr	r5, [r2, #0]
 8003586:	2100      	movs	r1, #0
 8003588:	6862      	ldr	r2, [r4, #4]
 800358a:	4628      	mov	r0, r5
 800358c:	f000 f8e0 	bl	8003750 <memchr>
 8003590:	b108      	cbz	r0, 8003596 <_printf_i+0x1da>
 8003592:	1b40      	subs	r0, r0, r5
 8003594:	6060      	str	r0, [r4, #4]
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	6123      	str	r3, [r4, #16]
 800359a:	2300      	movs	r3, #0
 800359c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a0:	e79f      	b.n	80034e2 <_printf_i+0x126>
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	462a      	mov	r2, r5
 80035a6:	4639      	mov	r1, r7
 80035a8:	4630      	mov	r0, r6
 80035aa:	47c0      	blx	r8
 80035ac:	3001      	adds	r0, #1
 80035ae:	d0a2      	beq.n	80034f6 <_printf_i+0x13a>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	079b      	lsls	r3, r3, #30
 80035b4:	d507      	bpl.n	80035c6 <_printf_i+0x20a>
 80035b6:	2500      	movs	r5, #0
 80035b8:	f104 0919 	add.w	r9, r4, #25
 80035bc:	68e3      	ldr	r3, [r4, #12]
 80035be:	9a03      	ldr	r2, [sp, #12]
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	429d      	cmp	r5, r3
 80035c4:	db05      	blt.n	80035d2 <_printf_i+0x216>
 80035c6:	68e0      	ldr	r0, [r4, #12]
 80035c8:	9b03      	ldr	r3, [sp, #12]
 80035ca:	4298      	cmp	r0, r3
 80035cc:	bfb8      	it	lt
 80035ce:	4618      	movlt	r0, r3
 80035d0:	e793      	b.n	80034fa <_printf_i+0x13e>
 80035d2:	2301      	movs	r3, #1
 80035d4:	464a      	mov	r2, r9
 80035d6:	4639      	mov	r1, r7
 80035d8:	4630      	mov	r0, r6
 80035da:	47c0      	blx	r8
 80035dc:	3001      	adds	r0, #1
 80035de:	d08a      	beq.n	80034f6 <_printf_i+0x13a>
 80035e0:	3501      	adds	r5, #1
 80035e2:	e7eb      	b.n	80035bc <_printf_i+0x200>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1a7      	bne.n	8003538 <_printf_i+0x17c>
 80035e8:	780b      	ldrb	r3, [r1, #0]
 80035ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f2:	e765      	b.n	80034c0 <_printf_i+0x104>
 80035f4:	08003a56 	.word	0x08003a56
 80035f8:	08003a45 	.word	0x08003a45

080035fc <_sbrk_r>:
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	2300      	movs	r3, #0
 8003600:	4c05      	ldr	r4, [pc, #20]	; (8003618 <_sbrk_r+0x1c>)
 8003602:	4605      	mov	r5, r0
 8003604:	4608      	mov	r0, r1
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	f000 f936 	bl	8003878 <_sbrk>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	d102      	bne.n	8003616 <_sbrk_r+0x1a>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	b103      	cbz	r3, 8003616 <_sbrk_r+0x1a>
 8003614:	602b      	str	r3, [r5, #0]
 8003616:	bd38      	pop	{r3, r4, r5, pc}
 8003618:	200012c4 	.word	0x200012c4

0800361c <__sread>:
 800361c:	b510      	push	{r4, lr}
 800361e:	460c      	mov	r4, r1
 8003620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003624:	f000 f8e4 	bl	80037f0 <_read_r>
 8003628:	2800      	cmp	r0, #0
 800362a:	bfab      	itete	ge
 800362c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800362e:	89a3      	ldrhlt	r3, [r4, #12]
 8003630:	181b      	addge	r3, r3, r0
 8003632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003636:	bfac      	ite	ge
 8003638:	6563      	strge	r3, [r4, #84]	; 0x54
 800363a:	81a3      	strhlt	r3, [r4, #12]
 800363c:	bd10      	pop	{r4, pc}

0800363e <__swrite>:
 800363e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003642:	461f      	mov	r7, r3
 8003644:	898b      	ldrh	r3, [r1, #12]
 8003646:	4605      	mov	r5, r0
 8003648:	05db      	lsls	r3, r3, #23
 800364a:	460c      	mov	r4, r1
 800364c:	4616      	mov	r6, r2
 800364e:	d505      	bpl.n	800365c <__swrite+0x1e>
 8003650:	2302      	movs	r3, #2
 8003652:	2200      	movs	r2, #0
 8003654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003658:	f000 f868 	bl	800372c <_lseek_r>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	4632      	mov	r2, r6
 8003660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800366a:	463b      	mov	r3, r7
 800366c:	4628      	mov	r0, r5
 800366e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003672:	f000 b817 	b.w	80036a4 <_write_r>

08003676 <__sseek>:
 8003676:	b510      	push	{r4, lr}
 8003678:	460c      	mov	r4, r1
 800367a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800367e:	f000 f855 	bl	800372c <_lseek_r>
 8003682:	1c43      	adds	r3, r0, #1
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	bf15      	itete	ne
 8003688:	6560      	strne	r0, [r4, #84]	; 0x54
 800368a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800368e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003692:	81a3      	strheq	r3, [r4, #12]
 8003694:	bf18      	it	ne
 8003696:	81a3      	strhne	r3, [r4, #12]
 8003698:	bd10      	pop	{r4, pc}

0800369a <__sclose>:
 800369a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369e:	f000 b813 	b.w	80036c8 <_close_r>
	...

080036a4 <_write_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4605      	mov	r5, r0
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	2200      	movs	r2, #0
 80036ae:	4c05      	ldr	r4, [pc, #20]	; (80036c4 <_write_r+0x20>)
 80036b0:	6022      	str	r2, [r4, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f000 f8ee 	bl	8003894 <_write>
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	d102      	bne.n	80036c2 <_write_r+0x1e>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	b103      	cbz	r3, 80036c2 <_write_r+0x1e>
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
 80036c4:	200012c4 	.word	0x200012c4

080036c8 <_close_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	2300      	movs	r3, #0
 80036cc:	4c05      	ldr	r4, [pc, #20]	; (80036e4 <_close_r+0x1c>)
 80036ce:	4605      	mov	r5, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	f000 f8a8 	bl	8003828 <_close>
 80036d8:	1c43      	adds	r3, r0, #1
 80036da:	d102      	bne.n	80036e2 <_close_r+0x1a>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	b103      	cbz	r3, 80036e2 <_close_r+0x1a>
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
 80036e4:	200012c4 	.word	0x200012c4

080036e8 <_fstat_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	2300      	movs	r3, #0
 80036ec:	4c06      	ldr	r4, [pc, #24]	; (8003708 <_fstat_r+0x20>)
 80036ee:	4605      	mov	r5, r0
 80036f0:	4608      	mov	r0, r1
 80036f2:	4611      	mov	r1, r2
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	f000 f89f 	bl	8003838 <_fstat>
 80036fa:	1c43      	adds	r3, r0, #1
 80036fc:	d102      	bne.n	8003704 <_fstat_r+0x1c>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	b103      	cbz	r3, 8003704 <_fstat_r+0x1c>
 8003702:	602b      	str	r3, [r5, #0]
 8003704:	bd38      	pop	{r3, r4, r5, pc}
 8003706:	bf00      	nop
 8003708:	200012c4 	.word	0x200012c4

0800370c <_isatty_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	2300      	movs	r3, #0
 8003710:	4c05      	ldr	r4, [pc, #20]	; (8003728 <_isatty_r+0x1c>)
 8003712:	4605      	mov	r5, r0
 8003714:	4608      	mov	r0, r1
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	f000 f896 	bl	8003848 <_isatty>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_isatty_r+0x1a>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	b103      	cbz	r3, 8003726 <_isatty_r+0x1a>
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	200012c4 	.word	0x200012c4

0800372c <_lseek_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4605      	mov	r5, r0
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	2200      	movs	r2, #0
 8003736:	4c05      	ldr	r4, [pc, #20]	; (800374c <_lseek_r+0x20>)
 8003738:	6022      	str	r2, [r4, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f000 f88c 	bl	8003858 <_lseek>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d102      	bne.n	800374a <_lseek_r+0x1e>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	b103      	cbz	r3, 800374a <_lseek_r+0x1e>
 8003748:	602b      	str	r3, [r5, #0]
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	200012c4 	.word	0x200012c4

08003750 <memchr>:
 8003750:	b510      	push	{r4, lr}
 8003752:	b2c9      	uxtb	r1, r1
 8003754:	4402      	add	r2, r0
 8003756:	4290      	cmp	r0, r2
 8003758:	4603      	mov	r3, r0
 800375a:	d101      	bne.n	8003760 <memchr+0x10>
 800375c:	2000      	movs	r0, #0
 800375e:	bd10      	pop	{r4, pc}
 8003760:	781c      	ldrb	r4, [r3, #0]
 8003762:	3001      	adds	r0, #1
 8003764:	428c      	cmp	r4, r1
 8003766:	d1f6      	bne.n	8003756 <memchr+0x6>
 8003768:	4618      	mov	r0, r3
 800376a:	bd10      	pop	{r4, pc}

0800376c <memmove>:
 800376c:	4288      	cmp	r0, r1
 800376e:	b510      	push	{r4, lr}
 8003770:	eb01 0302 	add.w	r3, r1, r2
 8003774:	d803      	bhi.n	800377e <memmove+0x12>
 8003776:	1e42      	subs	r2, r0, #1
 8003778:	4299      	cmp	r1, r3
 800377a:	d10c      	bne.n	8003796 <memmove+0x2a>
 800377c:	bd10      	pop	{r4, pc}
 800377e:	4298      	cmp	r0, r3
 8003780:	d2f9      	bcs.n	8003776 <memmove+0xa>
 8003782:	1881      	adds	r1, r0, r2
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	42d3      	cmn	r3, r2
 8003788:	d100      	bne.n	800378c <memmove+0x20>
 800378a:	bd10      	pop	{r4, pc}
 800378c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003790:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003794:	e7f7      	b.n	8003786 <memmove+0x1a>
 8003796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800379a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800379e:	e7eb      	b.n	8003778 <memmove+0xc>

080037a0 <__malloc_lock>:
 80037a0:	4770      	bx	lr

080037a2 <__malloc_unlock>:
 80037a2:	4770      	bx	lr

080037a4 <_realloc_r>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	4607      	mov	r7, r0
 80037a8:	4614      	mov	r4, r2
 80037aa:	460e      	mov	r6, r1
 80037ac:	b921      	cbnz	r1, 80037b8 <_realloc_r+0x14>
 80037ae:	4611      	mov	r1, r2
 80037b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037b4:	f7ff ba9e 	b.w	8002cf4 <_malloc_r>
 80037b8:	b922      	cbnz	r2, 80037c4 <_realloc_r+0x20>
 80037ba:	f7ff fa4f 	bl	8002c5c <_free_r>
 80037be:	4625      	mov	r5, r4
 80037c0:	4628      	mov	r0, r5
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c4:	f000 f826 	bl	8003814 <_malloc_usable_size_r>
 80037c8:	4284      	cmp	r4, r0
 80037ca:	d90f      	bls.n	80037ec <_realloc_r+0x48>
 80037cc:	4621      	mov	r1, r4
 80037ce:	4638      	mov	r0, r7
 80037d0:	f7ff fa90 	bl	8002cf4 <_malloc_r>
 80037d4:	4605      	mov	r5, r0
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d0f2      	beq.n	80037c0 <_realloc_r+0x1c>
 80037da:	4631      	mov	r1, r6
 80037dc:	4622      	mov	r2, r4
 80037de:	f7fe fee1 	bl	80025a4 <memcpy>
 80037e2:	4631      	mov	r1, r6
 80037e4:	4638      	mov	r0, r7
 80037e6:	f7ff fa39 	bl	8002c5c <_free_r>
 80037ea:	e7e9      	b.n	80037c0 <_realloc_r+0x1c>
 80037ec:	4635      	mov	r5, r6
 80037ee:	e7e7      	b.n	80037c0 <_realloc_r+0x1c>

080037f0 <_read_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4605      	mov	r5, r0
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	2200      	movs	r2, #0
 80037fa:	4c05      	ldr	r4, [pc, #20]	; (8003810 <_read_r+0x20>)
 80037fc:	6022      	str	r2, [r4, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	f000 f832 	bl	8003868 <_read>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_read_r+0x1e>
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	b103      	cbz	r3, 800380e <_read_r+0x1e>
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	200012c4 	.word	0x200012c4

08003814 <_malloc_usable_size_r>:
 8003814:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003818:	2800      	cmp	r0, #0
 800381a:	f1a0 0004 	sub.w	r0, r0, #4
 800381e:	bfbc      	itt	lt
 8003820:	580b      	ldrlt	r3, [r1, r0]
 8003822:	18c0      	addlt	r0, r0, r3
 8003824:	4770      	bx	lr
	...

08003828 <_close>:
 8003828:	2258      	movs	r2, #88	; 0x58
 800382a:	4b02      	ldr	r3, [pc, #8]	; (8003834 <_close+0xc>)
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	4770      	bx	lr
 8003834:	200012c4 	.word	0x200012c4

08003838 <_fstat>:
 8003838:	2258      	movs	r2, #88	; 0x58
 800383a:	4b02      	ldr	r3, [pc, #8]	; (8003844 <_fstat+0xc>)
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	4770      	bx	lr
 8003844:	200012c4 	.word	0x200012c4

08003848 <_isatty>:
 8003848:	2258      	movs	r2, #88	; 0x58
 800384a:	4b02      	ldr	r3, [pc, #8]	; (8003854 <_isatty+0xc>)
 800384c:	2000      	movs	r0, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	200012c4 	.word	0x200012c4

08003858 <_lseek>:
 8003858:	2258      	movs	r2, #88	; 0x58
 800385a:	4b02      	ldr	r3, [pc, #8]	; (8003864 <_lseek+0xc>)
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	4770      	bx	lr
 8003864:	200012c4 	.word	0x200012c4

08003868 <_read>:
 8003868:	2258      	movs	r2, #88	; 0x58
 800386a:	4b02      	ldr	r3, [pc, #8]	; (8003874 <_read+0xc>)
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	4770      	bx	lr
 8003874:	200012c4 	.word	0x200012c4

08003878 <_sbrk>:
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <_sbrk+0x14>)
 800387a:	4602      	mov	r2, r0
 800387c:	6819      	ldr	r1, [r3, #0]
 800387e:	b909      	cbnz	r1, 8003884 <_sbrk+0xc>
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <_sbrk+0x18>)
 8003882:	6019      	str	r1, [r3, #0]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	4402      	add	r2, r0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	4770      	bx	lr
 800388c:	200011f0 	.word	0x200011f0
 8003890:	200012c8 	.word	0x200012c8

08003894 <_write>:
 8003894:	2258      	movs	r2, #88	; 0x58
 8003896:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <_write+0xc>)
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	4770      	bx	lr
 80038a0:	200012c4 	.word	0x200012c4

080038a4 <_init>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr

080038b0 <_fini>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr
